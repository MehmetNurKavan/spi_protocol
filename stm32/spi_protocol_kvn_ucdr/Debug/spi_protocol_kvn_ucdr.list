
spi_protocol_kvn_ucdr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006514  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  08006628  08006628  00007628  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a78  08006a78  000081d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006a78  08006a78  00007a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a80  08006a80  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a80  08006a80  00007a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006a84  08006a84  00007a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08006a88  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  200001d4  08006c5c  000081d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000344  08006c5c  00008344  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000031eb  00000000  00000000  000081fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000010d4  00000000  00000000  0000b3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004b8  00000000  00000000  0000c4c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000035e  00000000  00000000  0000c978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016df0  00000000  00000000  0000ccd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000058c6  00000000  00000000  00023ac6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f0ad  00000000  00000000  0002938c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a8439  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025b8  00000000  00000000  000a847c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  000aaa34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800660c 	.word	0x0800660c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	0800660c 	.word	0x0800660c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	4604      	mov	r4, r0
 8000b70:	460d      	mov	r5, r1
 8000b72:	f7ff ff23 	bl	80009bc <__aeabi_dcmplt>
 8000b76:	b928      	cbnz	r0, 8000b84 <__aeabi_d2lz+0x1c>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	4629      	mov	r1, r5
 8000b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b80:	f000 b80a 	b.w	8000b98 <__aeabi_d2ulz>
 8000b84:	4620      	mov	r0, r4
 8000b86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b8a:	f000 f805 	bl	8000b98 <__aeabi_d2ulz>
 8000b8e:	4240      	negs	r0, r0
 8000b90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b94:	bd38      	pop	{r3, r4, r5, pc}
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2ulz>:
 8000b98:	b5d0      	push	{r4, r6, r7, lr}
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <__aeabi_d2ulz+0x34>)
 8000b9e:	4606      	mov	r6, r0
 8000ba0:	460f      	mov	r7, r1
 8000ba2:	f7ff fc99 	bl	80004d8 <__aeabi_dmul>
 8000ba6:	f7ff ff6f 	bl	8000a88 <__aeabi_d2uiz>
 8000baa:	4604      	mov	r4, r0
 8000bac:	f7ff fc1a 	bl	80003e4 <__aeabi_ui2d>
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <__aeabi_d2ulz+0x38>)
 8000bb4:	f7ff fc90 	bl	80004d8 <__aeabi_dmul>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	460b      	mov	r3, r1
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	4639      	mov	r1, r7
 8000bc0:	f7ff fad2 	bl	8000168 <__aeabi_dsub>
 8000bc4:	f7ff ff60 	bl	8000a88 <__aeabi_d2uiz>
 8000bc8:	4621      	mov	r1, r4
 8000bca:	bdd0      	pop	{r4, r6, r7, pc}
 8000bcc:	3df00000 	.word	0x3df00000
 8000bd0:	41f00000 	.word	0x41f00000

08000bd4 <SPI_GPIO_Init>:
/* USER CODE BEGIN 0 */

/**
 * @brief SPI için GPIO pinlerini başlatır.
 */
void SPI_GPIO_Init(void) {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b086      	sub	sp, #24
 8000bd8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bda:	f107 0308 	add.w	r3, r7, #8
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]
 8000be4:	609a      	str	r2, [r3, #8]
 8000be6:	60da      	str	r2, [r3, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();  // GPIOA portunun saat sinyalini etkinleştir
 8000be8:	4b1e      	ldr	r3, [pc, #120]	@ (8000c64 <SPI_GPIO_Init+0x90>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	4a1d      	ldr	r2, [pc, #116]	@ (8000c64 <SPI_GPIO_Init+0x90>)
 8000bee:	f043 0304 	orr.w	r3, r3, #4
 8000bf2:	6193      	str	r3, [r2, #24]
 8000bf4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c64 <SPI_GPIO_Init+0x90>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	f003 0304 	and.w	r3, r3, #4
 8000bfc:	607b      	str	r3, [r7, #4]
 8000bfe:	687b      	ldr	r3, [r7, #4]

    // SPI giriş pinleri: PA4 (SS), PA5 (SCK), PA7 (MOSI)
    GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_7;
 8000c00:	23b0      	movs	r3, #176	@ 0xb0
 8000c02:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c04:	2300      	movs	r3, #0
 8000c06:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0c:	f107 0308 	add.w	r3, r7, #8
 8000c10:	4619      	mov	r1, r3
 8000c12:	4815      	ldr	r0, [pc, #84]	@ (8000c68 <SPI_GPIO_Init+0x94>)
 8000c14:	f000 fc14 	bl	8001440 <HAL_GPIO_Init>

    // SPI çıkış pini: PA6 (MISO)
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c18:	2340      	movs	r3, #64	@ 0x40
 8000c1a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c20:	2303      	movs	r3, #3
 8000c22:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c24:	f107 0308 	add.w	r3, r7, #8
 8000c28:	4619      	mov	r1, r3
 8000c2a:	480f      	ldr	r0, [pc, #60]	@ (8000c68 <SPI_GPIO_Init+0x94>)
 8000c2c:	f000 fc08 	bl	8001440 <HAL_GPIO_Init>

    // LED pinleri: PA0 ve PA1
    GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000c30:	2303      	movs	r3, #3
 8000c32:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c34:	2301      	movs	r3, #1
 8000c36:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3c:	f107 0308 	add.w	r3, r7, #8
 8000c40:	4619      	mov	r1, r3
 8000c42:	4809      	ldr	r0, [pc, #36]	@ (8000c68 <SPI_GPIO_Init+0x94>)
 8000c44:	f000 fbfc 	bl	8001440 <HAL_GPIO_Init>

    // LED'leri başlangıçta söndür
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	2101      	movs	r1, #1
 8000c4c:	4806      	ldr	r0, [pc, #24]	@ (8000c68 <SPI_GPIO_Init+0x94>)
 8000c4e:	f000 fd8a 	bl	8001766 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000c52:	2200      	movs	r2, #0
 8000c54:	2102      	movs	r1, #2
 8000c56:	4804      	ldr	r0, [pc, #16]	@ (8000c68 <SPI_GPIO_Init+0x94>)
 8000c58:	f000 fd85 	bl	8001766 <HAL_GPIO_WritePin>
}
 8000c5c:	bf00      	nop
 8000c5e:	3718      	adds	r7, #24
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40021000 	.word	0x40021000
 8000c68:	40010800 	.word	0x40010800

08000c6c <SPI_Receive>:

/**
 * @brief SPI üzerinden veri alır.
 * @retval uint8_t Alınan veri
 */
uint8_t SPI_Receive(void) {
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
    uint8_t receivedData = 0;  // Alınan veriyi saklamak için değişken
 8000c72:	2300      	movs	r3, #0
 8000c74:	71fb      	strb	r3, [r7, #7]
    
    // 8 bitlik veriyi al
    for (int i = 7; i >= 0; i--) {
 8000c76:	2307      	movs	r3, #7
 8000c78:	603b      	str	r3, [r7, #0]
 8000c7a:	e020      	b.n	8000cbe <SPI_Receive+0x52>
        // Clock HIGH olana kadar bekle
        while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_RESET);
 8000c7c:	bf00      	nop
 8000c7e:	2120      	movs	r1, #32
 8000c80:	4813      	ldr	r0, [pc, #76]	@ (8000cd0 <SPI_Receive+0x64>)
 8000c82:	f000 fd59 	bl	8001738 <HAL_GPIO_ReadPin>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d0f8      	beq.n	8000c7e <SPI_Receive+0x12>
        
        // MOSI pinindeki veriyi oku ve kaydet
        receivedData = (receivedData << 1);
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	71fb      	strb	r3, [r7, #7]
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7)) {
 8000c92:	2180      	movs	r1, #128	@ 0x80
 8000c94:	480e      	ldr	r0, [pc, #56]	@ (8000cd0 <SPI_Receive+0x64>)
 8000c96:	f000 fd4f 	bl	8001738 <HAL_GPIO_ReadPin>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d003      	beq.n	8000ca8 <SPI_Receive+0x3c>
            receivedData |= 0x01;
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	f043 0301 	orr.w	r3, r3, #1
 8000ca6:	71fb      	strb	r3, [r7, #7]
        }
        
        // Clock LOW olana kadar bekle
        while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_SET);
 8000ca8:	bf00      	nop
 8000caa:	2120      	movs	r1, #32
 8000cac:	4808      	ldr	r0, [pc, #32]	@ (8000cd0 <SPI_Receive+0x64>)
 8000cae:	f000 fd43 	bl	8001738 <HAL_GPIO_ReadPin>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d0f8      	beq.n	8000caa <SPI_Receive+0x3e>
    for (int i = 7; i >= 0; i--) {
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	3b01      	subs	r3, #1
 8000cbc:	603b      	str	r3, [r7, #0]
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	dadb      	bge.n	8000c7c <SPI_Receive+0x10>
    }
    
    return receivedData;  // Alınan veriyi döndür
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40010800 	.word	0x40010800

08000cd4 <SPI_Send>:

/**
 * @brief SPI üzerinden veri gönderir.
 * @param data Gönderilecek veri (8 bit)
 */
void SPI_Send(uint8_t data) {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	71fb      	strb	r3, [r7, #7]
    // MISO pinine en düşük biti gönder
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, (data & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	f003 0301 	and.w	r3, r3, #1
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	2140      	movs	r1, #64	@ 0x40
 8000cea:	480c      	ldr	r0, [pc, #48]	@ (8000d1c <SPI_Send+0x48>)
 8000cec:	f000 fd3b 	bl	8001766 <HAL_GPIO_WritePin>
    
    // Clock sinyalini bekle
    while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_RESET);
 8000cf0:	bf00      	nop
 8000cf2:	2120      	movs	r1, #32
 8000cf4:	4809      	ldr	r0, [pc, #36]	@ (8000d1c <SPI_Send+0x48>)
 8000cf6:	f000 fd1f 	bl	8001738 <HAL_GPIO_ReadPin>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d0f8      	beq.n	8000cf2 <SPI_Send+0x1e>
    while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_SET);
 8000d00:	bf00      	nop
 8000d02:	2120      	movs	r1, #32
 8000d04:	4805      	ldr	r0, [pc, #20]	@ (8000d1c <SPI_Send+0x48>)
 8000d06:	f000 fd17 	bl	8001738 <HAL_GPIO_ReadPin>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d0f8      	beq.n	8000d02 <SPI_Send+0x2e>
}
 8000d10:	bf00      	nop
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40010800 	.word	0x40010800

08000d20 <SPI_CheckSlaveSelect>:

/**
 * @brief Slave Select (SS) pininin durumunu kontrol eder.
 * @retval uint8_t SS pin durumu (1: HIGH, 0: LOW)
 */
uint8_t SPI_CheckSlaveSelect(void) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
 8000d24:	2110      	movs	r1, #16
 8000d26:	4803      	ldr	r0, [pc, #12]	@ (8000d34 <SPI_CheckSlaveSelect+0x14>)
 8000d28:	f000 fd06 	bl	8001738 <HAL_GPIO_ReadPin>
 8000d2c:	4603      	mov	r3, r0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40010800 	.word	0x40010800

08000d38 <main>:
/**
  * @brief  Ana programın giriş noktası.
  * @retval int
  */
int main(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
  HAL_Init();                // HAL kütüphanesini başlat
 8000d3e:	f000 fa39 	bl	80011b4 <HAL_Init>
  SystemClock_Config();      // Sistem saat yapılandırmasını yap
 8000d42:	f000 f83d 	bl	8000dc0 <SystemClock_Config>
  MX_GPIO_Init();            // Genel GPIO yapılandırmasını yap
 8000d46:	f000 f877 	bl	8000e38 <MX_GPIO_Init>
  SPI_GPIO_Init();           // SPI için GPIO yapılandırmasını yap
 8000d4a:	f7ff ff43 	bl	8000bd4 <SPI_GPIO_Init>

  // Başlangıçta LED'leri söndür
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0 | GPIO_PIN_1, GPIO_PIN_RESET);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2103      	movs	r1, #3
 8000d52:	481a      	ldr	r0, [pc, #104]	@ (8000dbc <main+0x84>)
 8000d54:	f000 fd07 	bl	8001766 <HAL_GPIO_WritePin>

  while (1)
  {
    // SS aktif olana kadar bekle
    while (SPI_CheckSlaveSelect() == GPIO_PIN_SET);
 8000d58:	bf00      	nop
 8000d5a:	f7ff ffe1 	bl	8000d20 <SPI_CheckSlaveSelect>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d0fa      	beq.n	8000d5a <main+0x22>

    // SPI üzerinden veriyi al
    uint8_t data = SPI_Receive();
 8000d64:	f7ff ff82 	bl	8000c6c <SPI_Receive>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	71fb      	strb	r3, [r7, #7]

    // Verinin tek/çift durumunu kontrol et
    uint8_t isOdd = (data & 0x01);  // Son bit 1 ise tek, 0 ise çift
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	71bb      	strb	r3, [r7, #6]

    // LED'leri kontrol et
    if (isOdd) {
 8000d74:	79bb      	ldrb	r3, [r7, #6]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d00a      	beq.n	8000d90 <main+0x58>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);  // Çift LED söndür
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	480f      	ldr	r0, [pc, #60]	@ (8000dbc <main+0x84>)
 8000d80:	f000 fcf1 	bl	8001766 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);    // Tek LED yak
 8000d84:	2201      	movs	r2, #1
 8000d86:	2102      	movs	r1, #2
 8000d88:	480c      	ldr	r0, [pc, #48]	@ (8000dbc <main+0x84>)
 8000d8a:	f000 fcec 	bl	8001766 <HAL_GPIO_WritePin>
 8000d8e:	e009      	b.n	8000da4 <main+0x6c>
    } else {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);    // Çift LED yak
 8000d90:	2201      	movs	r2, #1
 8000d92:	2101      	movs	r1, #1
 8000d94:	4809      	ldr	r0, [pc, #36]	@ (8000dbc <main+0x84>)
 8000d96:	f000 fce6 	bl	8001766 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);  // Tek LED söndür
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2102      	movs	r1, #2
 8000d9e:	4807      	ldr	r0, [pc, #28]	@ (8000dbc <main+0x84>)
 8000da0:	f000 fce1 	bl	8001766 <HAL_GPIO_WritePin>
    }

    // Tek/çift bilgisini SPI ile gönder
    SPI_Send(isOdd);
 8000da4:	79bb      	ldrb	r3, [r7, #6]
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff ff94 	bl	8000cd4 <SPI_Send>

    // SS'in tekrar deaktif olmasını bekle
    while (SPI_CheckSlaveSelect() == GPIO_PIN_RESET);
 8000dac:	bf00      	nop
 8000dae:	f7ff ffb7 	bl	8000d20 <SPI_CheckSlaveSelect>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d0fa      	beq.n	8000dae <main+0x76>
  {
 8000db8:	e7ce      	b.n	8000d58 <main+0x20>
 8000dba:	bf00      	nop
 8000dbc:	40010800 	.word	0x40010800

08000dc0 <SystemClock_Config>:
/**
  * @brief Sistem saat yapılandırma fonksiyonu.
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b090      	sub	sp, #64	@ 0x40
 8000dc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dc6:	f107 0318 	add.w	r3, r7, #24
 8000dca:	2228      	movs	r2, #40	@ 0x28
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f002 f851 	bl	8002e76 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	60da      	str	r2, [r3, #12]
 8000de0:	611a      	str	r2, [r3, #16]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000de2:	2302      	movs	r3, #2
 8000de4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000de6:	2301      	movs	r3, #1
 8000de8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dea:	2310      	movs	r3, #16
 8000dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000dee:	2300      	movs	r3, #0
 8000df0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df2:	f107 0318 	add.w	r3, r7, #24
 8000df6:	4618      	mov	r0, r3
 8000df8:	f000 fcce 	bl	8001798 <HAL_RCC_OscConfig>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000e02:	f000 f885 	bl	8000f10 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e06:	230f      	movs	r3, #15
 8000e08:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e12:	2300      	movs	r3, #0
 8000e14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e16:	2300      	movs	r3, #0
 8000e18:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e1a:	1d3b      	adds	r3, r7, #4
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f000 ff3c 	bl	8001c9c <HAL_RCC_ClockConfig>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000e2a:	f000 f871 	bl	8000f10 <Error_Handler>
  }
}
 8000e2e:	bf00      	nop
 8000e30:	3740      	adds	r7, #64	@ 0x40
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
	...

08000e38 <MX_GPIO_Init>:
/**
  * @brief GPIO yapılandırma fonksiyonu.
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b088      	sub	sp, #32
 8000e3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3e:	f107 0310 	add.w	r3, r7, #16
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	605a      	str	r2, [r3, #4]
 8000e48:	609a      	str	r2, [r3, #8]
 8000e4a:	60da      	str	r2, [r3, #12]

  // Gerekli GPIO portlarının saat sinyallerini etkinleştir
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e4c:	4b2d      	ldr	r3, [pc, #180]	@ (8000f04 <MX_GPIO_Init+0xcc>)
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	4a2c      	ldr	r2, [pc, #176]	@ (8000f04 <MX_GPIO_Init+0xcc>)
 8000e52:	f043 0310 	orr.w	r3, r3, #16
 8000e56:	6193      	str	r3, [r2, #24]
 8000e58:	4b2a      	ldr	r3, [pc, #168]	@ (8000f04 <MX_GPIO_Init+0xcc>)
 8000e5a:	699b      	ldr	r3, [r3, #24]
 8000e5c:	f003 0310 	and.w	r3, r3, #16
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e64:	4b27      	ldr	r3, [pc, #156]	@ (8000f04 <MX_GPIO_Init+0xcc>)
 8000e66:	699b      	ldr	r3, [r3, #24]
 8000e68:	4a26      	ldr	r2, [pc, #152]	@ (8000f04 <MX_GPIO_Init+0xcc>)
 8000e6a:	f043 0320 	orr.w	r3, r3, #32
 8000e6e:	6193      	str	r3, [r2, #24]
 8000e70:	4b24      	ldr	r3, [pc, #144]	@ (8000f04 <MX_GPIO_Init+0xcc>)
 8000e72:	699b      	ldr	r3, [r3, #24]
 8000e74:	f003 0320 	and.w	r3, r3, #32
 8000e78:	60bb      	str	r3, [r7, #8]
 8000e7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7c:	4b21      	ldr	r3, [pc, #132]	@ (8000f04 <MX_GPIO_Init+0xcc>)
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	4a20      	ldr	r2, [pc, #128]	@ (8000f04 <MX_GPIO_Init+0xcc>)
 8000e82:	f043 0304 	orr.w	r3, r3, #4
 8000e86:	6193      	str	r3, [r2, #24]
 8000e88:	4b1e      	ldr	r3, [pc, #120]	@ (8000f04 <MX_GPIO_Init+0xcc>)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	f003 0304 	and.w	r3, r3, #4
 8000e90:	607b      	str	r3, [r7, #4]
 8000e92:	687b      	ldr	r3, [r7, #4]

  // LED'leri başlangıçta söndür
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000e94:	2200      	movs	r2, #0
 8000e96:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e9a:	481b      	ldr	r0, [pc, #108]	@ (8000f08 <MX_GPIO_Init+0xd0>)
 8000e9c:	f000 fc63 	bl	8001766 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6, GPIO_PIN_RESET);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2143      	movs	r1, #67	@ 0x43
 8000ea4:	4819      	ldr	r0, [pc, #100]	@ (8000f0c <MX_GPIO_Init+0xd4>)
 8000ea6:	f000 fc5e 	bl	8001766 <HAL_GPIO_WritePin>

  // GPIOC için pin yapılandırması
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000eaa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000eae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ebc:	f107 0310 	add.w	r3, r7, #16
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4811      	ldr	r0, [pc, #68]	@ (8000f08 <MX_GPIO_Init+0xd0>)
 8000ec4:	f000 fabc 	bl	8001440 <HAL_GPIO_Init>

  // GPIOA için pin yapılandırması
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6;
 8000ec8:	2343      	movs	r3, #67	@ 0x43
 8000eca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed8:	f107 0310 	add.w	r3, r7, #16
 8000edc:	4619      	mov	r1, r3
 8000ede:	480b      	ldr	r0, [pc, #44]	@ (8000f0c <MX_GPIO_Init+0xd4>)
 8000ee0:	f000 faae 	bl	8001440 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000ee4:	23b0      	movs	r3, #176	@ 0xb0
 8000ee6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef0:	f107 0310 	add.w	r3, r7, #16
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4805      	ldr	r0, [pc, #20]	@ (8000f0c <MX_GPIO_Init+0xd4>)
 8000ef8:	f000 faa2 	bl	8001440 <HAL_GPIO_Init>
}
 8000efc:	bf00      	nop
 8000efe:	3720      	adds	r7, #32
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40021000 	.word	0x40021000
 8000f08:	40011000 	.word	0x40011000
 8000f0c:	40010800 	.word	0x40010800

08000f10 <Error_Handler>:
/**
  * @brief Hata durumunda çağrılan fonksiyon.
  * @retval None
  */
void Error_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f14:	b672      	cpsid	i
}
 8000f16:	bf00      	nop
  __disable_irq();  // Kesme sinyallerini devre dışı bırak
  while (1)
 8000f18:	bf00      	nop
 8000f1a:	e7fd      	b.n	8000f18 <Error_Handler+0x8>

08000f1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f22:	4b15      	ldr	r3, [pc, #84]	@ (8000f78 <HAL_MspInit+0x5c>)
 8000f24:	699b      	ldr	r3, [r3, #24]
 8000f26:	4a14      	ldr	r2, [pc, #80]	@ (8000f78 <HAL_MspInit+0x5c>)
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	6193      	str	r3, [r2, #24]
 8000f2e:	4b12      	ldr	r3, [pc, #72]	@ (8000f78 <HAL_MspInit+0x5c>)
 8000f30:	699b      	ldr	r3, [r3, #24]
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	60bb      	str	r3, [r7, #8]
 8000f38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f78 <HAL_MspInit+0x5c>)
 8000f3c:	69db      	ldr	r3, [r3, #28]
 8000f3e:	4a0e      	ldr	r2, [pc, #56]	@ (8000f78 <HAL_MspInit+0x5c>)
 8000f40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f44:	61d3      	str	r3, [r2, #28]
 8000f46:	4b0c      	ldr	r3, [pc, #48]	@ (8000f78 <HAL_MspInit+0x5c>)
 8000f48:	69db      	ldr	r3, [r3, #28]
 8000f4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f52:	4b0a      	ldr	r3, [pc, #40]	@ (8000f7c <HAL_MspInit+0x60>)
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	4a04      	ldr	r2, [pc, #16]	@ (8000f7c <HAL_MspInit+0x60>)
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	3714      	adds	r7, #20
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc80      	pop	{r7}
 8000f76:	4770      	bx	lr
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	40010000 	.word	0x40010000

08000f80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f84:	bf00      	nop
 8000f86:	e7fd      	b.n	8000f84 <NMI_Handler+0x4>

08000f88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f8c:	bf00      	nop
 8000f8e:	e7fd      	b.n	8000f8c <HardFault_Handler+0x4>

08000f90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f94:	bf00      	nop
 8000f96:	e7fd      	b.n	8000f94 <MemManage_Handler+0x4>

08000f98 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f9c:	bf00      	nop
 8000f9e:	e7fd      	b.n	8000f9c <BusFault_Handler+0x4>

08000fa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa4:	bf00      	nop
 8000fa6:	e7fd      	b.n	8000fa4 <UsageFault_Handler+0x4>

08000fa8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr

08000fb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr

08000fc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bc80      	pop	{r7}
 8000fca:	4770      	bx	lr

08000fcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fd0:	f000 f936 	bl	8001240 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fd4:	bf00      	nop
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  return 1;
 8000fdc:	2301      	movs	r3, #1
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bc80      	pop	{r7}
 8000fe4:	4770      	bx	lr

08000fe6 <_kill>:

int _kill(int pid, int sig)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b082      	sub	sp, #8
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
 8000fee:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000ff0:	f001 ff94 	bl	8002f1c <__errno>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2216      	movs	r2, #22
 8000ff8:	601a      	str	r2, [r3, #0]
  return -1;
 8000ffa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <_exit>:

void _exit (int status)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b082      	sub	sp, #8
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800100e:	f04f 31ff 	mov.w	r1, #4294967295
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f7ff ffe7 	bl	8000fe6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001018:	bf00      	nop
 800101a:	e7fd      	b.n	8001018 <_exit+0x12>

0800101c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]
 800102c:	e00a      	b.n	8001044 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800102e:	f3af 8000 	nop.w
 8001032:	4601      	mov	r1, r0
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	1c5a      	adds	r2, r3, #1
 8001038:	60ba      	str	r2, [r7, #8]
 800103a:	b2ca      	uxtb	r2, r1
 800103c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	3301      	adds	r3, #1
 8001042:	617b      	str	r3, [r7, #20]
 8001044:	697a      	ldr	r2, [r7, #20]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	429a      	cmp	r2, r3
 800104a:	dbf0      	blt.n	800102e <_read+0x12>
  }

  return len;
 800104c:	687b      	ldr	r3, [r7, #4]
}
 800104e:	4618      	mov	r0, r3
 8001050:	3718      	adds	r7, #24
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b086      	sub	sp, #24
 800105a:	af00      	add	r7, sp, #0
 800105c:	60f8      	str	r0, [r7, #12]
 800105e:	60b9      	str	r1, [r7, #8]
 8001060:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]
 8001066:	e009      	b.n	800107c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	1c5a      	adds	r2, r3, #1
 800106c:	60ba      	str	r2, [r7, #8]
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	4618      	mov	r0, r3
 8001072:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	3301      	adds	r3, #1
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	697a      	ldr	r2, [r7, #20]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	429a      	cmp	r2, r3
 8001082:	dbf1      	blt.n	8001068 <_write+0x12>
  }
  return len;
 8001084:	687b      	ldr	r3, [r7, #4]
}
 8001086:	4618      	mov	r0, r3
 8001088:	3718      	adds	r7, #24
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <_close>:

int _close(int file)
{
 800108e:	b480      	push	{r7}
 8001090:	b083      	sub	sp, #12
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001096:	f04f 33ff 	mov.w	r3, #4294967295
}
 800109a:	4618      	mov	r0, r3
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	bc80      	pop	{r7}
 80010a2:	4770      	bx	lr

080010a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010b4:	605a      	str	r2, [r3, #4]
  return 0;
 80010b6:	2300      	movs	r3, #0
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	bc80      	pop	{r7}
 80010c0:	4770      	bx	lr

080010c2 <_isatty>:

int _isatty(int file)
{
 80010c2:	b480      	push	{r7}
 80010c4:	b083      	sub	sp, #12
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010ca:	2301      	movs	r3, #1
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bc80      	pop	{r7}
 80010d4:	4770      	bx	lr

080010d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010d6:	b480      	push	{r7}
 80010d8:	b085      	sub	sp, #20
 80010da:	af00      	add	r7, sp, #0
 80010dc:	60f8      	str	r0, [r7, #12]
 80010de:	60b9      	str	r1, [r7, #8]
 80010e0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010e2:	2300      	movs	r3, #0
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3714      	adds	r7, #20
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bc80      	pop	{r7}
 80010ec:	4770      	bx	lr
	...

080010f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010f8:	4a14      	ldr	r2, [pc, #80]	@ (800114c <_sbrk+0x5c>)
 80010fa:	4b15      	ldr	r3, [pc, #84]	@ (8001150 <_sbrk+0x60>)
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001104:	4b13      	ldr	r3, [pc, #76]	@ (8001154 <_sbrk+0x64>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d102      	bne.n	8001112 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800110c:	4b11      	ldr	r3, [pc, #68]	@ (8001154 <_sbrk+0x64>)
 800110e:	4a12      	ldr	r2, [pc, #72]	@ (8001158 <_sbrk+0x68>)
 8001110:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001112:	4b10      	ldr	r3, [pc, #64]	@ (8001154 <_sbrk+0x64>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4413      	add	r3, r2
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	429a      	cmp	r2, r3
 800111e:	d207      	bcs.n	8001130 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001120:	f001 fefc 	bl	8002f1c <__errno>
 8001124:	4603      	mov	r3, r0
 8001126:	220c      	movs	r2, #12
 8001128:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800112a:	f04f 33ff 	mov.w	r3, #4294967295
 800112e:	e009      	b.n	8001144 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001130:	4b08      	ldr	r3, [pc, #32]	@ (8001154 <_sbrk+0x64>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001136:	4b07      	ldr	r3, [pc, #28]	@ (8001154 <_sbrk+0x64>)
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4413      	add	r3, r2
 800113e:	4a05      	ldr	r2, [pc, #20]	@ (8001154 <_sbrk+0x64>)
 8001140:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001142:	68fb      	ldr	r3, [r7, #12]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3718      	adds	r7, #24
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20002800 	.word	0x20002800
 8001150:	00000400 	.word	0x00000400
 8001154:	200001f0 	.word	0x200001f0
 8001158:	20000348 	.word	0x20000348

0800115c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr

08001168 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001168:	f7ff fff8 	bl	800115c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800116c:	480b      	ldr	r0, [pc, #44]	@ (800119c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800116e:	490c      	ldr	r1, [pc, #48]	@ (80011a0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001170:	4a0c      	ldr	r2, [pc, #48]	@ (80011a4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001172:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001174:	e002      	b.n	800117c <LoopCopyDataInit>

08001176 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001176:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001178:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800117a:	3304      	adds	r3, #4

0800117c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800117c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800117e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001180:	d3f9      	bcc.n	8001176 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001182:	4a09      	ldr	r2, [pc, #36]	@ (80011a8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001184:	4c09      	ldr	r4, [pc, #36]	@ (80011ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001186:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001188:	e001      	b.n	800118e <LoopFillZerobss>

0800118a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800118a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800118c:	3204      	adds	r2, #4

0800118e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800118e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001190:	d3fb      	bcc.n	800118a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001192:	f001 fec9 	bl	8002f28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001196:	f7ff fdcf 	bl	8000d38 <main>
  bx lr
 800119a:	4770      	bx	lr
  ldr r0, =_sdata
 800119c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011a0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80011a4:	08006a88 	.word	0x08006a88
  ldr r2, =_sbss
 80011a8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80011ac:	20000344 	.word	0x20000344

080011b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011b0:	e7fe      	b.n	80011b0 <ADC1_2_IRQHandler>
	...

080011b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011b8:	4b08      	ldr	r3, [pc, #32]	@ (80011dc <HAL_Init+0x28>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a07      	ldr	r2, [pc, #28]	@ (80011dc <HAL_Init+0x28>)
 80011be:	f043 0310 	orr.w	r3, r3, #16
 80011c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011c4:	2003      	movs	r0, #3
 80011c6:	f000 f907 	bl	80013d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ca:	200f      	movs	r0, #15
 80011cc:	f000 f808 	bl	80011e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011d0:	f7ff fea4 	bl	8000f1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40022000 	.word	0x40022000

080011e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011e8:	4b12      	ldr	r3, [pc, #72]	@ (8001234 <HAL_InitTick+0x54>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	4b12      	ldr	r3, [pc, #72]	@ (8001238 <HAL_InitTick+0x58>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	4619      	mov	r1, r3
 80011f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80011fe:	4618      	mov	r0, r3
 8001200:	f000 f911 	bl	8001426 <HAL_SYSTICK_Config>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e00e      	b.n	800122c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2b0f      	cmp	r3, #15
 8001212:	d80a      	bhi.n	800122a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001214:	2200      	movs	r2, #0
 8001216:	6879      	ldr	r1, [r7, #4]
 8001218:	f04f 30ff 	mov.w	r0, #4294967295
 800121c:	f000 f8e7 	bl	80013ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001220:	4a06      	ldr	r2, [pc, #24]	@ (800123c <HAL_InitTick+0x5c>)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001226:	2300      	movs	r3, #0
 8001228:	e000      	b.n	800122c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
}
 800122c:	4618      	mov	r0, r3
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20000000 	.word	0x20000000
 8001238:	20000008 	.word	0x20000008
 800123c:	20000004 	.word	0x20000004

08001240 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001244:	4b05      	ldr	r3, [pc, #20]	@ (800125c <HAL_IncTick+0x1c>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	461a      	mov	r2, r3
 800124a:	4b05      	ldr	r3, [pc, #20]	@ (8001260 <HAL_IncTick+0x20>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4413      	add	r3, r2
 8001250:	4a03      	ldr	r2, [pc, #12]	@ (8001260 <HAL_IncTick+0x20>)
 8001252:	6013      	str	r3, [r2, #0]
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr
 800125c:	20000008 	.word	0x20000008
 8001260:	200001f4 	.word	0x200001f4

08001264 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  return uwTick;
 8001268:	4b02      	ldr	r3, [pc, #8]	@ (8001274 <HAL_GetTick+0x10>)
 800126a:	681b      	ldr	r3, [r3, #0]
}
 800126c:	4618      	mov	r0, r3
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr
 8001274:	200001f4 	.word	0x200001f4

08001278 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001288:	4b0c      	ldr	r3, [pc, #48]	@ (80012bc <__NVIC_SetPriorityGrouping+0x44>)
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800128e:	68ba      	ldr	r2, [r7, #8]
 8001290:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001294:	4013      	ands	r3, r2
 8001296:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012aa:	4a04      	ldr	r2, [pc, #16]	@ (80012bc <__NVIC_SetPriorityGrouping+0x44>)
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	60d3      	str	r3, [r2, #12]
}
 80012b0:	bf00      	nop
 80012b2:	3714      	adds	r7, #20
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bc80      	pop	{r7}
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012c4:	4b04      	ldr	r3, [pc, #16]	@ (80012d8 <__NVIC_GetPriorityGrouping+0x18>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	0a1b      	lsrs	r3, r3, #8
 80012ca:	f003 0307 	and.w	r3, r3, #7
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bc80      	pop	{r7}
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	6039      	str	r1, [r7, #0]
 80012e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	db0a      	blt.n	8001306 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	490c      	ldr	r1, [pc, #48]	@ (8001328 <__NVIC_SetPriority+0x4c>)
 80012f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fa:	0112      	lsls	r2, r2, #4
 80012fc:	b2d2      	uxtb	r2, r2
 80012fe:	440b      	add	r3, r1
 8001300:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001304:	e00a      	b.n	800131c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	b2da      	uxtb	r2, r3
 800130a:	4908      	ldr	r1, [pc, #32]	@ (800132c <__NVIC_SetPriority+0x50>)
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	f003 030f 	and.w	r3, r3, #15
 8001312:	3b04      	subs	r3, #4
 8001314:	0112      	lsls	r2, r2, #4
 8001316:	b2d2      	uxtb	r2, r2
 8001318:	440b      	add	r3, r1
 800131a:	761a      	strb	r2, [r3, #24]
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	bc80      	pop	{r7}
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	e000e100 	.word	0xe000e100
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001330:	b480      	push	{r7}
 8001332:	b089      	sub	sp, #36	@ 0x24
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	f1c3 0307 	rsb	r3, r3, #7
 800134a:	2b04      	cmp	r3, #4
 800134c:	bf28      	it	cs
 800134e:	2304      	movcs	r3, #4
 8001350:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	3304      	adds	r3, #4
 8001356:	2b06      	cmp	r3, #6
 8001358:	d902      	bls.n	8001360 <NVIC_EncodePriority+0x30>
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	3b03      	subs	r3, #3
 800135e:	e000      	b.n	8001362 <NVIC_EncodePriority+0x32>
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001364:	f04f 32ff 	mov.w	r2, #4294967295
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	43da      	mvns	r2, r3
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	401a      	ands	r2, r3
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001378:	f04f 31ff 	mov.w	r1, #4294967295
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	fa01 f303 	lsl.w	r3, r1, r3
 8001382:	43d9      	mvns	r1, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001388:	4313      	orrs	r3, r2
         );
}
 800138a:	4618      	mov	r0, r3
 800138c:	3724      	adds	r7, #36	@ 0x24
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr

08001394 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3b01      	subs	r3, #1
 80013a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013a4:	d301      	bcc.n	80013aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013a6:	2301      	movs	r3, #1
 80013a8:	e00f      	b.n	80013ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013aa:	4a0a      	ldr	r2, [pc, #40]	@ (80013d4 <SysTick_Config+0x40>)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3b01      	subs	r3, #1
 80013b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013b2:	210f      	movs	r1, #15
 80013b4:	f04f 30ff 	mov.w	r0, #4294967295
 80013b8:	f7ff ff90 	bl	80012dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013bc:	4b05      	ldr	r3, [pc, #20]	@ (80013d4 <SysTick_Config+0x40>)
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013c2:	4b04      	ldr	r3, [pc, #16]	@ (80013d4 <SysTick_Config+0x40>)
 80013c4:	2207      	movs	r2, #7
 80013c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	e000e010 	.word	0xe000e010

080013d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f7ff ff49 	bl	8001278 <__NVIC_SetPriorityGrouping>
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b086      	sub	sp, #24
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	4603      	mov	r3, r0
 80013f6:	60b9      	str	r1, [r7, #8]
 80013f8:	607a      	str	r2, [r7, #4]
 80013fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001400:	f7ff ff5e 	bl	80012c0 <__NVIC_GetPriorityGrouping>
 8001404:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	68b9      	ldr	r1, [r7, #8]
 800140a:	6978      	ldr	r0, [r7, #20]
 800140c:	f7ff ff90 	bl	8001330 <NVIC_EncodePriority>
 8001410:	4602      	mov	r2, r0
 8001412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001416:	4611      	mov	r1, r2
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff ff5f 	bl	80012dc <__NVIC_SetPriority>
}
 800141e:	bf00      	nop
 8001420:	3718      	adds	r7, #24
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b082      	sub	sp, #8
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f7ff ffb0 	bl	8001394 <SysTick_Config>
 8001434:	4603      	mov	r3, r0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001440:	b480      	push	{r7}
 8001442:	b08b      	sub	sp, #44	@ 0x2c
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800144a:	2300      	movs	r3, #0
 800144c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800144e:	2300      	movs	r3, #0
 8001450:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001452:	e161      	b.n	8001718 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001454:	2201      	movs	r2, #1
 8001456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	69fa      	ldr	r2, [r7, #28]
 8001464:	4013      	ands	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	429a      	cmp	r2, r3
 800146e:	f040 8150 	bne.w	8001712 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	4a97      	ldr	r2, [pc, #604]	@ (80016d4 <HAL_GPIO_Init+0x294>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d05e      	beq.n	800153a <HAL_GPIO_Init+0xfa>
 800147c:	4a95      	ldr	r2, [pc, #596]	@ (80016d4 <HAL_GPIO_Init+0x294>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d875      	bhi.n	800156e <HAL_GPIO_Init+0x12e>
 8001482:	4a95      	ldr	r2, [pc, #596]	@ (80016d8 <HAL_GPIO_Init+0x298>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d058      	beq.n	800153a <HAL_GPIO_Init+0xfa>
 8001488:	4a93      	ldr	r2, [pc, #588]	@ (80016d8 <HAL_GPIO_Init+0x298>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d86f      	bhi.n	800156e <HAL_GPIO_Init+0x12e>
 800148e:	4a93      	ldr	r2, [pc, #588]	@ (80016dc <HAL_GPIO_Init+0x29c>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d052      	beq.n	800153a <HAL_GPIO_Init+0xfa>
 8001494:	4a91      	ldr	r2, [pc, #580]	@ (80016dc <HAL_GPIO_Init+0x29c>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d869      	bhi.n	800156e <HAL_GPIO_Init+0x12e>
 800149a:	4a91      	ldr	r2, [pc, #580]	@ (80016e0 <HAL_GPIO_Init+0x2a0>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d04c      	beq.n	800153a <HAL_GPIO_Init+0xfa>
 80014a0:	4a8f      	ldr	r2, [pc, #572]	@ (80016e0 <HAL_GPIO_Init+0x2a0>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d863      	bhi.n	800156e <HAL_GPIO_Init+0x12e>
 80014a6:	4a8f      	ldr	r2, [pc, #572]	@ (80016e4 <HAL_GPIO_Init+0x2a4>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d046      	beq.n	800153a <HAL_GPIO_Init+0xfa>
 80014ac:	4a8d      	ldr	r2, [pc, #564]	@ (80016e4 <HAL_GPIO_Init+0x2a4>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d85d      	bhi.n	800156e <HAL_GPIO_Init+0x12e>
 80014b2:	2b12      	cmp	r3, #18
 80014b4:	d82a      	bhi.n	800150c <HAL_GPIO_Init+0xcc>
 80014b6:	2b12      	cmp	r3, #18
 80014b8:	d859      	bhi.n	800156e <HAL_GPIO_Init+0x12e>
 80014ba:	a201      	add	r2, pc, #4	@ (adr r2, 80014c0 <HAL_GPIO_Init+0x80>)
 80014bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c0:	0800153b 	.word	0x0800153b
 80014c4:	08001515 	.word	0x08001515
 80014c8:	08001527 	.word	0x08001527
 80014cc:	08001569 	.word	0x08001569
 80014d0:	0800156f 	.word	0x0800156f
 80014d4:	0800156f 	.word	0x0800156f
 80014d8:	0800156f 	.word	0x0800156f
 80014dc:	0800156f 	.word	0x0800156f
 80014e0:	0800156f 	.word	0x0800156f
 80014e4:	0800156f 	.word	0x0800156f
 80014e8:	0800156f 	.word	0x0800156f
 80014ec:	0800156f 	.word	0x0800156f
 80014f0:	0800156f 	.word	0x0800156f
 80014f4:	0800156f 	.word	0x0800156f
 80014f8:	0800156f 	.word	0x0800156f
 80014fc:	0800156f 	.word	0x0800156f
 8001500:	0800156f 	.word	0x0800156f
 8001504:	0800151d 	.word	0x0800151d
 8001508:	08001531 	.word	0x08001531
 800150c:	4a76      	ldr	r2, [pc, #472]	@ (80016e8 <HAL_GPIO_Init+0x2a8>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d013      	beq.n	800153a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001512:	e02c      	b.n	800156e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	623b      	str	r3, [r7, #32]
          break;
 800151a:	e029      	b.n	8001570 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	3304      	adds	r3, #4
 8001522:	623b      	str	r3, [r7, #32]
          break;
 8001524:	e024      	b.n	8001570 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	3308      	adds	r3, #8
 800152c:	623b      	str	r3, [r7, #32]
          break;
 800152e:	e01f      	b.n	8001570 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	330c      	adds	r3, #12
 8001536:	623b      	str	r3, [r7, #32]
          break;
 8001538:	e01a      	b.n	8001570 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d102      	bne.n	8001548 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001542:	2304      	movs	r3, #4
 8001544:	623b      	str	r3, [r7, #32]
          break;
 8001546:	e013      	b.n	8001570 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d105      	bne.n	800155c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001550:	2308      	movs	r3, #8
 8001552:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	69fa      	ldr	r2, [r7, #28]
 8001558:	611a      	str	r2, [r3, #16]
          break;
 800155a:	e009      	b.n	8001570 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800155c:	2308      	movs	r3, #8
 800155e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	69fa      	ldr	r2, [r7, #28]
 8001564:	615a      	str	r2, [r3, #20]
          break;
 8001566:	e003      	b.n	8001570 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001568:	2300      	movs	r3, #0
 800156a:	623b      	str	r3, [r7, #32]
          break;
 800156c:	e000      	b.n	8001570 <HAL_GPIO_Init+0x130>
          break;
 800156e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	2bff      	cmp	r3, #255	@ 0xff
 8001574:	d801      	bhi.n	800157a <HAL_GPIO_Init+0x13a>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	e001      	b.n	800157e <HAL_GPIO_Init+0x13e>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	3304      	adds	r3, #4
 800157e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	2bff      	cmp	r3, #255	@ 0xff
 8001584:	d802      	bhi.n	800158c <HAL_GPIO_Init+0x14c>
 8001586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	e002      	b.n	8001592 <HAL_GPIO_Init+0x152>
 800158c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800158e:	3b08      	subs	r3, #8
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	210f      	movs	r1, #15
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	fa01 f303 	lsl.w	r3, r1, r3
 80015a0:	43db      	mvns	r3, r3
 80015a2:	401a      	ands	r2, r3
 80015a4:	6a39      	ldr	r1, [r7, #32]
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	fa01 f303 	lsl.w	r3, r1, r3
 80015ac:	431a      	orrs	r2, r3
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f000 80a9 	beq.w	8001712 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015c0:	4b4a      	ldr	r3, [pc, #296]	@ (80016ec <HAL_GPIO_Init+0x2ac>)
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	4a49      	ldr	r2, [pc, #292]	@ (80016ec <HAL_GPIO_Init+0x2ac>)
 80015c6:	f043 0301 	orr.w	r3, r3, #1
 80015ca:	6193      	str	r3, [r2, #24]
 80015cc:	4b47      	ldr	r3, [pc, #284]	@ (80016ec <HAL_GPIO_Init+0x2ac>)
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	f003 0301 	and.w	r3, r3, #1
 80015d4:	60bb      	str	r3, [r7, #8]
 80015d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015d8:	4a45      	ldr	r2, [pc, #276]	@ (80016f0 <HAL_GPIO_Init+0x2b0>)
 80015da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015dc:	089b      	lsrs	r3, r3, #2
 80015de:	3302      	adds	r3, #2
 80015e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e8:	f003 0303 	and.w	r3, r3, #3
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	220f      	movs	r2, #15
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	43db      	mvns	r3, r3
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	4013      	ands	r3, r2
 80015fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a3d      	ldr	r2, [pc, #244]	@ (80016f4 <HAL_GPIO_Init+0x2b4>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d00d      	beq.n	8001620 <HAL_GPIO_Init+0x1e0>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a3c      	ldr	r2, [pc, #240]	@ (80016f8 <HAL_GPIO_Init+0x2b8>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d007      	beq.n	800161c <HAL_GPIO_Init+0x1dc>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a3b      	ldr	r2, [pc, #236]	@ (80016fc <HAL_GPIO_Init+0x2bc>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d101      	bne.n	8001618 <HAL_GPIO_Init+0x1d8>
 8001614:	2302      	movs	r3, #2
 8001616:	e004      	b.n	8001622 <HAL_GPIO_Init+0x1e2>
 8001618:	2303      	movs	r3, #3
 800161a:	e002      	b.n	8001622 <HAL_GPIO_Init+0x1e2>
 800161c:	2301      	movs	r3, #1
 800161e:	e000      	b.n	8001622 <HAL_GPIO_Init+0x1e2>
 8001620:	2300      	movs	r3, #0
 8001622:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001624:	f002 0203 	and.w	r2, r2, #3
 8001628:	0092      	lsls	r2, r2, #2
 800162a:	4093      	lsls	r3, r2
 800162c:	68fa      	ldr	r2, [r7, #12]
 800162e:	4313      	orrs	r3, r2
 8001630:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001632:	492f      	ldr	r1, [pc, #188]	@ (80016f0 <HAL_GPIO_Init+0x2b0>)
 8001634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001636:	089b      	lsrs	r3, r3, #2
 8001638:	3302      	adds	r3, #2
 800163a:	68fa      	ldr	r2, [r7, #12]
 800163c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d006      	beq.n	800165a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800164c:	4b2c      	ldr	r3, [pc, #176]	@ (8001700 <HAL_GPIO_Init+0x2c0>)
 800164e:	689a      	ldr	r2, [r3, #8]
 8001650:	492b      	ldr	r1, [pc, #172]	@ (8001700 <HAL_GPIO_Init+0x2c0>)
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	4313      	orrs	r3, r2
 8001656:	608b      	str	r3, [r1, #8]
 8001658:	e006      	b.n	8001668 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800165a:	4b29      	ldr	r3, [pc, #164]	@ (8001700 <HAL_GPIO_Init+0x2c0>)
 800165c:	689a      	ldr	r2, [r3, #8]
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	43db      	mvns	r3, r3
 8001662:	4927      	ldr	r1, [pc, #156]	@ (8001700 <HAL_GPIO_Init+0x2c0>)
 8001664:	4013      	ands	r3, r2
 8001666:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d006      	beq.n	8001682 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001674:	4b22      	ldr	r3, [pc, #136]	@ (8001700 <HAL_GPIO_Init+0x2c0>)
 8001676:	68da      	ldr	r2, [r3, #12]
 8001678:	4921      	ldr	r1, [pc, #132]	@ (8001700 <HAL_GPIO_Init+0x2c0>)
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	4313      	orrs	r3, r2
 800167e:	60cb      	str	r3, [r1, #12]
 8001680:	e006      	b.n	8001690 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001682:	4b1f      	ldr	r3, [pc, #124]	@ (8001700 <HAL_GPIO_Init+0x2c0>)
 8001684:	68da      	ldr	r2, [r3, #12]
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	43db      	mvns	r3, r3
 800168a:	491d      	ldr	r1, [pc, #116]	@ (8001700 <HAL_GPIO_Init+0x2c0>)
 800168c:	4013      	ands	r3, r2
 800168e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d006      	beq.n	80016aa <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800169c:	4b18      	ldr	r3, [pc, #96]	@ (8001700 <HAL_GPIO_Init+0x2c0>)
 800169e:	685a      	ldr	r2, [r3, #4]
 80016a0:	4917      	ldr	r1, [pc, #92]	@ (8001700 <HAL_GPIO_Init+0x2c0>)
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	604b      	str	r3, [r1, #4]
 80016a8:	e006      	b.n	80016b8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016aa:	4b15      	ldr	r3, [pc, #84]	@ (8001700 <HAL_GPIO_Init+0x2c0>)
 80016ac:	685a      	ldr	r2, [r3, #4]
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	43db      	mvns	r3, r3
 80016b2:	4913      	ldr	r1, [pc, #76]	@ (8001700 <HAL_GPIO_Init+0x2c0>)
 80016b4:	4013      	ands	r3, r2
 80016b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d01f      	beq.n	8001704 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001700 <HAL_GPIO_Init+0x2c0>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	490d      	ldr	r1, [pc, #52]	@ (8001700 <HAL_GPIO_Init+0x2c0>)
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	600b      	str	r3, [r1, #0]
 80016d0:	e01f      	b.n	8001712 <HAL_GPIO_Init+0x2d2>
 80016d2:	bf00      	nop
 80016d4:	10320000 	.word	0x10320000
 80016d8:	10310000 	.word	0x10310000
 80016dc:	10220000 	.word	0x10220000
 80016e0:	10210000 	.word	0x10210000
 80016e4:	10120000 	.word	0x10120000
 80016e8:	10110000 	.word	0x10110000
 80016ec:	40021000 	.word	0x40021000
 80016f0:	40010000 	.word	0x40010000
 80016f4:	40010800 	.word	0x40010800
 80016f8:	40010c00 	.word	0x40010c00
 80016fc:	40011000 	.word	0x40011000
 8001700:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001704:	4b0b      	ldr	r3, [pc, #44]	@ (8001734 <HAL_GPIO_Init+0x2f4>)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	43db      	mvns	r3, r3
 800170c:	4909      	ldr	r1, [pc, #36]	@ (8001734 <HAL_GPIO_Init+0x2f4>)
 800170e:	4013      	ands	r3, r2
 8001710:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001714:	3301      	adds	r3, #1
 8001716:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800171e:	fa22 f303 	lsr.w	r3, r2, r3
 8001722:	2b00      	cmp	r3, #0
 8001724:	f47f ae96 	bne.w	8001454 <HAL_GPIO_Init+0x14>
  }
}
 8001728:	bf00      	nop
 800172a:	bf00      	nop
 800172c:	372c      	adds	r7, #44	@ 0x2c
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr
 8001734:	40010400 	.word	0x40010400

08001738 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	460b      	mov	r3, r1
 8001742:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689a      	ldr	r2, [r3, #8]
 8001748:	887b      	ldrh	r3, [r7, #2]
 800174a:	4013      	ands	r3, r2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d002      	beq.n	8001756 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001750:	2301      	movs	r3, #1
 8001752:	73fb      	strb	r3, [r7, #15]
 8001754:	e001      	b.n	800175a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001756:	2300      	movs	r3, #0
 8001758:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800175a:	7bfb      	ldrb	r3, [r7, #15]
}
 800175c:	4618      	mov	r0, r3
 800175e:	3714      	adds	r7, #20
 8001760:	46bd      	mov	sp, r7
 8001762:	bc80      	pop	{r7}
 8001764:	4770      	bx	lr

08001766 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001766:	b480      	push	{r7}
 8001768:	b083      	sub	sp, #12
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
 800176e:	460b      	mov	r3, r1
 8001770:	807b      	strh	r3, [r7, #2]
 8001772:	4613      	mov	r3, r2
 8001774:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001776:	787b      	ldrb	r3, [r7, #1]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d003      	beq.n	8001784 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800177c:	887a      	ldrh	r2, [r7, #2]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001782:	e003      	b.n	800178c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001784:	887b      	ldrh	r3, [r7, #2]
 8001786:	041a      	lsls	r2, r3, #16
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	611a      	str	r2, [r3, #16]
}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	bc80      	pop	{r7}
 8001794:	4770      	bx	lr
	...

08001798 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d101      	bne.n	80017aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e272      	b.n	8001c90 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	f000 8087 	beq.w	80018c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017b8:	4b92      	ldr	r3, [pc, #584]	@ (8001a04 <HAL_RCC_OscConfig+0x26c>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f003 030c 	and.w	r3, r3, #12
 80017c0:	2b04      	cmp	r3, #4
 80017c2:	d00c      	beq.n	80017de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017c4:	4b8f      	ldr	r3, [pc, #572]	@ (8001a04 <HAL_RCC_OscConfig+0x26c>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f003 030c 	and.w	r3, r3, #12
 80017cc:	2b08      	cmp	r3, #8
 80017ce:	d112      	bne.n	80017f6 <HAL_RCC_OscConfig+0x5e>
 80017d0:	4b8c      	ldr	r3, [pc, #560]	@ (8001a04 <HAL_RCC_OscConfig+0x26c>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017dc:	d10b      	bne.n	80017f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017de:	4b89      	ldr	r3, [pc, #548]	@ (8001a04 <HAL_RCC_OscConfig+0x26c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d06c      	beq.n	80018c4 <HAL_RCC_OscConfig+0x12c>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d168      	bne.n	80018c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e24c      	b.n	8001c90 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017fe:	d106      	bne.n	800180e <HAL_RCC_OscConfig+0x76>
 8001800:	4b80      	ldr	r3, [pc, #512]	@ (8001a04 <HAL_RCC_OscConfig+0x26c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a7f      	ldr	r2, [pc, #508]	@ (8001a04 <HAL_RCC_OscConfig+0x26c>)
 8001806:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800180a:	6013      	str	r3, [r2, #0]
 800180c:	e02e      	b.n	800186c <HAL_RCC_OscConfig+0xd4>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d10c      	bne.n	8001830 <HAL_RCC_OscConfig+0x98>
 8001816:	4b7b      	ldr	r3, [pc, #492]	@ (8001a04 <HAL_RCC_OscConfig+0x26c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a7a      	ldr	r2, [pc, #488]	@ (8001a04 <HAL_RCC_OscConfig+0x26c>)
 800181c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001820:	6013      	str	r3, [r2, #0]
 8001822:	4b78      	ldr	r3, [pc, #480]	@ (8001a04 <HAL_RCC_OscConfig+0x26c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a77      	ldr	r2, [pc, #476]	@ (8001a04 <HAL_RCC_OscConfig+0x26c>)
 8001828:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800182c:	6013      	str	r3, [r2, #0]
 800182e:	e01d      	b.n	800186c <HAL_RCC_OscConfig+0xd4>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001838:	d10c      	bne.n	8001854 <HAL_RCC_OscConfig+0xbc>
 800183a:	4b72      	ldr	r3, [pc, #456]	@ (8001a04 <HAL_RCC_OscConfig+0x26c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a71      	ldr	r2, [pc, #452]	@ (8001a04 <HAL_RCC_OscConfig+0x26c>)
 8001840:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001844:	6013      	str	r3, [r2, #0]
 8001846:	4b6f      	ldr	r3, [pc, #444]	@ (8001a04 <HAL_RCC_OscConfig+0x26c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a6e      	ldr	r2, [pc, #440]	@ (8001a04 <HAL_RCC_OscConfig+0x26c>)
 800184c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001850:	6013      	str	r3, [r2, #0]
 8001852:	e00b      	b.n	800186c <HAL_RCC_OscConfig+0xd4>
 8001854:	4b6b      	ldr	r3, [pc, #428]	@ (8001a04 <HAL_RCC_OscConfig+0x26c>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a6a      	ldr	r2, [pc, #424]	@ (8001a04 <HAL_RCC_OscConfig+0x26c>)
 800185a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800185e:	6013      	str	r3, [r2, #0]
 8001860:	4b68      	ldr	r3, [pc, #416]	@ (8001a04 <HAL_RCC_OscConfig+0x26c>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a67      	ldr	r2, [pc, #412]	@ (8001a04 <HAL_RCC_OscConfig+0x26c>)
 8001866:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800186a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d013      	beq.n	800189c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001874:	f7ff fcf6 	bl	8001264 <HAL_GetTick>
 8001878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800187c:	f7ff fcf2 	bl	8001264 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b64      	cmp	r3, #100	@ 0x64
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e200      	b.n	8001c90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800188e:	4b5d      	ldr	r3, [pc, #372]	@ (8001a04 <HAL_RCC_OscConfig+0x26c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d0f0      	beq.n	800187c <HAL_RCC_OscConfig+0xe4>
 800189a:	e014      	b.n	80018c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800189c:	f7ff fce2 	bl	8001264 <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018a2:	e008      	b.n	80018b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018a4:	f7ff fcde 	bl	8001264 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b64      	cmp	r3, #100	@ 0x64
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e1ec      	b.n	8001c90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018b6:	4b53      	ldr	r3, [pc, #332]	@ (8001a04 <HAL_RCC_OscConfig+0x26c>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d1f0      	bne.n	80018a4 <HAL_RCC_OscConfig+0x10c>
 80018c2:	e000      	b.n	80018c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d063      	beq.n	800199a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018d2:	4b4c      	ldr	r3, [pc, #304]	@ (8001a04 <HAL_RCC_OscConfig+0x26c>)
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f003 030c 	and.w	r3, r3, #12
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d00b      	beq.n	80018f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018de:	4b49      	ldr	r3, [pc, #292]	@ (8001a04 <HAL_RCC_OscConfig+0x26c>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f003 030c 	and.w	r3, r3, #12
 80018e6:	2b08      	cmp	r3, #8
 80018e8:	d11c      	bne.n	8001924 <HAL_RCC_OscConfig+0x18c>
 80018ea:	4b46      	ldr	r3, [pc, #280]	@ (8001a04 <HAL_RCC_OscConfig+0x26c>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d116      	bne.n	8001924 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018f6:	4b43      	ldr	r3, [pc, #268]	@ (8001a04 <HAL_RCC_OscConfig+0x26c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d005      	beq.n	800190e <HAL_RCC_OscConfig+0x176>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	691b      	ldr	r3, [r3, #16]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d001      	beq.n	800190e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e1c0      	b.n	8001c90 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800190e:	4b3d      	ldr	r3, [pc, #244]	@ (8001a04 <HAL_RCC_OscConfig+0x26c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	695b      	ldr	r3, [r3, #20]
 800191a:	00db      	lsls	r3, r3, #3
 800191c:	4939      	ldr	r1, [pc, #228]	@ (8001a04 <HAL_RCC_OscConfig+0x26c>)
 800191e:	4313      	orrs	r3, r2
 8001920:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001922:	e03a      	b.n	800199a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	691b      	ldr	r3, [r3, #16]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d020      	beq.n	800196e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800192c:	4b36      	ldr	r3, [pc, #216]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 800192e:	2201      	movs	r2, #1
 8001930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001932:	f7ff fc97 	bl	8001264 <HAL_GetTick>
 8001936:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001938:	e008      	b.n	800194c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800193a:	f7ff fc93 	bl	8001264 <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d901      	bls.n	800194c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e1a1      	b.n	8001c90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800194c:	4b2d      	ldr	r3, [pc, #180]	@ (8001a04 <HAL_RCC_OscConfig+0x26c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0302 	and.w	r3, r3, #2
 8001954:	2b00      	cmp	r3, #0
 8001956:	d0f0      	beq.n	800193a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001958:	4b2a      	ldr	r3, [pc, #168]	@ (8001a04 <HAL_RCC_OscConfig+0x26c>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	695b      	ldr	r3, [r3, #20]
 8001964:	00db      	lsls	r3, r3, #3
 8001966:	4927      	ldr	r1, [pc, #156]	@ (8001a04 <HAL_RCC_OscConfig+0x26c>)
 8001968:	4313      	orrs	r3, r2
 800196a:	600b      	str	r3, [r1, #0]
 800196c:	e015      	b.n	800199a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800196e:	4b26      	ldr	r3, [pc, #152]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001974:	f7ff fc76 	bl	8001264 <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800197a:	e008      	b.n	800198e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800197c:	f7ff fc72 	bl	8001264 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e180      	b.n	8001c90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800198e:	4b1d      	ldr	r3, [pc, #116]	@ (8001a04 <HAL_RCC_OscConfig+0x26c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d1f0      	bne.n	800197c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0308 	and.w	r3, r3, #8
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d03a      	beq.n	8001a1c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d019      	beq.n	80019e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019ae:	4b17      	ldr	r3, [pc, #92]	@ (8001a0c <HAL_RCC_OscConfig+0x274>)
 80019b0:	2201      	movs	r2, #1
 80019b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019b4:	f7ff fc56 	bl	8001264 <HAL_GetTick>
 80019b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ba:	e008      	b.n	80019ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019bc:	f7ff fc52 	bl	8001264 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e160      	b.n	8001c90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001a04 <HAL_RCC_OscConfig+0x26c>)
 80019d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d0f0      	beq.n	80019bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019da:	2001      	movs	r0, #1
 80019dc:	f000 fa9c 	bl	8001f18 <RCC_Delay>
 80019e0:	e01c      	b.n	8001a1c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019e2:	4b0a      	ldr	r3, [pc, #40]	@ (8001a0c <HAL_RCC_OscConfig+0x274>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019e8:	f7ff fc3c 	bl	8001264 <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019ee:	e00f      	b.n	8001a10 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019f0:	f7ff fc38 	bl	8001264 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d908      	bls.n	8001a10 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e146      	b.n	8001c90 <HAL_RCC_OscConfig+0x4f8>
 8001a02:	bf00      	nop
 8001a04:	40021000 	.word	0x40021000
 8001a08:	42420000 	.word	0x42420000
 8001a0c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a10:	4b92      	ldr	r3, [pc, #584]	@ (8001c5c <HAL_RCC_OscConfig+0x4c4>)
 8001a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a14:	f003 0302 	and.w	r3, r3, #2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d1e9      	bne.n	80019f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0304 	and.w	r3, r3, #4
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f000 80a6 	beq.w	8001b76 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a2e:	4b8b      	ldr	r3, [pc, #556]	@ (8001c5c <HAL_RCC_OscConfig+0x4c4>)
 8001a30:	69db      	ldr	r3, [r3, #28]
 8001a32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d10d      	bne.n	8001a56 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a3a:	4b88      	ldr	r3, [pc, #544]	@ (8001c5c <HAL_RCC_OscConfig+0x4c4>)
 8001a3c:	69db      	ldr	r3, [r3, #28]
 8001a3e:	4a87      	ldr	r2, [pc, #540]	@ (8001c5c <HAL_RCC_OscConfig+0x4c4>)
 8001a40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a44:	61d3      	str	r3, [r2, #28]
 8001a46:	4b85      	ldr	r3, [pc, #532]	@ (8001c5c <HAL_RCC_OscConfig+0x4c4>)
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a4e:	60bb      	str	r3, [r7, #8]
 8001a50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a52:	2301      	movs	r3, #1
 8001a54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a56:	4b82      	ldr	r3, [pc, #520]	@ (8001c60 <HAL_RCC_OscConfig+0x4c8>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d118      	bne.n	8001a94 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a62:	4b7f      	ldr	r3, [pc, #508]	@ (8001c60 <HAL_RCC_OscConfig+0x4c8>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a7e      	ldr	r2, [pc, #504]	@ (8001c60 <HAL_RCC_OscConfig+0x4c8>)
 8001a68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a6e:	f7ff fbf9 	bl	8001264 <HAL_GetTick>
 8001a72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a74:	e008      	b.n	8001a88 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a76:	f7ff fbf5 	bl	8001264 <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	2b64      	cmp	r3, #100	@ 0x64
 8001a82:	d901      	bls.n	8001a88 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e103      	b.n	8001c90 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a88:	4b75      	ldr	r3, [pc, #468]	@ (8001c60 <HAL_RCC_OscConfig+0x4c8>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d0f0      	beq.n	8001a76 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d106      	bne.n	8001aaa <HAL_RCC_OscConfig+0x312>
 8001a9c:	4b6f      	ldr	r3, [pc, #444]	@ (8001c5c <HAL_RCC_OscConfig+0x4c4>)
 8001a9e:	6a1b      	ldr	r3, [r3, #32]
 8001aa0:	4a6e      	ldr	r2, [pc, #440]	@ (8001c5c <HAL_RCC_OscConfig+0x4c4>)
 8001aa2:	f043 0301 	orr.w	r3, r3, #1
 8001aa6:	6213      	str	r3, [r2, #32]
 8001aa8:	e02d      	b.n	8001b06 <HAL_RCC_OscConfig+0x36e>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d10c      	bne.n	8001acc <HAL_RCC_OscConfig+0x334>
 8001ab2:	4b6a      	ldr	r3, [pc, #424]	@ (8001c5c <HAL_RCC_OscConfig+0x4c4>)
 8001ab4:	6a1b      	ldr	r3, [r3, #32]
 8001ab6:	4a69      	ldr	r2, [pc, #420]	@ (8001c5c <HAL_RCC_OscConfig+0x4c4>)
 8001ab8:	f023 0301 	bic.w	r3, r3, #1
 8001abc:	6213      	str	r3, [r2, #32]
 8001abe:	4b67      	ldr	r3, [pc, #412]	@ (8001c5c <HAL_RCC_OscConfig+0x4c4>)
 8001ac0:	6a1b      	ldr	r3, [r3, #32]
 8001ac2:	4a66      	ldr	r2, [pc, #408]	@ (8001c5c <HAL_RCC_OscConfig+0x4c4>)
 8001ac4:	f023 0304 	bic.w	r3, r3, #4
 8001ac8:	6213      	str	r3, [r2, #32]
 8001aca:	e01c      	b.n	8001b06 <HAL_RCC_OscConfig+0x36e>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	2b05      	cmp	r3, #5
 8001ad2:	d10c      	bne.n	8001aee <HAL_RCC_OscConfig+0x356>
 8001ad4:	4b61      	ldr	r3, [pc, #388]	@ (8001c5c <HAL_RCC_OscConfig+0x4c4>)
 8001ad6:	6a1b      	ldr	r3, [r3, #32]
 8001ad8:	4a60      	ldr	r2, [pc, #384]	@ (8001c5c <HAL_RCC_OscConfig+0x4c4>)
 8001ada:	f043 0304 	orr.w	r3, r3, #4
 8001ade:	6213      	str	r3, [r2, #32]
 8001ae0:	4b5e      	ldr	r3, [pc, #376]	@ (8001c5c <HAL_RCC_OscConfig+0x4c4>)
 8001ae2:	6a1b      	ldr	r3, [r3, #32]
 8001ae4:	4a5d      	ldr	r2, [pc, #372]	@ (8001c5c <HAL_RCC_OscConfig+0x4c4>)
 8001ae6:	f043 0301 	orr.w	r3, r3, #1
 8001aea:	6213      	str	r3, [r2, #32]
 8001aec:	e00b      	b.n	8001b06 <HAL_RCC_OscConfig+0x36e>
 8001aee:	4b5b      	ldr	r3, [pc, #364]	@ (8001c5c <HAL_RCC_OscConfig+0x4c4>)
 8001af0:	6a1b      	ldr	r3, [r3, #32]
 8001af2:	4a5a      	ldr	r2, [pc, #360]	@ (8001c5c <HAL_RCC_OscConfig+0x4c4>)
 8001af4:	f023 0301 	bic.w	r3, r3, #1
 8001af8:	6213      	str	r3, [r2, #32]
 8001afa:	4b58      	ldr	r3, [pc, #352]	@ (8001c5c <HAL_RCC_OscConfig+0x4c4>)
 8001afc:	6a1b      	ldr	r3, [r3, #32]
 8001afe:	4a57      	ldr	r2, [pc, #348]	@ (8001c5c <HAL_RCC_OscConfig+0x4c4>)
 8001b00:	f023 0304 	bic.w	r3, r3, #4
 8001b04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d015      	beq.n	8001b3a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b0e:	f7ff fba9 	bl	8001264 <HAL_GetTick>
 8001b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b14:	e00a      	b.n	8001b2c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b16:	f7ff fba5 	bl	8001264 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e0b1      	b.n	8001c90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b2c:	4b4b      	ldr	r3, [pc, #300]	@ (8001c5c <HAL_RCC_OscConfig+0x4c4>)
 8001b2e:	6a1b      	ldr	r3, [r3, #32]
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d0ee      	beq.n	8001b16 <HAL_RCC_OscConfig+0x37e>
 8001b38:	e014      	b.n	8001b64 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b3a:	f7ff fb93 	bl	8001264 <HAL_GetTick>
 8001b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b40:	e00a      	b.n	8001b58 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b42:	f7ff fb8f 	bl	8001264 <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d901      	bls.n	8001b58 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e09b      	b.n	8001c90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b58:	4b40      	ldr	r3, [pc, #256]	@ (8001c5c <HAL_RCC_OscConfig+0x4c4>)
 8001b5a:	6a1b      	ldr	r3, [r3, #32]
 8001b5c:	f003 0302 	and.w	r3, r3, #2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d1ee      	bne.n	8001b42 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b64:	7dfb      	ldrb	r3, [r7, #23]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d105      	bne.n	8001b76 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b6a:	4b3c      	ldr	r3, [pc, #240]	@ (8001c5c <HAL_RCC_OscConfig+0x4c4>)
 8001b6c:	69db      	ldr	r3, [r3, #28]
 8001b6e:	4a3b      	ldr	r2, [pc, #236]	@ (8001c5c <HAL_RCC_OscConfig+0x4c4>)
 8001b70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b74:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f000 8087 	beq.w	8001c8e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b80:	4b36      	ldr	r3, [pc, #216]	@ (8001c5c <HAL_RCC_OscConfig+0x4c4>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f003 030c 	and.w	r3, r3, #12
 8001b88:	2b08      	cmp	r3, #8
 8001b8a:	d061      	beq.n	8001c50 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	69db      	ldr	r3, [r3, #28]
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d146      	bne.n	8001c22 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b94:	4b33      	ldr	r3, [pc, #204]	@ (8001c64 <HAL_RCC_OscConfig+0x4cc>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9a:	f7ff fb63 	bl	8001264 <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ba0:	e008      	b.n	8001bb4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba2:	f7ff fb5f 	bl	8001264 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e06d      	b.n	8001c90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bb4:	4b29      	ldr	r3, [pc, #164]	@ (8001c5c <HAL_RCC_OscConfig+0x4c4>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d1f0      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
 8001bc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bc8:	d108      	bne.n	8001bdc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bca:	4b24      	ldr	r3, [pc, #144]	@ (8001c5c <HAL_RCC_OscConfig+0x4c4>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	4921      	ldr	r1, [pc, #132]	@ (8001c5c <HAL_RCC_OscConfig+0x4c4>)
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bdc:	4b1f      	ldr	r3, [pc, #124]	@ (8001c5c <HAL_RCC_OscConfig+0x4c4>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a19      	ldr	r1, [r3, #32]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bec:	430b      	orrs	r3, r1
 8001bee:	491b      	ldr	r1, [pc, #108]	@ (8001c5c <HAL_RCC_OscConfig+0x4c4>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bf4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c64 <HAL_RCC_OscConfig+0x4cc>)
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfa:	f7ff fb33 	bl	8001264 <HAL_GetTick>
 8001bfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c00:	e008      	b.n	8001c14 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c02:	f7ff fb2f 	bl	8001264 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d901      	bls.n	8001c14 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e03d      	b.n	8001c90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c14:	4b11      	ldr	r3, [pc, #68]	@ (8001c5c <HAL_RCC_OscConfig+0x4c4>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d0f0      	beq.n	8001c02 <HAL_RCC_OscConfig+0x46a>
 8001c20:	e035      	b.n	8001c8e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c22:	4b10      	ldr	r3, [pc, #64]	@ (8001c64 <HAL_RCC_OscConfig+0x4cc>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c28:	f7ff fb1c 	bl	8001264 <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c30:	f7ff fb18 	bl	8001264 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e026      	b.n	8001c90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c42:	4b06      	ldr	r3, [pc, #24]	@ (8001c5c <HAL_RCC_OscConfig+0x4c4>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1f0      	bne.n	8001c30 <HAL_RCC_OscConfig+0x498>
 8001c4e:	e01e      	b.n	8001c8e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	69db      	ldr	r3, [r3, #28]
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d107      	bne.n	8001c68 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e019      	b.n	8001c90 <HAL_RCC_OscConfig+0x4f8>
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	40007000 	.word	0x40007000
 8001c64:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c68:	4b0b      	ldr	r3, [pc, #44]	@ (8001c98 <HAL_RCC_OscConfig+0x500>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a1b      	ldr	r3, [r3, #32]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d106      	bne.n	8001c8a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d001      	beq.n	8001c8e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e000      	b.n	8001c90 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3718      	adds	r7, #24
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40021000 	.word	0x40021000

08001c9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d101      	bne.n	8001cb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e0d0      	b.n	8001e52 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cb0:	4b6a      	ldr	r3, [pc, #424]	@ (8001e5c <HAL_RCC_ClockConfig+0x1c0>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d910      	bls.n	8001ce0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cbe:	4b67      	ldr	r3, [pc, #412]	@ (8001e5c <HAL_RCC_ClockConfig+0x1c0>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f023 0207 	bic.w	r2, r3, #7
 8001cc6:	4965      	ldr	r1, [pc, #404]	@ (8001e5c <HAL_RCC_ClockConfig+0x1c0>)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cce:	4b63      	ldr	r3, [pc, #396]	@ (8001e5c <HAL_RCC_ClockConfig+0x1c0>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	683a      	ldr	r2, [r7, #0]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d001      	beq.n	8001ce0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e0b8      	b.n	8001e52 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d020      	beq.n	8001d2e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0304 	and.w	r3, r3, #4
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d005      	beq.n	8001d04 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cf8:	4b59      	ldr	r3, [pc, #356]	@ (8001e60 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	4a58      	ldr	r2, [pc, #352]	@ (8001e60 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001d02:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0308 	and.w	r3, r3, #8
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d005      	beq.n	8001d1c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d10:	4b53      	ldr	r3, [pc, #332]	@ (8001e60 <HAL_RCC_ClockConfig+0x1c4>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	4a52      	ldr	r2, [pc, #328]	@ (8001e60 <HAL_RCC_ClockConfig+0x1c4>)
 8001d16:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001d1a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d1c:	4b50      	ldr	r3, [pc, #320]	@ (8001e60 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	494d      	ldr	r1, [pc, #308]	@ (8001e60 <HAL_RCC_ClockConfig+0x1c4>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d040      	beq.n	8001dbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d107      	bne.n	8001d52 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d42:	4b47      	ldr	r3, [pc, #284]	@ (8001e60 <HAL_RCC_ClockConfig+0x1c4>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d115      	bne.n	8001d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e07f      	b.n	8001e52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d107      	bne.n	8001d6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d5a:	4b41      	ldr	r3, [pc, #260]	@ (8001e60 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d109      	bne.n	8001d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e073      	b.n	8001e52 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d6a:	4b3d      	ldr	r3, [pc, #244]	@ (8001e60 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d101      	bne.n	8001d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e06b      	b.n	8001e52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d7a:	4b39      	ldr	r3, [pc, #228]	@ (8001e60 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f023 0203 	bic.w	r2, r3, #3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	4936      	ldr	r1, [pc, #216]	@ (8001e60 <HAL_RCC_ClockConfig+0x1c4>)
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d8c:	f7ff fa6a 	bl	8001264 <HAL_GetTick>
 8001d90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d92:	e00a      	b.n	8001daa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d94:	f7ff fa66 	bl	8001264 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e053      	b.n	8001e52 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001daa:	4b2d      	ldr	r3, [pc, #180]	@ (8001e60 <HAL_RCC_ClockConfig+0x1c4>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f003 020c 	and.w	r2, r3, #12
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d1eb      	bne.n	8001d94 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dbc:	4b27      	ldr	r3, [pc, #156]	@ (8001e5c <HAL_RCC_ClockConfig+0x1c0>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0307 	and.w	r3, r3, #7
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d210      	bcs.n	8001dec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dca:	4b24      	ldr	r3, [pc, #144]	@ (8001e5c <HAL_RCC_ClockConfig+0x1c0>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f023 0207 	bic.w	r2, r3, #7
 8001dd2:	4922      	ldr	r1, [pc, #136]	@ (8001e5c <HAL_RCC_ClockConfig+0x1c0>)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dda:	4b20      	ldr	r3, [pc, #128]	@ (8001e5c <HAL_RCC_ClockConfig+0x1c0>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	683a      	ldr	r2, [r7, #0]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d001      	beq.n	8001dec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e032      	b.n	8001e52 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0304 	and.w	r3, r3, #4
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d008      	beq.n	8001e0a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001df8:	4b19      	ldr	r3, [pc, #100]	@ (8001e60 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	4916      	ldr	r1, [pc, #88]	@ (8001e60 <HAL_RCC_ClockConfig+0x1c4>)
 8001e06:	4313      	orrs	r3, r2
 8001e08:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0308 	and.w	r3, r3, #8
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d009      	beq.n	8001e2a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e16:	4b12      	ldr	r3, [pc, #72]	@ (8001e60 <HAL_RCC_ClockConfig+0x1c4>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	490e      	ldr	r1, [pc, #56]	@ (8001e60 <HAL_RCC_ClockConfig+0x1c4>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e2a:	f000 f821 	bl	8001e70 <HAL_RCC_GetSysClockFreq>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	4b0b      	ldr	r3, [pc, #44]	@ (8001e60 <HAL_RCC_ClockConfig+0x1c4>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	091b      	lsrs	r3, r3, #4
 8001e36:	f003 030f 	and.w	r3, r3, #15
 8001e3a:	490a      	ldr	r1, [pc, #40]	@ (8001e64 <HAL_RCC_ClockConfig+0x1c8>)
 8001e3c:	5ccb      	ldrb	r3, [r1, r3]
 8001e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e42:	4a09      	ldr	r2, [pc, #36]	@ (8001e68 <HAL_RCC_ClockConfig+0x1cc>)
 8001e44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e46:	4b09      	ldr	r3, [pc, #36]	@ (8001e6c <HAL_RCC_ClockConfig+0x1d0>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff f9c8 	bl	80011e0 <HAL_InitTick>

  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40022000 	.word	0x40022000
 8001e60:	40021000 	.word	0x40021000
 8001e64:	08006628 	.word	0x08006628
 8001e68:	20000000 	.word	0x20000000
 8001e6c:	20000004 	.word	0x20000004

08001e70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b087      	sub	sp, #28
 8001e74:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e76:	2300      	movs	r3, #0
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60bb      	str	r3, [r7, #8]
 8001e7e:	2300      	movs	r3, #0
 8001e80:	617b      	str	r3, [r7, #20]
 8001e82:	2300      	movs	r3, #0
 8001e84:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e86:	2300      	movs	r3, #0
 8001e88:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e8a:	4b1e      	ldr	r3, [pc, #120]	@ (8001f04 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f003 030c 	and.w	r3, r3, #12
 8001e96:	2b04      	cmp	r3, #4
 8001e98:	d002      	beq.n	8001ea0 <HAL_RCC_GetSysClockFreq+0x30>
 8001e9a:	2b08      	cmp	r3, #8
 8001e9c:	d003      	beq.n	8001ea6 <HAL_RCC_GetSysClockFreq+0x36>
 8001e9e:	e027      	b.n	8001ef0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ea0:	4b19      	ldr	r3, [pc, #100]	@ (8001f08 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ea2:	613b      	str	r3, [r7, #16]
      break;
 8001ea4:	e027      	b.n	8001ef6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	0c9b      	lsrs	r3, r3, #18
 8001eaa:	f003 030f 	and.w	r3, r3, #15
 8001eae:	4a17      	ldr	r2, [pc, #92]	@ (8001f0c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001eb0:	5cd3      	ldrb	r3, [r2, r3]
 8001eb2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d010      	beq.n	8001ee0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ebe:	4b11      	ldr	r3, [pc, #68]	@ (8001f04 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	0c5b      	lsrs	r3, r3, #17
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	4a11      	ldr	r2, [pc, #68]	@ (8001f10 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001eca:	5cd3      	ldrb	r3, [r2, r3]
 8001ecc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a0d      	ldr	r2, [pc, #52]	@ (8001f08 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ed2:	fb03 f202 	mul.w	r2, r3, r2
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001edc:	617b      	str	r3, [r7, #20]
 8001ede:	e004      	b.n	8001eea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a0c      	ldr	r2, [pc, #48]	@ (8001f14 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ee4:	fb02 f303 	mul.w	r3, r2, r3
 8001ee8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	613b      	str	r3, [r7, #16]
      break;
 8001eee:	e002      	b.n	8001ef6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ef0:	4b05      	ldr	r3, [pc, #20]	@ (8001f08 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ef2:	613b      	str	r3, [r7, #16]
      break;
 8001ef4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ef6:	693b      	ldr	r3, [r7, #16]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	371c      	adds	r7, #28
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bc80      	pop	{r7}
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	40021000 	.word	0x40021000
 8001f08:	007a1200 	.word	0x007a1200
 8001f0c:	08006638 	.word	0x08006638
 8001f10:	08006648 	.word	0x08006648
 8001f14:	003d0900 	.word	0x003d0900

08001f18 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f20:	4b0a      	ldr	r3, [pc, #40]	@ (8001f4c <RCC_Delay+0x34>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a0a      	ldr	r2, [pc, #40]	@ (8001f50 <RCC_Delay+0x38>)
 8001f26:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2a:	0a5b      	lsrs	r3, r3, #9
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	fb02 f303 	mul.w	r3, r2, r3
 8001f32:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f34:	bf00      	nop
  }
  while (Delay --);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	1e5a      	subs	r2, r3, #1
 8001f3a:	60fa      	str	r2, [r7, #12]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1f9      	bne.n	8001f34 <RCC_Delay+0x1c>
}
 8001f40:	bf00      	nop
 8001f42:	bf00      	nop
 8001f44:	3714      	adds	r7, #20
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bc80      	pop	{r7}
 8001f4a:	4770      	bx	lr
 8001f4c:	20000000 	.word	0x20000000
 8001f50:	10624dd3 	.word	0x10624dd3

08001f54 <__cvt>:
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f5a:	461d      	mov	r5, r3
 8001f5c:	bfbb      	ittet	lt
 8001f5e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8001f62:	461d      	movlt	r5, r3
 8001f64:	2300      	movge	r3, #0
 8001f66:	232d      	movlt	r3, #45	@ 0x2d
 8001f68:	b088      	sub	sp, #32
 8001f6a:	4614      	mov	r4, r2
 8001f6c:	bfb8      	it	lt
 8001f6e:	4614      	movlt	r4, r2
 8001f70:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8001f72:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8001f74:	7013      	strb	r3, [r2, #0]
 8001f76:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8001f78:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8001f7c:	f023 0820 	bic.w	r8, r3, #32
 8001f80:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8001f84:	d005      	beq.n	8001f92 <__cvt+0x3e>
 8001f86:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8001f8a:	d100      	bne.n	8001f8e <__cvt+0x3a>
 8001f8c:	3601      	adds	r6, #1
 8001f8e:	2302      	movs	r3, #2
 8001f90:	e000      	b.n	8001f94 <__cvt+0x40>
 8001f92:	2303      	movs	r3, #3
 8001f94:	aa07      	add	r2, sp, #28
 8001f96:	9204      	str	r2, [sp, #16]
 8001f98:	aa06      	add	r2, sp, #24
 8001f9a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8001f9e:	e9cd 3600 	strd	r3, r6, [sp]
 8001fa2:	4622      	mov	r2, r4
 8001fa4:	462b      	mov	r3, r5
 8001fa6:	f001 f883 	bl	80030b0 <_dtoa_r>
 8001faa:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8001fae:	4607      	mov	r7, r0
 8001fb0:	d119      	bne.n	8001fe6 <__cvt+0x92>
 8001fb2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8001fb4:	07db      	lsls	r3, r3, #31
 8001fb6:	d50e      	bpl.n	8001fd6 <__cvt+0x82>
 8001fb8:	eb00 0906 	add.w	r9, r0, r6
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	4620      	mov	r0, r4
 8001fc2:	4629      	mov	r1, r5
 8001fc4:	f7fe fcf0 	bl	80009a8 <__aeabi_dcmpeq>
 8001fc8:	b108      	cbz	r0, 8001fce <__cvt+0x7a>
 8001fca:	f8cd 901c 	str.w	r9, [sp, #28]
 8001fce:	2230      	movs	r2, #48	@ 0x30
 8001fd0:	9b07      	ldr	r3, [sp, #28]
 8001fd2:	454b      	cmp	r3, r9
 8001fd4:	d31e      	bcc.n	8002014 <__cvt+0xc0>
 8001fd6:	4638      	mov	r0, r7
 8001fd8:	9b07      	ldr	r3, [sp, #28]
 8001fda:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8001fdc:	1bdb      	subs	r3, r3, r7
 8001fde:	6013      	str	r3, [r2, #0]
 8001fe0:	b008      	add	sp, #32
 8001fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001fe6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8001fea:	eb00 0906 	add.w	r9, r0, r6
 8001fee:	d1e5      	bne.n	8001fbc <__cvt+0x68>
 8001ff0:	7803      	ldrb	r3, [r0, #0]
 8001ff2:	2b30      	cmp	r3, #48	@ 0x30
 8001ff4:	d10a      	bne.n	800200c <__cvt+0xb8>
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	4620      	mov	r0, r4
 8001ffc:	4629      	mov	r1, r5
 8001ffe:	f7fe fcd3 	bl	80009a8 <__aeabi_dcmpeq>
 8002002:	b918      	cbnz	r0, 800200c <__cvt+0xb8>
 8002004:	f1c6 0601 	rsb	r6, r6, #1
 8002008:	f8ca 6000 	str.w	r6, [sl]
 800200c:	f8da 3000 	ldr.w	r3, [sl]
 8002010:	4499      	add	r9, r3
 8002012:	e7d3      	b.n	8001fbc <__cvt+0x68>
 8002014:	1c59      	adds	r1, r3, #1
 8002016:	9107      	str	r1, [sp, #28]
 8002018:	701a      	strb	r2, [r3, #0]
 800201a:	e7d9      	b.n	8001fd0 <__cvt+0x7c>

0800201c <__exponent>:
 800201c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800201e:	2900      	cmp	r1, #0
 8002020:	bfb6      	itet	lt
 8002022:	232d      	movlt	r3, #45	@ 0x2d
 8002024:	232b      	movge	r3, #43	@ 0x2b
 8002026:	4249      	neglt	r1, r1
 8002028:	2909      	cmp	r1, #9
 800202a:	7002      	strb	r2, [r0, #0]
 800202c:	7043      	strb	r3, [r0, #1]
 800202e:	dd29      	ble.n	8002084 <__exponent+0x68>
 8002030:	f10d 0307 	add.w	r3, sp, #7
 8002034:	461d      	mov	r5, r3
 8002036:	270a      	movs	r7, #10
 8002038:	fbb1 f6f7 	udiv	r6, r1, r7
 800203c:	461a      	mov	r2, r3
 800203e:	fb07 1416 	mls	r4, r7, r6, r1
 8002042:	3430      	adds	r4, #48	@ 0x30
 8002044:	f802 4c01 	strb.w	r4, [r2, #-1]
 8002048:	460c      	mov	r4, r1
 800204a:	2c63      	cmp	r4, #99	@ 0x63
 800204c:	4631      	mov	r1, r6
 800204e:	f103 33ff 	add.w	r3, r3, #4294967295
 8002052:	dcf1      	bgt.n	8002038 <__exponent+0x1c>
 8002054:	3130      	adds	r1, #48	@ 0x30
 8002056:	1e94      	subs	r4, r2, #2
 8002058:	f803 1c01 	strb.w	r1, [r3, #-1]
 800205c:	4623      	mov	r3, r4
 800205e:	1c41      	adds	r1, r0, #1
 8002060:	42ab      	cmp	r3, r5
 8002062:	d30a      	bcc.n	800207a <__exponent+0x5e>
 8002064:	f10d 0309 	add.w	r3, sp, #9
 8002068:	1a9b      	subs	r3, r3, r2
 800206a:	42ac      	cmp	r4, r5
 800206c:	bf88      	it	hi
 800206e:	2300      	movhi	r3, #0
 8002070:	3302      	adds	r3, #2
 8002072:	4403      	add	r3, r0
 8002074:	1a18      	subs	r0, r3, r0
 8002076:	b003      	add	sp, #12
 8002078:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800207a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800207e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8002082:	e7ed      	b.n	8002060 <__exponent+0x44>
 8002084:	2330      	movs	r3, #48	@ 0x30
 8002086:	3130      	adds	r1, #48	@ 0x30
 8002088:	7083      	strb	r3, [r0, #2]
 800208a:	70c1      	strb	r1, [r0, #3]
 800208c:	1d03      	adds	r3, r0, #4
 800208e:	e7f1      	b.n	8002074 <__exponent+0x58>

08002090 <_printf_float>:
 8002090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002094:	b091      	sub	sp, #68	@ 0x44
 8002096:	460c      	mov	r4, r1
 8002098:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800209c:	4616      	mov	r6, r2
 800209e:	461f      	mov	r7, r3
 80020a0:	4605      	mov	r5, r0
 80020a2:	f000 fef1 	bl	8002e88 <_localeconv_r>
 80020a6:	6803      	ldr	r3, [r0, #0]
 80020a8:	4618      	mov	r0, r3
 80020aa:	9308      	str	r3, [sp, #32]
 80020ac:	f7fe f850 	bl	8000150 <strlen>
 80020b0:	2300      	movs	r3, #0
 80020b2:	930e      	str	r3, [sp, #56]	@ 0x38
 80020b4:	f8d8 3000 	ldr.w	r3, [r8]
 80020b8:	9009      	str	r0, [sp, #36]	@ 0x24
 80020ba:	3307      	adds	r3, #7
 80020bc:	f023 0307 	bic.w	r3, r3, #7
 80020c0:	f103 0208 	add.w	r2, r3, #8
 80020c4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80020c8:	f8d4 b000 	ldr.w	fp, [r4]
 80020cc:	f8c8 2000 	str.w	r2, [r8]
 80020d0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80020d4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80020d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80020da:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80020de:	f04f 32ff 	mov.w	r2, #4294967295
 80020e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80020e6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80020ea:	4b9c      	ldr	r3, [pc, #624]	@ (800235c <_printf_float+0x2cc>)
 80020ec:	f7fe fc8e 	bl	8000a0c <__aeabi_dcmpun>
 80020f0:	bb70      	cbnz	r0, 8002150 <_printf_float+0xc0>
 80020f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80020f6:	f04f 32ff 	mov.w	r2, #4294967295
 80020fa:	4b98      	ldr	r3, [pc, #608]	@ (800235c <_printf_float+0x2cc>)
 80020fc:	f7fe fc68 	bl	80009d0 <__aeabi_dcmple>
 8002100:	bb30      	cbnz	r0, 8002150 <_printf_float+0xc0>
 8002102:	2200      	movs	r2, #0
 8002104:	2300      	movs	r3, #0
 8002106:	4640      	mov	r0, r8
 8002108:	4649      	mov	r1, r9
 800210a:	f7fe fc57 	bl	80009bc <__aeabi_dcmplt>
 800210e:	b110      	cbz	r0, 8002116 <_printf_float+0x86>
 8002110:	232d      	movs	r3, #45	@ 0x2d
 8002112:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002116:	4a92      	ldr	r2, [pc, #584]	@ (8002360 <_printf_float+0x2d0>)
 8002118:	4b92      	ldr	r3, [pc, #584]	@ (8002364 <_printf_float+0x2d4>)
 800211a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800211e:	bf94      	ite	ls
 8002120:	4690      	movls	r8, r2
 8002122:	4698      	movhi	r8, r3
 8002124:	2303      	movs	r3, #3
 8002126:	f04f 0900 	mov.w	r9, #0
 800212a:	6123      	str	r3, [r4, #16]
 800212c:	f02b 0304 	bic.w	r3, fp, #4
 8002130:	6023      	str	r3, [r4, #0]
 8002132:	4633      	mov	r3, r6
 8002134:	4621      	mov	r1, r4
 8002136:	4628      	mov	r0, r5
 8002138:	9700      	str	r7, [sp, #0]
 800213a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800213c:	f000 f9d4 	bl	80024e8 <_printf_common>
 8002140:	3001      	adds	r0, #1
 8002142:	f040 8090 	bne.w	8002266 <_printf_float+0x1d6>
 8002146:	f04f 30ff 	mov.w	r0, #4294967295
 800214a:	b011      	add	sp, #68	@ 0x44
 800214c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002150:	4642      	mov	r2, r8
 8002152:	464b      	mov	r3, r9
 8002154:	4640      	mov	r0, r8
 8002156:	4649      	mov	r1, r9
 8002158:	f7fe fc58 	bl	8000a0c <__aeabi_dcmpun>
 800215c:	b148      	cbz	r0, 8002172 <_printf_float+0xe2>
 800215e:	464b      	mov	r3, r9
 8002160:	2b00      	cmp	r3, #0
 8002162:	bfb8      	it	lt
 8002164:	232d      	movlt	r3, #45	@ 0x2d
 8002166:	4a80      	ldr	r2, [pc, #512]	@ (8002368 <_printf_float+0x2d8>)
 8002168:	bfb8      	it	lt
 800216a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800216e:	4b7f      	ldr	r3, [pc, #508]	@ (800236c <_printf_float+0x2dc>)
 8002170:	e7d3      	b.n	800211a <_printf_float+0x8a>
 8002172:	6863      	ldr	r3, [r4, #4]
 8002174:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8002178:	1c5a      	adds	r2, r3, #1
 800217a:	d13f      	bne.n	80021fc <_printf_float+0x16c>
 800217c:	2306      	movs	r3, #6
 800217e:	6063      	str	r3, [r4, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8002186:	6023      	str	r3, [r4, #0]
 8002188:	9206      	str	r2, [sp, #24]
 800218a:	aa0e      	add	r2, sp, #56	@ 0x38
 800218c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8002190:	aa0d      	add	r2, sp, #52	@ 0x34
 8002192:	9203      	str	r2, [sp, #12]
 8002194:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8002198:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800219c:	6863      	ldr	r3, [r4, #4]
 800219e:	4642      	mov	r2, r8
 80021a0:	9300      	str	r3, [sp, #0]
 80021a2:	4628      	mov	r0, r5
 80021a4:	464b      	mov	r3, r9
 80021a6:	910a      	str	r1, [sp, #40]	@ 0x28
 80021a8:	f7ff fed4 	bl	8001f54 <__cvt>
 80021ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80021ae:	4680      	mov	r8, r0
 80021b0:	2947      	cmp	r1, #71	@ 0x47
 80021b2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80021b4:	d128      	bne.n	8002208 <_printf_float+0x178>
 80021b6:	1cc8      	adds	r0, r1, #3
 80021b8:	db02      	blt.n	80021c0 <_printf_float+0x130>
 80021ba:	6863      	ldr	r3, [r4, #4]
 80021bc:	4299      	cmp	r1, r3
 80021be:	dd40      	ble.n	8002242 <_printf_float+0x1b2>
 80021c0:	f1aa 0a02 	sub.w	sl, sl, #2
 80021c4:	fa5f fa8a 	uxtb.w	sl, sl
 80021c8:	4652      	mov	r2, sl
 80021ca:	3901      	subs	r1, #1
 80021cc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80021d0:	910d      	str	r1, [sp, #52]	@ 0x34
 80021d2:	f7ff ff23 	bl	800201c <__exponent>
 80021d6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80021d8:	4681      	mov	r9, r0
 80021da:	1813      	adds	r3, r2, r0
 80021dc:	2a01      	cmp	r2, #1
 80021de:	6123      	str	r3, [r4, #16]
 80021e0:	dc02      	bgt.n	80021e8 <_printf_float+0x158>
 80021e2:	6822      	ldr	r2, [r4, #0]
 80021e4:	07d2      	lsls	r2, r2, #31
 80021e6:	d501      	bpl.n	80021ec <_printf_float+0x15c>
 80021e8:	3301      	adds	r3, #1
 80021ea:	6123      	str	r3, [r4, #16]
 80021ec:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d09e      	beq.n	8002132 <_printf_float+0xa2>
 80021f4:	232d      	movs	r3, #45	@ 0x2d
 80021f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80021fa:	e79a      	b.n	8002132 <_printf_float+0xa2>
 80021fc:	2947      	cmp	r1, #71	@ 0x47
 80021fe:	d1bf      	bne.n	8002180 <_printf_float+0xf0>
 8002200:	2b00      	cmp	r3, #0
 8002202:	d1bd      	bne.n	8002180 <_printf_float+0xf0>
 8002204:	2301      	movs	r3, #1
 8002206:	e7ba      	b.n	800217e <_printf_float+0xee>
 8002208:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800220c:	d9dc      	bls.n	80021c8 <_printf_float+0x138>
 800220e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8002212:	d118      	bne.n	8002246 <_printf_float+0x1b6>
 8002214:	2900      	cmp	r1, #0
 8002216:	6863      	ldr	r3, [r4, #4]
 8002218:	dd0b      	ble.n	8002232 <_printf_float+0x1a2>
 800221a:	6121      	str	r1, [r4, #16]
 800221c:	b913      	cbnz	r3, 8002224 <_printf_float+0x194>
 800221e:	6822      	ldr	r2, [r4, #0]
 8002220:	07d0      	lsls	r0, r2, #31
 8002222:	d502      	bpl.n	800222a <_printf_float+0x19a>
 8002224:	3301      	adds	r3, #1
 8002226:	440b      	add	r3, r1
 8002228:	6123      	str	r3, [r4, #16]
 800222a:	f04f 0900 	mov.w	r9, #0
 800222e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8002230:	e7dc      	b.n	80021ec <_printf_float+0x15c>
 8002232:	b913      	cbnz	r3, 800223a <_printf_float+0x1aa>
 8002234:	6822      	ldr	r2, [r4, #0]
 8002236:	07d2      	lsls	r2, r2, #31
 8002238:	d501      	bpl.n	800223e <_printf_float+0x1ae>
 800223a:	3302      	adds	r3, #2
 800223c:	e7f4      	b.n	8002228 <_printf_float+0x198>
 800223e:	2301      	movs	r3, #1
 8002240:	e7f2      	b.n	8002228 <_printf_float+0x198>
 8002242:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8002246:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002248:	4299      	cmp	r1, r3
 800224a:	db05      	blt.n	8002258 <_printf_float+0x1c8>
 800224c:	6823      	ldr	r3, [r4, #0]
 800224e:	6121      	str	r1, [r4, #16]
 8002250:	07d8      	lsls	r0, r3, #31
 8002252:	d5ea      	bpl.n	800222a <_printf_float+0x19a>
 8002254:	1c4b      	adds	r3, r1, #1
 8002256:	e7e7      	b.n	8002228 <_printf_float+0x198>
 8002258:	2900      	cmp	r1, #0
 800225a:	bfcc      	ite	gt
 800225c:	2201      	movgt	r2, #1
 800225e:	f1c1 0202 	rsble	r2, r1, #2
 8002262:	4413      	add	r3, r2
 8002264:	e7e0      	b.n	8002228 <_printf_float+0x198>
 8002266:	6823      	ldr	r3, [r4, #0]
 8002268:	055a      	lsls	r2, r3, #21
 800226a:	d407      	bmi.n	800227c <_printf_float+0x1ec>
 800226c:	6923      	ldr	r3, [r4, #16]
 800226e:	4642      	mov	r2, r8
 8002270:	4631      	mov	r1, r6
 8002272:	4628      	mov	r0, r5
 8002274:	47b8      	blx	r7
 8002276:	3001      	adds	r0, #1
 8002278:	d12b      	bne.n	80022d2 <_printf_float+0x242>
 800227a:	e764      	b.n	8002146 <_printf_float+0xb6>
 800227c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002280:	f240 80dc 	bls.w	800243c <_printf_float+0x3ac>
 8002284:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8002288:	2200      	movs	r2, #0
 800228a:	2300      	movs	r3, #0
 800228c:	f7fe fb8c 	bl	80009a8 <__aeabi_dcmpeq>
 8002290:	2800      	cmp	r0, #0
 8002292:	d033      	beq.n	80022fc <_printf_float+0x26c>
 8002294:	2301      	movs	r3, #1
 8002296:	4631      	mov	r1, r6
 8002298:	4628      	mov	r0, r5
 800229a:	4a35      	ldr	r2, [pc, #212]	@ (8002370 <_printf_float+0x2e0>)
 800229c:	47b8      	blx	r7
 800229e:	3001      	adds	r0, #1
 80022a0:	f43f af51 	beq.w	8002146 <_printf_float+0xb6>
 80022a4:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80022a8:	4543      	cmp	r3, r8
 80022aa:	db02      	blt.n	80022b2 <_printf_float+0x222>
 80022ac:	6823      	ldr	r3, [r4, #0]
 80022ae:	07d8      	lsls	r0, r3, #31
 80022b0:	d50f      	bpl.n	80022d2 <_printf_float+0x242>
 80022b2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80022b6:	4631      	mov	r1, r6
 80022b8:	4628      	mov	r0, r5
 80022ba:	47b8      	blx	r7
 80022bc:	3001      	adds	r0, #1
 80022be:	f43f af42 	beq.w	8002146 <_printf_float+0xb6>
 80022c2:	f04f 0900 	mov.w	r9, #0
 80022c6:	f108 38ff 	add.w	r8, r8, #4294967295
 80022ca:	f104 0a1a 	add.w	sl, r4, #26
 80022ce:	45c8      	cmp	r8, r9
 80022d0:	dc09      	bgt.n	80022e6 <_printf_float+0x256>
 80022d2:	6823      	ldr	r3, [r4, #0]
 80022d4:	079b      	lsls	r3, r3, #30
 80022d6:	f100 8102 	bmi.w	80024de <_printf_float+0x44e>
 80022da:	68e0      	ldr	r0, [r4, #12]
 80022dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80022de:	4298      	cmp	r0, r3
 80022e0:	bfb8      	it	lt
 80022e2:	4618      	movlt	r0, r3
 80022e4:	e731      	b.n	800214a <_printf_float+0xba>
 80022e6:	2301      	movs	r3, #1
 80022e8:	4652      	mov	r2, sl
 80022ea:	4631      	mov	r1, r6
 80022ec:	4628      	mov	r0, r5
 80022ee:	47b8      	blx	r7
 80022f0:	3001      	adds	r0, #1
 80022f2:	f43f af28 	beq.w	8002146 <_printf_float+0xb6>
 80022f6:	f109 0901 	add.w	r9, r9, #1
 80022fa:	e7e8      	b.n	80022ce <_printf_float+0x23e>
 80022fc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80022fe:	2b00      	cmp	r3, #0
 8002300:	dc38      	bgt.n	8002374 <_printf_float+0x2e4>
 8002302:	2301      	movs	r3, #1
 8002304:	4631      	mov	r1, r6
 8002306:	4628      	mov	r0, r5
 8002308:	4a19      	ldr	r2, [pc, #100]	@ (8002370 <_printf_float+0x2e0>)
 800230a:	47b8      	blx	r7
 800230c:	3001      	adds	r0, #1
 800230e:	f43f af1a 	beq.w	8002146 <_printf_float+0xb6>
 8002312:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8002316:	ea59 0303 	orrs.w	r3, r9, r3
 800231a:	d102      	bne.n	8002322 <_printf_float+0x292>
 800231c:	6823      	ldr	r3, [r4, #0]
 800231e:	07d9      	lsls	r1, r3, #31
 8002320:	d5d7      	bpl.n	80022d2 <_printf_float+0x242>
 8002322:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002326:	4631      	mov	r1, r6
 8002328:	4628      	mov	r0, r5
 800232a:	47b8      	blx	r7
 800232c:	3001      	adds	r0, #1
 800232e:	f43f af0a 	beq.w	8002146 <_printf_float+0xb6>
 8002332:	f04f 0a00 	mov.w	sl, #0
 8002336:	f104 0b1a 	add.w	fp, r4, #26
 800233a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800233c:	425b      	negs	r3, r3
 800233e:	4553      	cmp	r3, sl
 8002340:	dc01      	bgt.n	8002346 <_printf_float+0x2b6>
 8002342:	464b      	mov	r3, r9
 8002344:	e793      	b.n	800226e <_printf_float+0x1de>
 8002346:	2301      	movs	r3, #1
 8002348:	465a      	mov	r2, fp
 800234a:	4631      	mov	r1, r6
 800234c:	4628      	mov	r0, r5
 800234e:	47b8      	blx	r7
 8002350:	3001      	adds	r0, #1
 8002352:	f43f aef8 	beq.w	8002146 <_printf_float+0xb6>
 8002356:	f10a 0a01 	add.w	sl, sl, #1
 800235a:	e7ee      	b.n	800233a <_printf_float+0x2aa>
 800235c:	7fefffff 	.word	0x7fefffff
 8002360:	0800664a 	.word	0x0800664a
 8002364:	0800664e 	.word	0x0800664e
 8002368:	08006652 	.word	0x08006652
 800236c:	08006656 	.word	0x08006656
 8002370:	0800665a 	.word	0x0800665a
 8002374:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002376:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800237a:	4553      	cmp	r3, sl
 800237c:	bfa8      	it	ge
 800237e:	4653      	movge	r3, sl
 8002380:	2b00      	cmp	r3, #0
 8002382:	4699      	mov	r9, r3
 8002384:	dc36      	bgt.n	80023f4 <_printf_float+0x364>
 8002386:	f04f 0b00 	mov.w	fp, #0
 800238a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800238e:	f104 021a 	add.w	r2, r4, #26
 8002392:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002394:	930a      	str	r3, [sp, #40]	@ 0x28
 8002396:	eba3 0309 	sub.w	r3, r3, r9
 800239a:	455b      	cmp	r3, fp
 800239c:	dc31      	bgt.n	8002402 <_printf_float+0x372>
 800239e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80023a0:	459a      	cmp	sl, r3
 80023a2:	dc3a      	bgt.n	800241a <_printf_float+0x38a>
 80023a4:	6823      	ldr	r3, [r4, #0]
 80023a6:	07da      	lsls	r2, r3, #31
 80023a8:	d437      	bmi.n	800241a <_printf_float+0x38a>
 80023aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80023ac:	ebaa 0903 	sub.w	r9, sl, r3
 80023b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80023b2:	ebaa 0303 	sub.w	r3, sl, r3
 80023b6:	4599      	cmp	r9, r3
 80023b8:	bfa8      	it	ge
 80023ba:	4699      	movge	r9, r3
 80023bc:	f1b9 0f00 	cmp.w	r9, #0
 80023c0:	dc33      	bgt.n	800242a <_printf_float+0x39a>
 80023c2:	f04f 0800 	mov.w	r8, #0
 80023c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80023ca:	f104 0b1a 	add.w	fp, r4, #26
 80023ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80023d0:	ebaa 0303 	sub.w	r3, sl, r3
 80023d4:	eba3 0309 	sub.w	r3, r3, r9
 80023d8:	4543      	cmp	r3, r8
 80023da:	f77f af7a 	ble.w	80022d2 <_printf_float+0x242>
 80023de:	2301      	movs	r3, #1
 80023e0:	465a      	mov	r2, fp
 80023e2:	4631      	mov	r1, r6
 80023e4:	4628      	mov	r0, r5
 80023e6:	47b8      	blx	r7
 80023e8:	3001      	adds	r0, #1
 80023ea:	f43f aeac 	beq.w	8002146 <_printf_float+0xb6>
 80023ee:	f108 0801 	add.w	r8, r8, #1
 80023f2:	e7ec      	b.n	80023ce <_printf_float+0x33e>
 80023f4:	4642      	mov	r2, r8
 80023f6:	4631      	mov	r1, r6
 80023f8:	4628      	mov	r0, r5
 80023fa:	47b8      	blx	r7
 80023fc:	3001      	adds	r0, #1
 80023fe:	d1c2      	bne.n	8002386 <_printf_float+0x2f6>
 8002400:	e6a1      	b.n	8002146 <_printf_float+0xb6>
 8002402:	2301      	movs	r3, #1
 8002404:	4631      	mov	r1, r6
 8002406:	4628      	mov	r0, r5
 8002408:	920a      	str	r2, [sp, #40]	@ 0x28
 800240a:	47b8      	blx	r7
 800240c:	3001      	adds	r0, #1
 800240e:	f43f ae9a 	beq.w	8002146 <_printf_float+0xb6>
 8002412:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8002414:	f10b 0b01 	add.w	fp, fp, #1
 8002418:	e7bb      	b.n	8002392 <_printf_float+0x302>
 800241a:	4631      	mov	r1, r6
 800241c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002420:	4628      	mov	r0, r5
 8002422:	47b8      	blx	r7
 8002424:	3001      	adds	r0, #1
 8002426:	d1c0      	bne.n	80023aa <_printf_float+0x31a>
 8002428:	e68d      	b.n	8002146 <_printf_float+0xb6>
 800242a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800242c:	464b      	mov	r3, r9
 800242e:	4631      	mov	r1, r6
 8002430:	4628      	mov	r0, r5
 8002432:	4442      	add	r2, r8
 8002434:	47b8      	blx	r7
 8002436:	3001      	adds	r0, #1
 8002438:	d1c3      	bne.n	80023c2 <_printf_float+0x332>
 800243a:	e684      	b.n	8002146 <_printf_float+0xb6>
 800243c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8002440:	f1ba 0f01 	cmp.w	sl, #1
 8002444:	dc01      	bgt.n	800244a <_printf_float+0x3ba>
 8002446:	07db      	lsls	r3, r3, #31
 8002448:	d536      	bpl.n	80024b8 <_printf_float+0x428>
 800244a:	2301      	movs	r3, #1
 800244c:	4642      	mov	r2, r8
 800244e:	4631      	mov	r1, r6
 8002450:	4628      	mov	r0, r5
 8002452:	47b8      	blx	r7
 8002454:	3001      	adds	r0, #1
 8002456:	f43f ae76 	beq.w	8002146 <_printf_float+0xb6>
 800245a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800245e:	4631      	mov	r1, r6
 8002460:	4628      	mov	r0, r5
 8002462:	47b8      	blx	r7
 8002464:	3001      	adds	r0, #1
 8002466:	f43f ae6e 	beq.w	8002146 <_printf_float+0xb6>
 800246a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800246e:	2200      	movs	r2, #0
 8002470:	2300      	movs	r3, #0
 8002472:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002476:	f7fe fa97 	bl	80009a8 <__aeabi_dcmpeq>
 800247a:	b9c0      	cbnz	r0, 80024ae <_printf_float+0x41e>
 800247c:	4653      	mov	r3, sl
 800247e:	f108 0201 	add.w	r2, r8, #1
 8002482:	4631      	mov	r1, r6
 8002484:	4628      	mov	r0, r5
 8002486:	47b8      	blx	r7
 8002488:	3001      	adds	r0, #1
 800248a:	d10c      	bne.n	80024a6 <_printf_float+0x416>
 800248c:	e65b      	b.n	8002146 <_printf_float+0xb6>
 800248e:	2301      	movs	r3, #1
 8002490:	465a      	mov	r2, fp
 8002492:	4631      	mov	r1, r6
 8002494:	4628      	mov	r0, r5
 8002496:	47b8      	blx	r7
 8002498:	3001      	adds	r0, #1
 800249a:	f43f ae54 	beq.w	8002146 <_printf_float+0xb6>
 800249e:	f108 0801 	add.w	r8, r8, #1
 80024a2:	45d0      	cmp	r8, sl
 80024a4:	dbf3      	blt.n	800248e <_printf_float+0x3fe>
 80024a6:	464b      	mov	r3, r9
 80024a8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80024ac:	e6e0      	b.n	8002270 <_printf_float+0x1e0>
 80024ae:	f04f 0800 	mov.w	r8, #0
 80024b2:	f104 0b1a 	add.w	fp, r4, #26
 80024b6:	e7f4      	b.n	80024a2 <_printf_float+0x412>
 80024b8:	2301      	movs	r3, #1
 80024ba:	4642      	mov	r2, r8
 80024bc:	e7e1      	b.n	8002482 <_printf_float+0x3f2>
 80024be:	2301      	movs	r3, #1
 80024c0:	464a      	mov	r2, r9
 80024c2:	4631      	mov	r1, r6
 80024c4:	4628      	mov	r0, r5
 80024c6:	47b8      	blx	r7
 80024c8:	3001      	adds	r0, #1
 80024ca:	f43f ae3c 	beq.w	8002146 <_printf_float+0xb6>
 80024ce:	f108 0801 	add.w	r8, r8, #1
 80024d2:	68e3      	ldr	r3, [r4, #12]
 80024d4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80024d6:	1a5b      	subs	r3, r3, r1
 80024d8:	4543      	cmp	r3, r8
 80024da:	dcf0      	bgt.n	80024be <_printf_float+0x42e>
 80024dc:	e6fd      	b.n	80022da <_printf_float+0x24a>
 80024de:	f04f 0800 	mov.w	r8, #0
 80024e2:	f104 0919 	add.w	r9, r4, #25
 80024e6:	e7f4      	b.n	80024d2 <_printf_float+0x442>

080024e8 <_printf_common>:
 80024e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80024ec:	4616      	mov	r6, r2
 80024ee:	4698      	mov	r8, r3
 80024f0:	688a      	ldr	r2, [r1, #8]
 80024f2:	690b      	ldr	r3, [r1, #16]
 80024f4:	4607      	mov	r7, r0
 80024f6:	4293      	cmp	r3, r2
 80024f8:	bfb8      	it	lt
 80024fa:	4613      	movlt	r3, r2
 80024fc:	6033      	str	r3, [r6, #0]
 80024fe:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002502:	460c      	mov	r4, r1
 8002504:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002508:	b10a      	cbz	r2, 800250e <_printf_common+0x26>
 800250a:	3301      	adds	r3, #1
 800250c:	6033      	str	r3, [r6, #0]
 800250e:	6823      	ldr	r3, [r4, #0]
 8002510:	0699      	lsls	r1, r3, #26
 8002512:	bf42      	ittt	mi
 8002514:	6833      	ldrmi	r3, [r6, #0]
 8002516:	3302      	addmi	r3, #2
 8002518:	6033      	strmi	r3, [r6, #0]
 800251a:	6825      	ldr	r5, [r4, #0]
 800251c:	f015 0506 	ands.w	r5, r5, #6
 8002520:	d106      	bne.n	8002530 <_printf_common+0x48>
 8002522:	f104 0a19 	add.w	sl, r4, #25
 8002526:	68e3      	ldr	r3, [r4, #12]
 8002528:	6832      	ldr	r2, [r6, #0]
 800252a:	1a9b      	subs	r3, r3, r2
 800252c:	42ab      	cmp	r3, r5
 800252e:	dc2b      	bgt.n	8002588 <_printf_common+0xa0>
 8002530:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002534:	6822      	ldr	r2, [r4, #0]
 8002536:	3b00      	subs	r3, #0
 8002538:	bf18      	it	ne
 800253a:	2301      	movne	r3, #1
 800253c:	0692      	lsls	r2, r2, #26
 800253e:	d430      	bmi.n	80025a2 <_printf_common+0xba>
 8002540:	4641      	mov	r1, r8
 8002542:	4638      	mov	r0, r7
 8002544:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002548:	47c8      	blx	r9
 800254a:	3001      	adds	r0, #1
 800254c:	d023      	beq.n	8002596 <_printf_common+0xae>
 800254e:	6823      	ldr	r3, [r4, #0]
 8002550:	6922      	ldr	r2, [r4, #16]
 8002552:	f003 0306 	and.w	r3, r3, #6
 8002556:	2b04      	cmp	r3, #4
 8002558:	bf14      	ite	ne
 800255a:	2500      	movne	r5, #0
 800255c:	6833      	ldreq	r3, [r6, #0]
 800255e:	f04f 0600 	mov.w	r6, #0
 8002562:	bf08      	it	eq
 8002564:	68e5      	ldreq	r5, [r4, #12]
 8002566:	f104 041a 	add.w	r4, r4, #26
 800256a:	bf08      	it	eq
 800256c:	1aed      	subeq	r5, r5, r3
 800256e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002572:	bf08      	it	eq
 8002574:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002578:	4293      	cmp	r3, r2
 800257a:	bfc4      	itt	gt
 800257c:	1a9b      	subgt	r3, r3, r2
 800257e:	18ed      	addgt	r5, r5, r3
 8002580:	42b5      	cmp	r5, r6
 8002582:	d11a      	bne.n	80025ba <_printf_common+0xd2>
 8002584:	2000      	movs	r0, #0
 8002586:	e008      	b.n	800259a <_printf_common+0xb2>
 8002588:	2301      	movs	r3, #1
 800258a:	4652      	mov	r2, sl
 800258c:	4641      	mov	r1, r8
 800258e:	4638      	mov	r0, r7
 8002590:	47c8      	blx	r9
 8002592:	3001      	adds	r0, #1
 8002594:	d103      	bne.n	800259e <_printf_common+0xb6>
 8002596:	f04f 30ff 	mov.w	r0, #4294967295
 800259a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800259e:	3501      	adds	r5, #1
 80025a0:	e7c1      	b.n	8002526 <_printf_common+0x3e>
 80025a2:	2030      	movs	r0, #48	@ 0x30
 80025a4:	18e1      	adds	r1, r4, r3
 80025a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80025aa:	1c5a      	adds	r2, r3, #1
 80025ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80025b0:	4422      	add	r2, r4
 80025b2:	3302      	adds	r3, #2
 80025b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80025b8:	e7c2      	b.n	8002540 <_printf_common+0x58>
 80025ba:	2301      	movs	r3, #1
 80025bc:	4622      	mov	r2, r4
 80025be:	4641      	mov	r1, r8
 80025c0:	4638      	mov	r0, r7
 80025c2:	47c8      	blx	r9
 80025c4:	3001      	adds	r0, #1
 80025c6:	d0e6      	beq.n	8002596 <_printf_common+0xae>
 80025c8:	3601      	adds	r6, #1
 80025ca:	e7d9      	b.n	8002580 <_printf_common+0x98>

080025cc <_printf_i>:
 80025cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80025d0:	7e0f      	ldrb	r7, [r1, #24]
 80025d2:	4691      	mov	r9, r2
 80025d4:	2f78      	cmp	r7, #120	@ 0x78
 80025d6:	4680      	mov	r8, r0
 80025d8:	460c      	mov	r4, r1
 80025da:	469a      	mov	sl, r3
 80025dc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80025de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80025e2:	d807      	bhi.n	80025f4 <_printf_i+0x28>
 80025e4:	2f62      	cmp	r7, #98	@ 0x62
 80025e6:	d80a      	bhi.n	80025fe <_printf_i+0x32>
 80025e8:	2f00      	cmp	r7, #0
 80025ea:	f000 80d3 	beq.w	8002794 <_printf_i+0x1c8>
 80025ee:	2f58      	cmp	r7, #88	@ 0x58
 80025f0:	f000 80ba 	beq.w	8002768 <_printf_i+0x19c>
 80025f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80025f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80025fc:	e03a      	b.n	8002674 <_printf_i+0xa8>
 80025fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002602:	2b15      	cmp	r3, #21
 8002604:	d8f6      	bhi.n	80025f4 <_printf_i+0x28>
 8002606:	a101      	add	r1, pc, #4	@ (adr r1, 800260c <_printf_i+0x40>)
 8002608:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800260c:	08002665 	.word	0x08002665
 8002610:	08002679 	.word	0x08002679
 8002614:	080025f5 	.word	0x080025f5
 8002618:	080025f5 	.word	0x080025f5
 800261c:	080025f5 	.word	0x080025f5
 8002620:	080025f5 	.word	0x080025f5
 8002624:	08002679 	.word	0x08002679
 8002628:	080025f5 	.word	0x080025f5
 800262c:	080025f5 	.word	0x080025f5
 8002630:	080025f5 	.word	0x080025f5
 8002634:	080025f5 	.word	0x080025f5
 8002638:	0800277b 	.word	0x0800277b
 800263c:	080026a3 	.word	0x080026a3
 8002640:	08002735 	.word	0x08002735
 8002644:	080025f5 	.word	0x080025f5
 8002648:	080025f5 	.word	0x080025f5
 800264c:	0800279d 	.word	0x0800279d
 8002650:	080025f5 	.word	0x080025f5
 8002654:	080026a3 	.word	0x080026a3
 8002658:	080025f5 	.word	0x080025f5
 800265c:	080025f5 	.word	0x080025f5
 8002660:	0800273d 	.word	0x0800273d
 8002664:	6833      	ldr	r3, [r6, #0]
 8002666:	1d1a      	adds	r2, r3, #4
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	6032      	str	r2, [r6, #0]
 800266c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002670:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002674:	2301      	movs	r3, #1
 8002676:	e09e      	b.n	80027b6 <_printf_i+0x1ea>
 8002678:	6833      	ldr	r3, [r6, #0]
 800267a:	6820      	ldr	r0, [r4, #0]
 800267c:	1d19      	adds	r1, r3, #4
 800267e:	6031      	str	r1, [r6, #0]
 8002680:	0606      	lsls	r6, r0, #24
 8002682:	d501      	bpl.n	8002688 <_printf_i+0xbc>
 8002684:	681d      	ldr	r5, [r3, #0]
 8002686:	e003      	b.n	8002690 <_printf_i+0xc4>
 8002688:	0645      	lsls	r5, r0, #25
 800268a:	d5fb      	bpl.n	8002684 <_printf_i+0xb8>
 800268c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002690:	2d00      	cmp	r5, #0
 8002692:	da03      	bge.n	800269c <_printf_i+0xd0>
 8002694:	232d      	movs	r3, #45	@ 0x2d
 8002696:	426d      	negs	r5, r5
 8002698:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800269c:	230a      	movs	r3, #10
 800269e:	4859      	ldr	r0, [pc, #356]	@ (8002804 <_printf_i+0x238>)
 80026a0:	e011      	b.n	80026c6 <_printf_i+0xfa>
 80026a2:	6821      	ldr	r1, [r4, #0]
 80026a4:	6833      	ldr	r3, [r6, #0]
 80026a6:	0608      	lsls	r0, r1, #24
 80026a8:	f853 5b04 	ldr.w	r5, [r3], #4
 80026ac:	d402      	bmi.n	80026b4 <_printf_i+0xe8>
 80026ae:	0649      	lsls	r1, r1, #25
 80026b0:	bf48      	it	mi
 80026b2:	b2ad      	uxthmi	r5, r5
 80026b4:	2f6f      	cmp	r7, #111	@ 0x6f
 80026b6:	6033      	str	r3, [r6, #0]
 80026b8:	bf14      	ite	ne
 80026ba:	230a      	movne	r3, #10
 80026bc:	2308      	moveq	r3, #8
 80026be:	4851      	ldr	r0, [pc, #324]	@ (8002804 <_printf_i+0x238>)
 80026c0:	2100      	movs	r1, #0
 80026c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80026c6:	6866      	ldr	r6, [r4, #4]
 80026c8:	2e00      	cmp	r6, #0
 80026ca:	bfa8      	it	ge
 80026cc:	6821      	ldrge	r1, [r4, #0]
 80026ce:	60a6      	str	r6, [r4, #8]
 80026d0:	bfa4      	itt	ge
 80026d2:	f021 0104 	bicge.w	r1, r1, #4
 80026d6:	6021      	strge	r1, [r4, #0]
 80026d8:	b90d      	cbnz	r5, 80026de <_printf_i+0x112>
 80026da:	2e00      	cmp	r6, #0
 80026dc:	d04b      	beq.n	8002776 <_printf_i+0x1aa>
 80026de:	4616      	mov	r6, r2
 80026e0:	fbb5 f1f3 	udiv	r1, r5, r3
 80026e4:	fb03 5711 	mls	r7, r3, r1, r5
 80026e8:	5dc7      	ldrb	r7, [r0, r7]
 80026ea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80026ee:	462f      	mov	r7, r5
 80026f0:	42bb      	cmp	r3, r7
 80026f2:	460d      	mov	r5, r1
 80026f4:	d9f4      	bls.n	80026e0 <_printf_i+0x114>
 80026f6:	2b08      	cmp	r3, #8
 80026f8:	d10b      	bne.n	8002712 <_printf_i+0x146>
 80026fa:	6823      	ldr	r3, [r4, #0]
 80026fc:	07df      	lsls	r7, r3, #31
 80026fe:	d508      	bpl.n	8002712 <_printf_i+0x146>
 8002700:	6923      	ldr	r3, [r4, #16]
 8002702:	6861      	ldr	r1, [r4, #4]
 8002704:	4299      	cmp	r1, r3
 8002706:	bfde      	ittt	le
 8002708:	2330      	movle	r3, #48	@ 0x30
 800270a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800270e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002712:	1b92      	subs	r2, r2, r6
 8002714:	6122      	str	r2, [r4, #16]
 8002716:	464b      	mov	r3, r9
 8002718:	4621      	mov	r1, r4
 800271a:	4640      	mov	r0, r8
 800271c:	f8cd a000 	str.w	sl, [sp]
 8002720:	aa03      	add	r2, sp, #12
 8002722:	f7ff fee1 	bl	80024e8 <_printf_common>
 8002726:	3001      	adds	r0, #1
 8002728:	d14a      	bne.n	80027c0 <_printf_i+0x1f4>
 800272a:	f04f 30ff 	mov.w	r0, #4294967295
 800272e:	b004      	add	sp, #16
 8002730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002734:	6823      	ldr	r3, [r4, #0]
 8002736:	f043 0320 	orr.w	r3, r3, #32
 800273a:	6023      	str	r3, [r4, #0]
 800273c:	2778      	movs	r7, #120	@ 0x78
 800273e:	4832      	ldr	r0, [pc, #200]	@ (8002808 <_printf_i+0x23c>)
 8002740:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002744:	6823      	ldr	r3, [r4, #0]
 8002746:	6831      	ldr	r1, [r6, #0]
 8002748:	061f      	lsls	r7, r3, #24
 800274a:	f851 5b04 	ldr.w	r5, [r1], #4
 800274e:	d402      	bmi.n	8002756 <_printf_i+0x18a>
 8002750:	065f      	lsls	r7, r3, #25
 8002752:	bf48      	it	mi
 8002754:	b2ad      	uxthmi	r5, r5
 8002756:	6031      	str	r1, [r6, #0]
 8002758:	07d9      	lsls	r1, r3, #31
 800275a:	bf44      	itt	mi
 800275c:	f043 0320 	orrmi.w	r3, r3, #32
 8002760:	6023      	strmi	r3, [r4, #0]
 8002762:	b11d      	cbz	r5, 800276c <_printf_i+0x1a0>
 8002764:	2310      	movs	r3, #16
 8002766:	e7ab      	b.n	80026c0 <_printf_i+0xf4>
 8002768:	4826      	ldr	r0, [pc, #152]	@ (8002804 <_printf_i+0x238>)
 800276a:	e7e9      	b.n	8002740 <_printf_i+0x174>
 800276c:	6823      	ldr	r3, [r4, #0]
 800276e:	f023 0320 	bic.w	r3, r3, #32
 8002772:	6023      	str	r3, [r4, #0]
 8002774:	e7f6      	b.n	8002764 <_printf_i+0x198>
 8002776:	4616      	mov	r6, r2
 8002778:	e7bd      	b.n	80026f6 <_printf_i+0x12a>
 800277a:	6833      	ldr	r3, [r6, #0]
 800277c:	6825      	ldr	r5, [r4, #0]
 800277e:	1d18      	adds	r0, r3, #4
 8002780:	6961      	ldr	r1, [r4, #20]
 8002782:	6030      	str	r0, [r6, #0]
 8002784:	062e      	lsls	r6, r5, #24
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	d501      	bpl.n	800278e <_printf_i+0x1c2>
 800278a:	6019      	str	r1, [r3, #0]
 800278c:	e002      	b.n	8002794 <_printf_i+0x1c8>
 800278e:	0668      	lsls	r0, r5, #25
 8002790:	d5fb      	bpl.n	800278a <_printf_i+0x1be>
 8002792:	8019      	strh	r1, [r3, #0]
 8002794:	2300      	movs	r3, #0
 8002796:	4616      	mov	r6, r2
 8002798:	6123      	str	r3, [r4, #16]
 800279a:	e7bc      	b.n	8002716 <_printf_i+0x14a>
 800279c:	6833      	ldr	r3, [r6, #0]
 800279e:	2100      	movs	r1, #0
 80027a0:	1d1a      	adds	r2, r3, #4
 80027a2:	6032      	str	r2, [r6, #0]
 80027a4:	681e      	ldr	r6, [r3, #0]
 80027a6:	6862      	ldr	r2, [r4, #4]
 80027a8:	4630      	mov	r0, r6
 80027aa:	f000 fbe4 	bl	8002f76 <memchr>
 80027ae:	b108      	cbz	r0, 80027b4 <_printf_i+0x1e8>
 80027b0:	1b80      	subs	r0, r0, r6
 80027b2:	6060      	str	r0, [r4, #4]
 80027b4:	6863      	ldr	r3, [r4, #4]
 80027b6:	6123      	str	r3, [r4, #16]
 80027b8:	2300      	movs	r3, #0
 80027ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80027be:	e7aa      	b.n	8002716 <_printf_i+0x14a>
 80027c0:	4632      	mov	r2, r6
 80027c2:	4649      	mov	r1, r9
 80027c4:	4640      	mov	r0, r8
 80027c6:	6923      	ldr	r3, [r4, #16]
 80027c8:	47d0      	blx	sl
 80027ca:	3001      	adds	r0, #1
 80027cc:	d0ad      	beq.n	800272a <_printf_i+0x15e>
 80027ce:	6823      	ldr	r3, [r4, #0]
 80027d0:	079b      	lsls	r3, r3, #30
 80027d2:	d413      	bmi.n	80027fc <_printf_i+0x230>
 80027d4:	68e0      	ldr	r0, [r4, #12]
 80027d6:	9b03      	ldr	r3, [sp, #12]
 80027d8:	4298      	cmp	r0, r3
 80027da:	bfb8      	it	lt
 80027dc:	4618      	movlt	r0, r3
 80027de:	e7a6      	b.n	800272e <_printf_i+0x162>
 80027e0:	2301      	movs	r3, #1
 80027e2:	4632      	mov	r2, r6
 80027e4:	4649      	mov	r1, r9
 80027e6:	4640      	mov	r0, r8
 80027e8:	47d0      	blx	sl
 80027ea:	3001      	adds	r0, #1
 80027ec:	d09d      	beq.n	800272a <_printf_i+0x15e>
 80027ee:	3501      	adds	r5, #1
 80027f0:	68e3      	ldr	r3, [r4, #12]
 80027f2:	9903      	ldr	r1, [sp, #12]
 80027f4:	1a5b      	subs	r3, r3, r1
 80027f6:	42ab      	cmp	r3, r5
 80027f8:	dcf2      	bgt.n	80027e0 <_printf_i+0x214>
 80027fa:	e7eb      	b.n	80027d4 <_printf_i+0x208>
 80027fc:	2500      	movs	r5, #0
 80027fe:	f104 0619 	add.w	r6, r4, #25
 8002802:	e7f5      	b.n	80027f0 <_printf_i+0x224>
 8002804:	0800665c 	.word	0x0800665c
 8002808:	0800666d 	.word	0x0800666d

0800280c <_scanf_float>:
 800280c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002810:	b087      	sub	sp, #28
 8002812:	9303      	str	r3, [sp, #12]
 8002814:	688b      	ldr	r3, [r1, #8]
 8002816:	4617      	mov	r7, r2
 8002818:	1e5a      	subs	r2, r3, #1
 800281a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800281e:	bf82      	ittt	hi
 8002820:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8002824:	eb03 0b05 	addhi.w	fp, r3, r5
 8002828:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800282c:	460a      	mov	r2, r1
 800282e:	f04f 0500 	mov.w	r5, #0
 8002832:	bf88      	it	hi
 8002834:	608b      	strhi	r3, [r1, #8]
 8002836:	680b      	ldr	r3, [r1, #0]
 8002838:	4680      	mov	r8, r0
 800283a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800283e:	f842 3b1c 	str.w	r3, [r2], #28
 8002842:	460c      	mov	r4, r1
 8002844:	bf98      	it	ls
 8002846:	f04f 0b00 	movls.w	fp, #0
 800284a:	4616      	mov	r6, r2
 800284c:	46aa      	mov	sl, r5
 800284e:	46a9      	mov	r9, r5
 8002850:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8002854:	9201      	str	r2, [sp, #4]
 8002856:	9502      	str	r5, [sp, #8]
 8002858:	68a2      	ldr	r2, [r4, #8]
 800285a:	b152      	cbz	r2, 8002872 <_scanf_float+0x66>
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2b4e      	cmp	r3, #78	@ 0x4e
 8002862:	d865      	bhi.n	8002930 <_scanf_float+0x124>
 8002864:	2b40      	cmp	r3, #64	@ 0x40
 8002866:	d83d      	bhi.n	80028e4 <_scanf_float+0xd8>
 8002868:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800286c:	b2c8      	uxtb	r0, r1
 800286e:	280e      	cmp	r0, #14
 8002870:	d93b      	bls.n	80028ea <_scanf_float+0xde>
 8002872:	f1b9 0f00 	cmp.w	r9, #0
 8002876:	d003      	beq.n	8002880 <_scanf_float+0x74>
 8002878:	6823      	ldr	r3, [r4, #0]
 800287a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800287e:	6023      	str	r3, [r4, #0]
 8002880:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002884:	f1ba 0f01 	cmp.w	sl, #1
 8002888:	f200 8118 	bhi.w	8002abc <_scanf_float+0x2b0>
 800288c:	9b01      	ldr	r3, [sp, #4]
 800288e:	429e      	cmp	r6, r3
 8002890:	f200 8109 	bhi.w	8002aa6 <_scanf_float+0x29a>
 8002894:	2001      	movs	r0, #1
 8002896:	b007      	add	sp, #28
 8002898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800289c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80028a0:	2a0d      	cmp	r2, #13
 80028a2:	d8e6      	bhi.n	8002872 <_scanf_float+0x66>
 80028a4:	a101      	add	r1, pc, #4	@ (adr r1, 80028ac <_scanf_float+0xa0>)
 80028a6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80028aa:	bf00      	nop
 80028ac:	080029f3 	.word	0x080029f3
 80028b0:	08002873 	.word	0x08002873
 80028b4:	08002873 	.word	0x08002873
 80028b8:	08002873 	.word	0x08002873
 80028bc:	08002a53 	.word	0x08002a53
 80028c0:	08002a2b 	.word	0x08002a2b
 80028c4:	08002873 	.word	0x08002873
 80028c8:	08002873 	.word	0x08002873
 80028cc:	08002a01 	.word	0x08002a01
 80028d0:	08002873 	.word	0x08002873
 80028d4:	08002873 	.word	0x08002873
 80028d8:	08002873 	.word	0x08002873
 80028dc:	08002873 	.word	0x08002873
 80028e0:	080029b9 	.word	0x080029b9
 80028e4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80028e8:	e7da      	b.n	80028a0 <_scanf_float+0x94>
 80028ea:	290e      	cmp	r1, #14
 80028ec:	d8c1      	bhi.n	8002872 <_scanf_float+0x66>
 80028ee:	a001      	add	r0, pc, #4	@ (adr r0, 80028f4 <_scanf_float+0xe8>)
 80028f0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80028f4:	080029a9 	.word	0x080029a9
 80028f8:	08002873 	.word	0x08002873
 80028fc:	080029a9 	.word	0x080029a9
 8002900:	08002a3f 	.word	0x08002a3f
 8002904:	08002873 	.word	0x08002873
 8002908:	08002951 	.word	0x08002951
 800290c:	0800298f 	.word	0x0800298f
 8002910:	0800298f 	.word	0x0800298f
 8002914:	0800298f 	.word	0x0800298f
 8002918:	0800298f 	.word	0x0800298f
 800291c:	0800298f 	.word	0x0800298f
 8002920:	0800298f 	.word	0x0800298f
 8002924:	0800298f 	.word	0x0800298f
 8002928:	0800298f 	.word	0x0800298f
 800292c:	0800298f 	.word	0x0800298f
 8002930:	2b6e      	cmp	r3, #110	@ 0x6e
 8002932:	d809      	bhi.n	8002948 <_scanf_float+0x13c>
 8002934:	2b60      	cmp	r3, #96	@ 0x60
 8002936:	d8b1      	bhi.n	800289c <_scanf_float+0x90>
 8002938:	2b54      	cmp	r3, #84	@ 0x54
 800293a:	d07b      	beq.n	8002a34 <_scanf_float+0x228>
 800293c:	2b59      	cmp	r3, #89	@ 0x59
 800293e:	d198      	bne.n	8002872 <_scanf_float+0x66>
 8002940:	2d07      	cmp	r5, #7
 8002942:	d196      	bne.n	8002872 <_scanf_float+0x66>
 8002944:	2508      	movs	r5, #8
 8002946:	e02c      	b.n	80029a2 <_scanf_float+0x196>
 8002948:	2b74      	cmp	r3, #116	@ 0x74
 800294a:	d073      	beq.n	8002a34 <_scanf_float+0x228>
 800294c:	2b79      	cmp	r3, #121	@ 0x79
 800294e:	e7f6      	b.n	800293e <_scanf_float+0x132>
 8002950:	6821      	ldr	r1, [r4, #0]
 8002952:	05c8      	lsls	r0, r1, #23
 8002954:	d51b      	bpl.n	800298e <_scanf_float+0x182>
 8002956:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800295a:	6021      	str	r1, [r4, #0]
 800295c:	f109 0901 	add.w	r9, r9, #1
 8002960:	f1bb 0f00 	cmp.w	fp, #0
 8002964:	d003      	beq.n	800296e <_scanf_float+0x162>
 8002966:	3201      	adds	r2, #1
 8002968:	f10b 3bff 	add.w	fp, fp, #4294967295
 800296c:	60a2      	str	r2, [r4, #8]
 800296e:	68a3      	ldr	r3, [r4, #8]
 8002970:	3b01      	subs	r3, #1
 8002972:	60a3      	str	r3, [r4, #8]
 8002974:	6923      	ldr	r3, [r4, #16]
 8002976:	3301      	adds	r3, #1
 8002978:	6123      	str	r3, [r4, #16]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	3b01      	subs	r3, #1
 800297e:	2b00      	cmp	r3, #0
 8002980:	607b      	str	r3, [r7, #4]
 8002982:	f340 8087 	ble.w	8002a94 <_scanf_float+0x288>
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	3301      	adds	r3, #1
 800298a:	603b      	str	r3, [r7, #0]
 800298c:	e764      	b.n	8002858 <_scanf_float+0x4c>
 800298e:	eb1a 0105 	adds.w	r1, sl, r5
 8002992:	f47f af6e 	bne.w	8002872 <_scanf_float+0x66>
 8002996:	460d      	mov	r5, r1
 8002998:	468a      	mov	sl, r1
 800299a:	6822      	ldr	r2, [r4, #0]
 800299c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80029a0:	6022      	str	r2, [r4, #0]
 80029a2:	f806 3b01 	strb.w	r3, [r6], #1
 80029a6:	e7e2      	b.n	800296e <_scanf_float+0x162>
 80029a8:	6822      	ldr	r2, [r4, #0]
 80029aa:	0610      	lsls	r0, r2, #24
 80029ac:	f57f af61 	bpl.w	8002872 <_scanf_float+0x66>
 80029b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80029b4:	6022      	str	r2, [r4, #0]
 80029b6:	e7f4      	b.n	80029a2 <_scanf_float+0x196>
 80029b8:	f1ba 0f00 	cmp.w	sl, #0
 80029bc:	d10e      	bne.n	80029dc <_scanf_float+0x1d0>
 80029be:	f1b9 0f00 	cmp.w	r9, #0
 80029c2:	d10e      	bne.n	80029e2 <_scanf_float+0x1d6>
 80029c4:	6822      	ldr	r2, [r4, #0]
 80029c6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80029ca:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80029ce:	d108      	bne.n	80029e2 <_scanf_float+0x1d6>
 80029d0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80029d4:	f04f 0a01 	mov.w	sl, #1
 80029d8:	6022      	str	r2, [r4, #0]
 80029da:	e7e2      	b.n	80029a2 <_scanf_float+0x196>
 80029dc:	f1ba 0f02 	cmp.w	sl, #2
 80029e0:	d055      	beq.n	8002a8e <_scanf_float+0x282>
 80029e2:	2d01      	cmp	r5, #1
 80029e4:	d002      	beq.n	80029ec <_scanf_float+0x1e0>
 80029e6:	2d04      	cmp	r5, #4
 80029e8:	f47f af43 	bne.w	8002872 <_scanf_float+0x66>
 80029ec:	3501      	adds	r5, #1
 80029ee:	b2ed      	uxtb	r5, r5
 80029f0:	e7d7      	b.n	80029a2 <_scanf_float+0x196>
 80029f2:	f1ba 0f01 	cmp.w	sl, #1
 80029f6:	f47f af3c 	bne.w	8002872 <_scanf_float+0x66>
 80029fa:	f04f 0a02 	mov.w	sl, #2
 80029fe:	e7d0      	b.n	80029a2 <_scanf_float+0x196>
 8002a00:	b97d      	cbnz	r5, 8002a22 <_scanf_float+0x216>
 8002a02:	f1b9 0f00 	cmp.w	r9, #0
 8002a06:	f47f af37 	bne.w	8002878 <_scanf_float+0x6c>
 8002a0a:	6822      	ldr	r2, [r4, #0]
 8002a0c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8002a10:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8002a14:	f040 8103 	bne.w	8002c1e <_scanf_float+0x412>
 8002a18:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8002a1c:	2501      	movs	r5, #1
 8002a1e:	6022      	str	r2, [r4, #0]
 8002a20:	e7bf      	b.n	80029a2 <_scanf_float+0x196>
 8002a22:	2d03      	cmp	r5, #3
 8002a24:	d0e2      	beq.n	80029ec <_scanf_float+0x1e0>
 8002a26:	2d05      	cmp	r5, #5
 8002a28:	e7de      	b.n	80029e8 <_scanf_float+0x1dc>
 8002a2a:	2d02      	cmp	r5, #2
 8002a2c:	f47f af21 	bne.w	8002872 <_scanf_float+0x66>
 8002a30:	2503      	movs	r5, #3
 8002a32:	e7b6      	b.n	80029a2 <_scanf_float+0x196>
 8002a34:	2d06      	cmp	r5, #6
 8002a36:	f47f af1c 	bne.w	8002872 <_scanf_float+0x66>
 8002a3a:	2507      	movs	r5, #7
 8002a3c:	e7b1      	b.n	80029a2 <_scanf_float+0x196>
 8002a3e:	6822      	ldr	r2, [r4, #0]
 8002a40:	0591      	lsls	r1, r2, #22
 8002a42:	f57f af16 	bpl.w	8002872 <_scanf_float+0x66>
 8002a46:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8002a4a:	6022      	str	r2, [r4, #0]
 8002a4c:	f8cd 9008 	str.w	r9, [sp, #8]
 8002a50:	e7a7      	b.n	80029a2 <_scanf_float+0x196>
 8002a52:	6822      	ldr	r2, [r4, #0]
 8002a54:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8002a58:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8002a5c:	d006      	beq.n	8002a6c <_scanf_float+0x260>
 8002a5e:	0550      	lsls	r0, r2, #21
 8002a60:	f57f af07 	bpl.w	8002872 <_scanf_float+0x66>
 8002a64:	f1b9 0f00 	cmp.w	r9, #0
 8002a68:	f000 80d9 	beq.w	8002c1e <_scanf_float+0x412>
 8002a6c:	0591      	lsls	r1, r2, #22
 8002a6e:	bf58      	it	pl
 8002a70:	9902      	ldrpl	r1, [sp, #8]
 8002a72:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8002a76:	bf58      	it	pl
 8002a78:	eba9 0101 	subpl.w	r1, r9, r1
 8002a7c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8002a80:	f04f 0900 	mov.w	r9, #0
 8002a84:	bf58      	it	pl
 8002a86:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8002a8a:	6022      	str	r2, [r4, #0]
 8002a8c:	e789      	b.n	80029a2 <_scanf_float+0x196>
 8002a8e:	f04f 0a03 	mov.w	sl, #3
 8002a92:	e786      	b.n	80029a2 <_scanf_float+0x196>
 8002a94:	4639      	mov	r1, r7
 8002a96:	4640      	mov	r0, r8
 8002a98:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8002a9c:	4798      	blx	r3
 8002a9e:	2800      	cmp	r0, #0
 8002aa0:	f43f aeda 	beq.w	8002858 <_scanf_float+0x4c>
 8002aa4:	e6e5      	b.n	8002872 <_scanf_float+0x66>
 8002aa6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8002aaa:	463a      	mov	r2, r7
 8002aac:	4640      	mov	r0, r8
 8002aae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8002ab2:	4798      	blx	r3
 8002ab4:	6923      	ldr	r3, [r4, #16]
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	6123      	str	r3, [r4, #16]
 8002aba:	e6e7      	b.n	800288c <_scanf_float+0x80>
 8002abc:	1e6b      	subs	r3, r5, #1
 8002abe:	2b06      	cmp	r3, #6
 8002ac0:	d824      	bhi.n	8002b0c <_scanf_float+0x300>
 8002ac2:	2d02      	cmp	r5, #2
 8002ac4:	d836      	bhi.n	8002b34 <_scanf_float+0x328>
 8002ac6:	9b01      	ldr	r3, [sp, #4]
 8002ac8:	429e      	cmp	r6, r3
 8002aca:	f67f aee3 	bls.w	8002894 <_scanf_float+0x88>
 8002ace:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8002ad2:	463a      	mov	r2, r7
 8002ad4:	4640      	mov	r0, r8
 8002ad6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8002ada:	4798      	blx	r3
 8002adc:	6923      	ldr	r3, [r4, #16]
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	6123      	str	r3, [r4, #16]
 8002ae2:	e7f0      	b.n	8002ac6 <_scanf_float+0x2ba>
 8002ae4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8002ae8:	463a      	mov	r2, r7
 8002aea:	4640      	mov	r0, r8
 8002aec:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8002af0:	4798      	blx	r3
 8002af2:	6923      	ldr	r3, [r4, #16]
 8002af4:	3b01      	subs	r3, #1
 8002af6:	6123      	str	r3, [r4, #16]
 8002af8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002afc:	fa5f fa8a 	uxtb.w	sl, sl
 8002b00:	f1ba 0f02 	cmp.w	sl, #2
 8002b04:	d1ee      	bne.n	8002ae4 <_scanf_float+0x2d8>
 8002b06:	3d03      	subs	r5, #3
 8002b08:	b2ed      	uxtb	r5, r5
 8002b0a:	1b76      	subs	r6, r6, r5
 8002b0c:	6823      	ldr	r3, [r4, #0]
 8002b0e:	05da      	lsls	r2, r3, #23
 8002b10:	d530      	bpl.n	8002b74 <_scanf_float+0x368>
 8002b12:	055b      	lsls	r3, r3, #21
 8002b14:	d511      	bpl.n	8002b3a <_scanf_float+0x32e>
 8002b16:	9b01      	ldr	r3, [sp, #4]
 8002b18:	429e      	cmp	r6, r3
 8002b1a:	f67f aebb 	bls.w	8002894 <_scanf_float+0x88>
 8002b1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8002b22:	463a      	mov	r2, r7
 8002b24:	4640      	mov	r0, r8
 8002b26:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8002b2a:	4798      	blx	r3
 8002b2c:	6923      	ldr	r3, [r4, #16]
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	6123      	str	r3, [r4, #16]
 8002b32:	e7f0      	b.n	8002b16 <_scanf_float+0x30a>
 8002b34:	46aa      	mov	sl, r5
 8002b36:	46b3      	mov	fp, r6
 8002b38:	e7de      	b.n	8002af8 <_scanf_float+0x2ec>
 8002b3a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8002b3e:	6923      	ldr	r3, [r4, #16]
 8002b40:	2965      	cmp	r1, #101	@ 0x65
 8002b42:	f103 33ff 	add.w	r3, r3, #4294967295
 8002b46:	f106 35ff 	add.w	r5, r6, #4294967295
 8002b4a:	6123      	str	r3, [r4, #16]
 8002b4c:	d00c      	beq.n	8002b68 <_scanf_float+0x35c>
 8002b4e:	2945      	cmp	r1, #69	@ 0x45
 8002b50:	d00a      	beq.n	8002b68 <_scanf_float+0x35c>
 8002b52:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8002b56:	463a      	mov	r2, r7
 8002b58:	4640      	mov	r0, r8
 8002b5a:	4798      	blx	r3
 8002b5c:	6923      	ldr	r3, [r4, #16]
 8002b5e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8002b62:	3b01      	subs	r3, #1
 8002b64:	1eb5      	subs	r5, r6, #2
 8002b66:	6123      	str	r3, [r4, #16]
 8002b68:	463a      	mov	r2, r7
 8002b6a:	4640      	mov	r0, r8
 8002b6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8002b70:	4798      	blx	r3
 8002b72:	462e      	mov	r6, r5
 8002b74:	6822      	ldr	r2, [r4, #0]
 8002b76:	f012 0210 	ands.w	r2, r2, #16
 8002b7a:	d001      	beq.n	8002b80 <_scanf_float+0x374>
 8002b7c:	2000      	movs	r0, #0
 8002b7e:	e68a      	b.n	8002896 <_scanf_float+0x8a>
 8002b80:	7032      	strb	r2, [r6, #0]
 8002b82:	6823      	ldr	r3, [r4, #0]
 8002b84:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002b88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b8c:	d11c      	bne.n	8002bc8 <_scanf_float+0x3bc>
 8002b8e:	9b02      	ldr	r3, [sp, #8]
 8002b90:	454b      	cmp	r3, r9
 8002b92:	eba3 0209 	sub.w	r2, r3, r9
 8002b96:	d123      	bne.n	8002be0 <_scanf_float+0x3d4>
 8002b98:	2200      	movs	r2, #0
 8002b9a:	4640      	mov	r0, r8
 8002b9c:	9901      	ldr	r1, [sp, #4]
 8002b9e:	f002 fbef 	bl	8005380 <_strtod_r>
 8002ba2:	9b03      	ldr	r3, [sp, #12]
 8002ba4:	6825      	ldr	r5, [r4, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f015 0f02 	tst.w	r5, #2
 8002bac:	4606      	mov	r6, r0
 8002bae:	460f      	mov	r7, r1
 8002bb0:	f103 0204 	add.w	r2, r3, #4
 8002bb4:	d01f      	beq.n	8002bf6 <_scanf_float+0x3ea>
 8002bb6:	9903      	ldr	r1, [sp, #12]
 8002bb8:	600a      	str	r2, [r1, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	e9c3 6700 	strd	r6, r7, [r3]
 8002bc0:	68e3      	ldr	r3, [r4, #12]
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	60e3      	str	r3, [r4, #12]
 8002bc6:	e7d9      	b.n	8002b7c <_scanf_float+0x370>
 8002bc8:	9b04      	ldr	r3, [sp, #16]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d0e4      	beq.n	8002b98 <_scanf_float+0x38c>
 8002bce:	9905      	ldr	r1, [sp, #20]
 8002bd0:	230a      	movs	r3, #10
 8002bd2:	4640      	mov	r0, r8
 8002bd4:	3101      	adds	r1, #1
 8002bd6:	f002 fc53 	bl	8005480 <_strtol_r>
 8002bda:	9b04      	ldr	r3, [sp, #16]
 8002bdc:	9e05      	ldr	r6, [sp, #20]
 8002bde:	1ac2      	subs	r2, r0, r3
 8002be0:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8002be4:	429e      	cmp	r6, r3
 8002be6:	bf28      	it	cs
 8002be8:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8002bec:	4630      	mov	r0, r6
 8002bee:	490d      	ldr	r1, [pc, #52]	@ (8002c24 <_scanf_float+0x418>)
 8002bf0:	f000 f8de 	bl	8002db0 <siprintf>
 8002bf4:	e7d0      	b.n	8002b98 <_scanf_float+0x38c>
 8002bf6:	076d      	lsls	r5, r5, #29
 8002bf8:	d4dd      	bmi.n	8002bb6 <_scanf_float+0x3aa>
 8002bfa:	9d03      	ldr	r5, [sp, #12]
 8002bfc:	602a      	str	r2, [r5, #0]
 8002bfe:	681d      	ldr	r5, [r3, #0]
 8002c00:	4602      	mov	r2, r0
 8002c02:	460b      	mov	r3, r1
 8002c04:	f7fd ff02 	bl	8000a0c <__aeabi_dcmpun>
 8002c08:	b120      	cbz	r0, 8002c14 <_scanf_float+0x408>
 8002c0a:	4807      	ldr	r0, [pc, #28]	@ (8002c28 <_scanf_float+0x41c>)
 8002c0c:	f000 f9c2 	bl	8002f94 <nanf>
 8002c10:	6028      	str	r0, [r5, #0]
 8002c12:	e7d5      	b.n	8002bc0 <_scanf_float+0x3b4>
 8002c14:	4630      	mov	r0, r6
 8002c16:	4639      	mov	r1, r7
 8002c18:	f7fd ff56 	bl	8000ac8 <__aeabi_d2f>
 8002c1c:	e7f8      	b.n	8002c10 <_scanf_float+0x404>
 8002c1e:	f04f 0900 	mov.w	r9, #0
 8002c22:	e62d      	b.n	8002880 <_scanf_float+0x74>
 8002c24:	0800667e 	.word	0x0800667e
 8002c28:	08006a15 	.word	0x08006a15

08002c2c <std>:
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	b510      	push	{r4, lr}
 8002c30:	4604      	mov	r4, r0
 8002c32:	e9c0 3300 	strd	r3, r3, [r0]
 8002c36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002c3a:	6083      	str	r3, [r0, #8]
 8002c3c:	8181      	strh	r1, [r0, #12]
 8002c3e:	6643      	str	r3, [r0, #100]	@ 0x64
 8002c40:	81c2      	strh	r2, [r0, #14]
 8002c42:	6183      	str	r3, [r0, #24]
 8002c44:	4619      	mov	r1, r3
 8002c46:	2208      	movs	r2, #8
 8002c48:	305c      	adds	r0, #92	@ 0x5c
 8002c4a:	f000 f914 	bl	8002e76 <memset>
 8002c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8002c84 <std+0x58>)
 8002c50:	6224      	str	r4, [r4, #32]
 8002c52:	6263      	str	r3, [r4, #36]	@ 0x24
 8002c54:	4b0c      	ldr	r3, [pc, #48]	@ (8002c88 <std+0x5c>)
 8002c56:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002c58:	4b0c      	ldr	r3, [pc, #48]	@ (8002c8c <std+0x60>)
 8002c5a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c90 <std+0x64>)
 8002c5e:	6323      	str	r3, [r4, #48]	@ 0x30
 8002c60:	4b0c      	ldr	r3, [pc, #48]	@ (8002c94 <std+0x68>)
 8002c62:	429c      	cmp	r4, r3
 8002c64:	d006      	beq.n	8002c74 <std+0x48>
 8002c66:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002c6a:	4294      	cmp	r4, r2
 8002c6c:	d002      	beq.n	8002c74 <std+0x48>
 8002c6e:	33d0      	adds	r3, #208	@ 0xd0
 8002c70:	429c      	cmp	r4, r3
 8002c72:	d105      	bne.n	8002c80 <std+0x54>
 8002c74:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002c78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c7c:	f000 b978 	b.w	8002f70 <__retarget_lock_init_recursive>
 8002c80:	bd10      	pop	{r4, pc}
 8002c82:	bf00      	nop
 8002c84:	08002df1 	.word	0x08002df1
 8002c88:	08002e13 	.word	0x08002e13
 8002c8c:	08002e4b 	.word	0x08002e4b
 8002c90:	08002e6f 	.word	0x08002e6f
 8002c94:	200001f8 	.word	0x200001f8

08002c98 <stdio_exit_handler>:
 8002c98:	4a02      	ldr	r2, [pc, #8]	@ (8002ca4 <stdio_exit_handler+0xc>)
 8002c9a:	4903      	ldr	r1, [pc, #12]	@ (8002ca8 <stdio_exit_handler+0x10>)
 8002c9c:	4803      	ldr	r0, [pc, #12]	@ (8002cac <stdio_exit_handler+0x14>)
 8002c9e:	f000 b869 	b.w	8002d74 <_fwalk_sglue>
 8002ca2:	bf00      	nop
 8002ca4:	2000000c 	.word	0x2000000c
 8002ca8:	08005835 	.word	0x08005835
 8002cac:	2000001c 	.word	0x2000001c

08002cb0 <cleanup_stdio>:
 8002cb0:	6841      	ldr	r1, [r0, #4]
 8002cb2:	4b0c      	ldr	r3, [pc, #48]	@ (8002ce4 <cleanup_stdio+0x34>)
 8002cb4:	b510      	push	{r4, lr}
 8002cb6:	4299      	cmp	r1, r3
 8002cb8:	4604      	mov	r4, r0
 8002cba:	d001      	beq.n	8002cc0 <cleanup_stdio+0x10>
 8002cbc:	f002 fdba 	bl	8005834 <_fflush_r>
 8002cc0:	68a1      	ldr	r1, [r4, #8]
 8002cc2:	4b09      	ldr	r3, [pc, #36]	@ (8002ce8 <cleanup_stdio+0x38>)
 8002cc4:	4299      	cmp	r1, r3
 8002cc6:	d002      	beq.n	8002cce <cleanup_stdio+0x1e>
 8002cc8:	4620      	mov	r0, r4
 8002cca:	f002 fdb3 	bl	8005834 <_fflush_r>
 8002cce:	68e1      	ldr	r1, [r4, #12]
 8002cd0:	4b06      	ldr	r3, [pc, #24]	@ (8002cec <cleanup_stdio+0x3c>)
 8002cd2:	4299      	cmp	r1, r3
 8002cd4:	d004      	beq.n	8002ce0 <cleanup_stdio+0x30>
 8002cd6:	4620      	mov	r0, r4
 8002cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002cdc:	f002 bdaa 	b.w	8005834 <_fflush_r>
 8002ce0:	bd10      	pop	{r4, pc}
 8002ce2:	bf00      	nop
 8002ce4:	200001f8 	.word	0x200001f8
 8002ce8:	20000260 	.word	0x20000260
 8002cec:	200002c8 	.word	0x200002c8

08002cf0 <global_stdio_init.part.0>:
 8002cf0:	b510      	push	{r4, lr}
 8002cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8002d20 <global_stdio_init.part.0+0x30>)
 8002cf4:	4c0b      	ldr	r4, [pc, #44]	@ (8002d24 <global_stdio_init.part.0+0x34>)
 8002cf6:	4a0c      	ldr	r2, [pc, #48]	@ (8002d28 <global_stdio_init.part.0+0x38>)
 8002cf8:	4620      	mov	r0, r4
 8002cfa:	601a      	str	r2, [r3, #0]
 8002cfc:	2104      	movs	r1, #4
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f7ff ff94 	bl	8002c2c <std>
 8002d04:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002d08:	2201      	movs	r2, #1
 8002d0a:	2109      	movs	r1, #9
 8002d0c:	f7ff ff8e 	bl	8002c2c <std>
 8002d10:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002d14:	2202      	movs	r2, #2
 8002d16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d1a:	2112      	movs	r1, #18
 8002d1c:	f7ff bf86 	b.w	8002c2c <std>
 8002d20:	20000330 	.word	0x20000330
 8002d24:	200001f8 	.word	0x200001f8
 8002d28:	08002c99 	.word	0x08002c99

08002d2c <__sfp_lock_acquire>:
 8002d2c:	4801      	ldr	r0, [pc, #4]	@ (8002d34 <__sfp_lock_acquire+0x8>)
 8002d2e:	f000 b920 	b.w	8002f72 <__retarget_lock_acquire_recursive>
 8002d32:	bf00      	nop
 8002d34:	20000339 	.word	0x20000339

08002d38 <__sfp_lock_release>:
 8002d38:	4801      	ldr	r0, [pc, #4]	@ (8002d40 <__sfp_lock_release+0x8>)
 8002d3a:	f000 b91b 	b.w	8002f74 <__retarget_lock_release_recursive>
 8002d3e:	bf00      	nop
 8002d40:	20000339 	.word	0x20000339

08002d44 <__sinit>:
 8002d44:	b510      	push	{r4, lr}
 8002d46:	4604      	mov	r4, r0
 8002d48:	f7ff fff0 	bl	8002d2c <__sfp_lock_acquire>
 8002d4c:	6a23      	ldr	r3, [r4, #32]
 8002d4e:	b11b      	cbz	r3, 8002d58 <__sinit+0x14>
 8002d50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d54:	f7ff bff0 	b.w	8002d38 <__sfp_lock_release>
 8002d58:	4b04      	ldr	r3, [pc, #16]	@ (8002d6c <__sinit+0x28>)
 8002d5a:	6223      	str	r3, [r4, #32]
 8002d5c:	4b04      	ldr	r3, [pc, #16]	@ (8002d70 <__sinit+0x2c>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d1f5      	bne.n	8002d50 <__sinit+0xc>
 8002d64:	f7ff ffc4 	bl	8002cf0 <global_stdio_init.part.0>
 8002d68:	e7f2      	b.n	8002d50 <__sinit+0xc>
 8002d6a:	bf00      	nop
 8002d6c:	08002cb1 	.word	0x08002cb1
 8002d70:	20000330 	.word	0x20000330

08002d74 <_fwalk_sglue>:
 8002d74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d78:	4607      	mov	r7, r0
 8002d7a:	4688      	mov	r8, r1
 8002d7c:	4614      	mov	r4, r2
 8002d7e:	2600      	movs	r6, #0
 8002d80:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002d84:	f1b9 0901 	subs.w	r9, r9, #1
 8002d88:	d505      	bpl.n	8002d96 <_fwalk_sglue+0x22>
 8002d8a:	6824      	ldr	r4, [r4, #0]
 8002d8c:	2c00      	cmp	r4, #0
 8002d8e:	d1f7      	bne.n	8002d80 <_fwalk_sglue+0xc>
 8002d90:	4630      	mov	r0, r6
 8002d92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d96:	89ab      	ldrh	r3, [r5, #12]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d907      	bls.n	8002dac <_fwalk_sglue+0x38>
 8002d9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002da0:	3301      	adds	r3, #1
 8002da2:	d003      	beq.n	8002dac <_fwalk_sglue+0x38>
 8002da4:	4629      	mov	r1, r5
 8002da6:	4638      	mov	r0, r7
 8002da8:	47c0      	blx	r8
 8002daa:	4306      	orrs	r6, r0
 8002dac:	3568      	adds	r5, #104	@ 0x68
 8002dae:	e7e9      	b.n	8002d84 <_fwalk_sglue+0x10>

08002db0 <siprintf>:
 8002db0:	b40e      	push	{r1, r2, r3}
 8002db2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002db6:	b500      	push	{lr}
 8002db8:	b09c      	sub	sp, #112	@ 0x70
 8002dba:	ab1d      	add	r3, sp, #116	@ 0x74
 8002dbc:	9002      	str	r0, [sp, #8]
 8002dbe:	9006      	str	r0, [sp, #24]
 8002dc0:	9107      	str	r1, [sp, #28]
 8002dc2:	9104      	str	r1, [sp, #16]
 8002dc4:	4808      	ldr	r0, [pc, #32]	@ (8002de8 <siprintf+0x38>)
 8002dc6:	4909      	ldr	r1, [pc, #36]	@ (8002dec <siprintf+0x3c>)
 8002dc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8002dcc:	9105      	str	r1, [sp, #20]
 8002dce:	6800      	ldr	r0, [r0, #0]
 8002dd0:	a902      	add	r1, sp, #8
 8002dd2:	9301      	str	r3, [sp, #4]
 8002dd4:	f002 fbb2 	bl	800553c <_svfiprintf_r>
 8002dd8:	2200      	movs	r2, #0
 8002dda:	9b02      	ldr	r3, [sp, #8]
 8002ddc:	701a      	strb	r2, [r3, #0]
 8002dde:	b01c      	add	sp, #112	@ 0x70
 8002de0:	f85d eb04 	ldr.w	lr, [sp], #4
 8002de4:	b003      	add	sp, #12
 8002de6:	4770      	bx	lr
 8002de8:	20000018 	.word	0x20000018
 8002dec:	ffff0208 	.word	0xffff0208

08002df0 <__sread>:
 8002df0:	b510      	push	{r4, lr}
 8002df2:	460c      	mov	r4, r1
 8002df4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002df8:	f000 f86c 	bl	8002ed4 <_read_r>
 8002dfc:	2800      	cmp	r0, #0
 8002dfe:	bfab      	itete	ge
 8002e00:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002e02:	89a3      	ldrhlt	r3, [r4, #12]
 8002e04:	181b      	addge	r3, r3, r0
 8002e06:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002e0a:	bfac      	ite	ge
 8002e0c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002e0e:	81a3      	strhlt	r3, [r4, #12]
 8002e10:	bd10      	pop	{r4, pc}

08002e12 <__swrite>:
 8002e12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e16:	461f      	mov	r7, r3
 8002e18:	898b      	ldrh	r3, [r1, #12]
 8002e1a:	4605      	mov	r5, r0
 8002e1c:	05db      	lsls	r3, r3, #23
 8002e1e:	460c      	mov	r4, r1
 8002e20:	4616      	mov	r6, r2
 8002e22:	d505      	bpl.n	8002e30 <__swrite+0x1e>
 8002e24:	2302      	movs	r3, #2
 8002e26:	2200      	movs	r2, #0
 8002e28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e2c:	f000 f840 	bl	8002eb0 <_lseek_r>
 8002e30:	89a3      	ldrh	r3, [r4, #12]
 8002e32:	4632      	mov	r2, r6
 8002e34:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002e38:	81a3      	strh	r3, [r4, #12]
 8002e3a:	4628      	mov	r0, r5
 8002e3c:	463b      	mov	r3, r7
 8002e3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002e42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002e46:	f000 b857 	b.w	8002ef8 <_write_r>

08002e4a <__sseek>:
 8002e4a:	b510      	push	{r4, lr}
 8002e4c:	460c      	mov	r4, r1
 8002e4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e52:	f000 f82d 	bl	8002eb0 <_lseek_r>
 8002e56:	1c43      	adds	r3, r0, #1
 8002e58:	89a3      	ldrh	r3, [r4, #12]
 8002e5a:	bf15      	itete	ne
 8002e5c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002e5e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002e62:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002e66:	81a3      	strheq	r3, [r4, #12]
 8002e68:	bf18      	it	ne
 8002e6a:	81a3      	strhne	r3, [r4, #12]
 8002e6c:	bd10      	pop	{r4, pc}

08002e6e <__sclose>:
 8002e6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e72:	f000 b80d 	b.w	8002e90 <_close_r>

08002e76 <memset>:
 8002e76:	4603      	mov	r3, r0
 8002e78:	4402      	add	r2, r0
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d100      	bne.n	8002e80 <memset+0xa>
 8002e7e:	4770      	bx	lr
 8002e80:	f803 1b01 	strb.w	r1, [r3], #1
 8002e84:	e7f9      	b.n	8002e7a <memset+0x4>
	...

08002e88 <_localeconv_r>:
 8002e88:	4800      	ldr	r0, [pc, #0]	@ (8002e8c <_localeconv_r+0x4>)
 8002e8a:	4770      	bx	lr
 8002e8c:	20000158 	.word	0x20000158

08002e90 <_close_r>:
 8002e90:	b538      	push	{r3, r4, r5, lr}
 8002e92:	2300      	movs	r3, #0
 8002e94:	4d05      	ldr	r5, [pc, #20]	@ (8002eac <_close_r+0x1c>)
 8002e96:	4604      	mov	r4, r0
 8002e98:	4608      	mov	r0, r1
 8002e9a:	602b      	str	r3, [r5, #0]
 8002e9c:	f7fe f8f7 	bl	800108e <_close>
 8002ea0:	1c43      	adds	r3, r0, #1
 8002ea2:	d102      	bne.n	8002eaa <_close_r+0x1a>
 8002ea4:	682b      	ldr	r3, [r5, #0]
 8002ea6:	b103      	cbz	r3, 8002eaa <_close_r+0x1a>
 8002ea8:	6023      	str	r3, [r4, #0]
 8002eaa:	bd38      	pop	{r3, r4, r5, pc}
 8002eac:	20000334 	.word	0x20000334

08002eb0 <_lseek_r>:
 8002eb0:	b538      	push	{r3, r4, r5, lr}
 8002eb2:	4604      	mov	r4, r0
 8002eb4:	4608      	mov	r0, r1
 8002eb6:	4611      	mov	r1, r2
 8002eb8:	2200      	movs	r2, #0
 8002eba:	4d05      	ldr	r5, [pc, #20]	@ (8002ed0 <_lseek_r+0x20>)
 8002ebc:	602a      	str	r2, [r5, #0]
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	f7fe f909 	bl	80010d6 <_lseek>
 8002ec4:	1c43      	adds	r3, r0, #1
 8002ec6:	d102      	bne.n	8002ece <_lseek_r+0x1e>
 8002ec8:	682b      	ldr	r3, [r5, #0]
 8002eca:	b103      	cbz	r3, 8002ece <_lseek_r+0x1e>
 8002ecc:	6023      	str	r3, [r4, #0]
 8002ece:	bd38      	pop	{r3, r4, r5, pc}
 8002ed0:	20000334 	.word	0x20000334

08002ed4 <_read_r>:
 8002ed4:	b538      	push	{r3, r4, r5, lr}
 8002ed6:	4604      	mov	r4, r0
 8002ed8:	4608      	mov	r0, r1
 8002eda:	4611      	mov	r1, r2
 8002edc:	2200      	movs	r2, #0
 8002ede:	4d05      	ldr	r5, [pc, #20]	@ (8002ef4 <_read_r+0x20>)
 8002ee0:	602a      	str	r2, [r5, #0]
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	f7fe f89a 	bl	800101c <_read>
 8002ee8:	1c43      	adds	r3, r0, #1
 8002eea:	d102      	bne.n	8002ef2 <_read_r+0x1e>
 8002eec:	682b      	ldr	r3, [r5, #0]
 8002eee:	b103      	cbz	r3, 8002ef2 <_read_r+0x1e>
 8002ef0:	6023      	str	r3, [r4, #0]
 8002ef2:	bd38      	pop	{r3, r4, r5, pc}
 8002ef4:	20000334 	.word	0x20000334

08002ef8 <_write_r>:
 8002ef8:	b538      	push	{r3, r4, r5, lr}
 8002efa:	4604      	mov	r4, r0
 8002efc:	4608      	mov	r0, r1
 8002efe:	4611      	mov	r1, r2
 8002f00:	2200      	movs	r2, #0
 8002f02:	4d05      	ldr	r5, [pc, #20]	@ (8002f18 <_write_r+0x20>)
 8002f04:	602a      	str	r2, [r5, #0]
 8002f06:	461a      	mov	r2, r3
 8002f08:	f7fe f8a5 	bl	8001056 <_write>
 8002f0c:	1c43      	adds	r3, r0, #1
 8002f0e:	d102      	bne.n	8002f16 <_write_r+0x1e>
 8002f10:	682b      	ldr	r3, [r5, #0]
 8002f12:	b103      	cbz	r3, 8002f16 <_write_r+0x1e>
 8002f14:	6023      	str	r3, [r4, #0]
 8002f16:	bd38      	pop	{r3, r4, r5, pc}
 8002f18:	20000334 	.word	0x20000334

08002f1c <__errno>:
 8002f1c:	4b01      	ldr	r3, [pc, #4]	@ (8002f24 <__errno+0x8>)
 8002f1e:	6818      	ldr	r0, [r3, #0]
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	20000018 	.word	0x20000018

08002f28 <__libc_init_array>:
 8002f28:	b570      	push	{r4, r5, r6, lr}
 8002f2a:	2600      	movs	r6, #0
 8002f2c:	4d0c      	ldr	r5, [pc, #48]	@ (8002f60 <__libc_init_array+0x38>)
 8002f2e:	4c0d      	ldr	r4, [pc, #52]	@ (8002f64 <__libc_init_array+0x3c>)
 8002f30:	1b64      	subs	r4, r4, r5
 8002f32:	10a4      	asrs	r4, r4, #2
 8002f34:	42a6      	cmp	r6, r4
 8002f36:	d109      	bne.n	8002f4c <__libc_init_array+0x24>
 8002f38:	f003 fb68 	bl	800660c <_init>
 8002f3c:	2600      	movs	r6, #0
 8002f3e:	4d0a      	ldr	r5, [pc, #40]	@ (8002f68 <__libc_init_array+0x40>)
 8002f40:	4c0a      	ldr	r4, [pc, #40]	@ (8002f6c <__libc_init_array+0x44>)
 8002f42:	1b64      	subs	r4, r4, r5
 8002f44:	10a4      	asrs	r4, r4, #2
 8002f46:	42a6      	cmp	r6, r4
 8002f48:	d105      	bne.n	8002f56 <__libc_init_array+0x2e>
 8002f4a:	bd70      	pop	{r4, r5, r6, pc}
 8002f4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f50:	4798      	blx	r3
 8002f52:	3601      	adds	r6, #1
 8002f54:	e7ee      	b.n	8002f34 <__libc_init_array+0xc>
 8002f56:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f5a:	4798      	blx	r3
 8002f5c:	3601      	adds	r6, #1
 8002f5e:	e7f2      	b.n	8002f46 <__libc_init_array+0x1e>
 8002f60:	08006a80 	.word	0x08006a80
 8002f64:	08006a80 	.word	0x08006a80
 8002f68:	08006a80 	.word	0x08006a80
 8002f6c:	08006a84 	.word	0x08006a84

08002f70 <__retarget_lock_init_recursive>:
 8002f70:	4770      	bx	lr

08002f72 <__retarget_lock_acquire_recursive>:
 8002f72:	4770      	bx	lr

08002f74 <__retarget_lock_release_recursive>:
 8002f74:	4770      	bx	lr

08002f76 <memchr>:
 8002f76:	4603      	mov	r3, r0
 8002f78:	b510      	push	{r4, lr}
 8002f7a:	b2c9      	uxtb	r1, r1
 8002f7c:	4402      	add	r2, r0
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	4618      	mov	r0, r3
 8002f82:	d101      	bne.n	8002f88 <memchr+0x12>
 8002f84:	2000      	movs	r0, #0
 8002f86:	e003      	b.n	8002f90 <memchr+0x1a>
 8002f88:	7804      	ldrb	r4, [r0, #0]
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	428c      	cmp	r4, r1
 8002f8e:	d1f6      	bne.n	8002f7e <memchr+0x8>
 8002f90:	bd10      	pop	{r4, pc}
	...

08002f94 <nanf>:
 8002f94:	4800      	ldr	r0, [pc, #0]	@ (8002f98 <nanf+0x4>)
 8002f96:	4770      	bx	lr
 8002f98:	7fc00000 	.word	0x7fc00000

08002f9c <quorem>:
 8002f9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fa0:	6903      	ldr	r3, [r0, #16]
 8002fa2:	690c      	ldr	r4, [r1, #16]
 8002fa4:	4607      	mov	r7, r0
 8002fa6:	42a3      	cmp	r3, r4
 8002fa8:	db7e      	blt.n	80030a8 <quorem+0x10c>
 8002faa:	3c01      	subs	r4, #1
 8002fac:	00a3      	lsls	r3, r4, #2
 8002fae:	f100 0514 	add.w	r5, r0, #20
 8002fb2:	f101 0814 	add.w	r8, r1, #20
 8002fb6:	9300      	str	r3, [sp, #0]
 8002fb8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002fbc:	9301      	str	r3, [sp, #4]
 8002fbe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8002fc2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	fbb2 f6f3 	udiv	r6, r2, r3
 8002fce:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8002fd2:	d32e      	bcc.n	8003032 <quorem+0x96>
 8002fd4:	f04f 0a00 	mov.w	sl, #0
 8002fd8:	46c4      	mov	ip, r8
 8002fda:	46ae      	mov	lr, r5
 8002fdc:	46d3      	mov	fp, sl
 8002fde:	f85c 3b04 	ldr.w	r3, [ip], #4
 8002fe2:	b298      	uxth	r0, r3
 8002fe4:	fb06 a000 	mla	r0, r6, r0, sl
 8002fe8:	0c1b      	lsrs	r3, r3, #16
 8002fea:	0c02      	lsrs	r2, r0, #16
 8002fec:	fb06 2303 	mla	r3, r6, r3, r2
 8002ff0:	f8de 2000 	ldr.w	r2, [lr]
 8002ff4:	b280      	uxth	r0, r0
 8002ff6:	b292      	uxth	r2, r2
 8002ff8:	1a12      	subs	r2, r2, r0
 8002ffa:	445a      	add	r2, fp
 8002ffc:	f8de 0000 	ldr.w	r0, [lr]
 8003000:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003004:	b29b      	uxth	r3, r3
 8003006:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800300a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800300e:	b292      	uxth	r2, r2
 8003010:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003014:	45e1      	cmp	r9, ip
 8003016:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800301a:	f84e 2b04 	str.w	r2, [lr], #4
 800301e:	d2de      	bcs.n	8002fde <quorem+0x42>
 8003020:	9b00      	ldr	r3, [sp, #0]
 8003022:	58eb      	ldr	r3, [r5, r3]
 8003024:	b92b      	cbnz	r3, 8003032 <quorem+0x96>
 8003026:	9b01      	ldr	r3, [sp, #4]
 8003028:	3b04      	subs	r3, #4
 800302a:	429d      	cmp	r5, r3
 800302c:	461a      	mov	r2, r3
 800302e:	d32f      	bcc.n	8003090 <quorem+0xf4>
 8003030:	613c      	str	r4, [r7, #16]
 8003032:	4638      	mov	r0, r7
 8003034:	f001 f9c4 	bl	80043c0 <__mcmp>
 8003038:	2800      	cmp	r0, #0
 800303a:	db25      	blt.n	8003088 <quorem+0xec>
 800303c:	4629      	mov	r1, r5
 800303e:	2000      	movs	r0, #0
 8003040:	f858 2b04 	ldr.w	r2, [r8], #4
 8003044:	f8d1 c000 	ldr.w	ip, [r1]
 8003048:	fa1f fe82 	uxth.w	lr, r2
 800304c:	fa1f f38c 	uxth.w	r3, ip
 8003050:	eba3 030e 	sub.w	r3, r3, lr
 8003054:	4403      	add	r3, r0
 8003056:	0c12      	lsrs	r2, r2, #16
 8003058:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800305c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8003060:	b29b      	uxth	r3, r3
 8003062:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003066:	45c1      	cmp	r9, r8
 8003068:	ea4f 4022 	mov.w	r0, r2, asr #16
 800306c:	f841 3b04 	str.w	r3, [r1], #4
 8003070:	d2e6      	bcs.n	8003040 <quorem+0xa4>
 8003072:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003076:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800307a:	b922      	cbnz	r2, 8003086 <quorem+0xea>
 800307c:	3b04      	subs	r3, #4
 800307e:	429d      	cmp	r5, r3
 8003080:	461a      	mov	r2, r3
 8003082:	d30b      	bcc.n	800309c <quorem+0x100>
 8003084:	613c      	str	r4, [r7, #16]
 8003086:	3601      	adds	r6, #1
 8003088:	4630      	mov	r0, r6
 800308a:	b003      	add	sp, #12
 800308c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003090:	6812      	ldr	r2, [r2, #0]
 8003092:	3b04      	subs	r3, #4
 8003094:	2a00      	cmp	r2, #0
 8003096:	d1cb      	bne.n	8003030 <quorem+0x94>
 8003098:	3c01      	subs	r4, #1
 800309a:	e7c6      	b.n	800302a <quorem+0x8e>
 800309c:	6812      	ldr	r2, [r2, #0]
 800309e:	3b04      	subs	r3, #4
 80030a0:	2a00      	cmp	r2, #0
 80030a2:	d1ef      	bne.n	8003084 <quorem+0xe8>
 80030a4:	3c01      	subs	r4, #1
 80030a6:	e7ea      	b.n	800307e <quorem+0xe2>
 80030a8:	2000      	movs	r0, #0
 80030aa:	e7ee      	b.n	800308a <quorem+0xee>
 80030ac:	0000      	movs	r0, r0
	...

080030b0 <_dtoa_r>:
 80030b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030b4:	4614      	mov	r4, r2
 80030b6:	461d      	mov	r5, r3
 80030b8:	69c7      	ldr	r7, [r0, #28]
 80030ba:	b097      	sub	sp, #92	@ 0x5c
 80030bc:	4683      	mov	fp, r0
 80030be:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80030c2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80030c4:	b97f      	cbnz	r7, 80030e6 <_dtoa_r+0x36>
 80030c6:	2010      	movs	r0, #16
 80030c8:	f000 fe02 	bl	8003cd0 <malloc>
 80030cc:	4602      	mov	r2, r0
 80030ce:	f8cb 001c 	str.w	r0, [fp, #28]
 80030d2:	b920      	cbnz	r0, 80030de <_dtoa_r+0x2e>
 80030d4:	21ef      	movs	r1, #239	@ 0xef
 80030d6:	4ba8      	ldr	r3, [pc, #672]	@ (8003378 <_dtoa_r+0x2c8>)
 80030d8:	48a8      	ldr	r0, [pc, #672]	@ (800337c <_dtoa_r+0x2cc>)
 80030da:	f002 fc23 	bl	8005924 <__assert_func>
 80030de:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80030e2:	6007      	str	r7, [r0, #0]
 80030e4:	60c7      	str	r7, [r0, #12]
 80030e6:	f8db 301c 	ldr.w	r3, [fp, #28]
 80030ea:	6819      	ldr	r1, [r3, #0]
 80030ec:	b159      	cbz	r1, 8003106 <_dtoa_r+0x56>
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	2301      	movs	r3, #1
 80030f2:	4093      	lsls	r3, r2
 80030f4:	604a      	str	r2, [r1, #4]
 80030f6:	608b      	str	r3, [r1, #8]
 80030f8:	4658      	mov	r0, fp
 80030fa:	f000 fedf 	bl	8003ebc <_Bfree>
 80030fe:	2200      	movs	r2, #0
 8003100:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003104:	601a      	str	r2, [r3, #0]
 8003106:	1e2b      	subs	r3, r5, #0
 8003108:	bfaf      	iteee	ge
 800310a:	2300      	movge	r3, #0
 800310c:	2201      	movlt	r2, #1
 800310e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8003112:	9303      	strlt	r3, [sp, #12]
 8003114:	bfa8      	it	ge
 8003116:	6033      	strge	r3, [r6, #0]
 8003118:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800311c:	4b98      	ldr	r3, [pc, #608]	@ (8003380 <_dtoa_r+0x2d0>)
 800311e:	bfb8      	it	lt
 8003120:	6032      	strlt	r2, [r6, #0]
 8003122:	ea33 0308 	bics.w	r3, r3, r8
 8003126:	d112      	bne.n	800314e <_dtoa_r+0x9e>
 8003128:	f242 730f 	movw	r3, #9999	@ 0x270f
 800312c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800312e:	6013      	str	r3, [r2, #0]
 8003130:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8003134:	4323      	orrs	r3, r4
 8003136:	f000 8550 	beq.w	8003bda <_dtoa_r+0xb2a>
 800313a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800313c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8003384 <_dtoa_r+0x2d4>
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 8552 	beq.w	8003bea <_dtoa_r+0xb3a>
 8003146:	f10a 0303 	add.w	r3, sl, #3
 800314a:	f000 bd4c 	b.w	8003be6 <_dtoa_r+0xb36>
 800314e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003152:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8003156:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800315a:	2200      	movs	r2, #0
 800315c:	2300      	movs	r3, #0
 800315e:	f7fd fc23 	bl	80009a8 <__aeabi_dcmpeq>
 8003162:	4607      	mov	r7, r0
 8003164:	b158      	cbz	r0, 800317e <_dtoa_r+0xce>
 8003166:	2301      	movs	r3, #1
 8003168:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800316a:	6013      	str	r3, [r2, #0]
 800316c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800316e:	b113      	cbz	r3, 8003176 <_dtoa_r+0xc6>
 8003170:	4b85      	ldr	r3, [pc, #532]	@ (8003388 <_dtoa_r+0x2d8>)
 8003172:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8003174:	6013      	str	r3, [r2, #0]
 8003176:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800338c <_dtoa_r+0x2dc>
 800317a:	f000 bd36 	b.w	8003bea <_dtoa_r+0xb3a>
 800317e:	ab14      	add	r3, sp, #80	@ 0x50
 8003180:	9301      	str	r3, [sp, #4]
 8003182:	ab15      	add	r3, sp, #84	@ 0x54
 8003184:	9300      	str	r3, [sp, #0]
 8003186:	4658      	mov	r0, fp
 8003188:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800318c:	f001 fa30 	bl	80045f0 <__d2b>
 8003190:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8003194:	4681      	mov	r9, r0
 8003196:	2e00      	cmp	r6, #0
 8003198:	d077      	beq.n	800328a <_dtoa_r+0x1da>
 800319a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800319e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80031a0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80031a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031a8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80031ac:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80031b0:	9712      	str	r7, [sp, #72]	@ 0x48
 80031b2:	4619      	mov	r1, r3
 80031b4:	2200      	movs	r2, #0
 80031b6:	4b76      	ldr	r3, [pc, #472]	@ (8003390 <_dtoa_r+0x2e0>)
 80031b8:	f7fc ffd6 	bl	8000168 <__aeabi_dsub>
 80031bc:	a368      	add	r3, pc, #416	@ (adr r3, 8003360 <_dtoa_r+0x2b0>)
 80031be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c2:	f7fd f989 	bl	80004d8 <__aeabi_dmul>
 80031c6:	a368      	add	r3, pc, #416	@ (adr r3, 8003368 <_dtoa_r+0x2b8>)
 80031c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031cc:	f7fc ffce 	bl	800016c <__adddf3>
 80031d0:	4604      	mov	r4, r0
 80031d2:	4630      	mov	r0, r6
 80031d4:	460d      	mov	r5, r1
 80031d6:	f7fd f915 	bl	8000404 <__aeabi_i2d>
 80031da:	a365      	add	r3, pc, #404	@ (adr r3, 8003370 <_dtoa_r+0x2c0>)
 80031dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e0:	f7fd f97a 	bl	80004d8 <__aeabi_dmul>
 80031e4:	4602      	mov	r2, r0
 80031e6:	460b      	mov	r3, r1
 80031e8:	4620      	mov	r0, r4
 80031ea:	4629      	mov	r1, r5
 80031ec:	f7fc ffbe 	bl	800016c <__adddf3>
 80031f0:	4604      	mov	r4, r0
 80031f2:	460d      	mov	r5, r1
 80031f4:	f7fd fc20 	bl	8000a38 <__aeabi_d2iz>
 80031f8:	2200      	movs	r2, #0
 80031fa:	4607      	mov	r7, r0
 80031fc:	2300      	movs	r3, #0
 80031fe:	4620      	mov	r0, r4
 8003200:	4629      	mov	r1, r5
 8003202:	f7fd fbdb 	bl	80009bc <__aeabi_dcmplt>
 8003206:	b140      	cbz	r0, 800321a <_dtoa_r+0x16a>
 8003208:	4638      	mov	r0, r7
 800320a:	f7fd f8fb 	bl	8000404 <__aeabi_i2d>
 800320e:	4622      	mov	r2, r4
 8003210:	462b      	mov	r3, r5
 8003212:	f7fd fbc9 	bl	80009a8 <__aeabi_dcmpeq>
 8003216:	b900      	cbnz	r0, 800321a <_dtoa_r+0x16a>
 8003218:	3f01      	subs	r7, #1
 800321a:	2f16      	cmp	r7, #22
 800321c:	d853      	bhi.n	80032c6 <_dtoa_r+0x216>
 800321e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003222:	4b5c      	ldr	r3, [pc, #368]	@ (8003394 <_dtoa_r+0x2e4>)
 8003224:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800322c:	f7fd fbc6 	bl	80009bc <__aeabi_dcmplt>
 8003230:	2800      	cmp	r0, #0
 8003232:	d04a      	beq.n	80032ca <_dtoa_r+0x21a>
 8003234:	2300      	movs	r3, #0
 8003236:	3f01      	subs	r7, #1
 8003238:	930f      	str	r3, [sp, #60]	@ 0x3c
 800323a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800323c:	1b9b      	subs	r3, r3, r6
 800323e:	1e5a      	subs	r2, r3, #1
 8003240:	bf46      	itte	mi
 8003242:	f1c3 0801 	rsbmi	r8, r3, #1
 8003246:	2300      	movmi	r3, #0
 8003248:	f04f 0800 	movpl.w	r8, #0
 800324c:	9209      	str	r2, [sp, #36]	@ 0x24
 800324e:	bf48      	it	mi
 8003250:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8003252:	2f00      	cmp	r7, #0
 8003254:	db3b      	blt.n	80032ce <_dtoa_r+0x21e>
 8003256:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003258:	970e      	str	r7, [sp, #56]	@ 0x38
 800325a:	443b      	add	r3, r7
 800325c:	9309      	str	r3, [sp, #36]	@ 0x24
 800325e:	2300      	movs	r3, #0
 8003260:	930a      	str	r3, [sp, #40]	@ 0x28
 8003262:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003264:	2b09      	cmp	r3, #9
 8003266:	d866      	bhi.n	8003336 <_dtoa_r+0x286>
 8003268:	2b05      	cmp	r3, #5
 800326a:	bfc4      	itt	gt
 800326c:	3b04      	subgt	r3, #4
 800326e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8003270:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003272:	bfc8      	it	gt
 8003274:	2400      	movgt	r4, #0
 8003276:	f1a3 0302 	sub.w	r3, r3, #2
 800327a:	bfd8      	it	le
 800327c:	2401      	movle	r4, #1
 800327e:	2b03      	cmp	r3, #3
 8003280:	d864      	bhi.n	800334c <_dtoa_r+0x29c>
 8003282:	e8df f003 	tbb	[pc, r3]
 8003286:	382b      	.short	0x382b
 8003288:	5636      	.short	0x5636
 800328a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800328e:	441e      	add	r6, r3
 8003290:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8003294:	2b20      	cmp	r3, #32
 8003296:	bfc1      	itttt	gt
 8003298:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800329c:	fa08 f803 	lslgt.w	r8, r8, r3
 80032a0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80032a4:	fa24 f303 	lsrgt.w	r3, r4, r3
 80032a8:	bfd6      	itet	le
 80032aa:	f1c3 0320 	rsble	r3, r3, #32
 80032ae:	ea48 0003 	orrgt.w	r0, r8, r3
 80032b2:	fa04 f003 	lslle.w	r0, r4, r3
 80032b6:	f7fd f895 	bl	80003e4 <__aeabi_ui2d>
 80032ba:	2201      	movs	r2, #1
 80032bc:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80032c0:	3e01      	subs	r6, #1
 80032c2:	9212      	str	r2, [sp, #72]	@ 0x48
 80032c4:	e775      	b.n	80031b2 <_dtoa_r+0x102>
 80032c6:	2301      	movs	r3, #1
 80032c8:	e7b6      	b.n	8003238 <_dtoa_r+0x188>
 80032ca:	900f      	str	r0, [sp, #60]	@ 0x3c
 80032cc:	e7b5      	b.n	800323a <_dtoa_r+0x18a>
 80032ce:	427b      	negs	r3, r7
 80032d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80032d2:	2300      	movs	r3, #0
 80032d4:	eba8 0807 	sub.w	r8, r8, r7
 80032d8:	930e      	str	r3, [sp, #56]	@ 0x38
 80032da:	e7c2      	b.n	8003262 <_dtoa_r+0x1b2>
 80032dc:	2300      	movs	r3, #0
 80032de:	930b      	str	r3, [sp, #44]	@ 0x2c
 80032e0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	dc35      	bgt.n	8003352 <_dtoa_r+0x2a2>
 80032e6:	2301      	movs	r3, #1
 80032e8:	461a      	mov	r2, r3
 80032ea:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80032ee:	9221      	str	r2, [sp, #132]	@ 0x84
 80032f0:	e00b      	b.n	800330a <_dtoa_r+0x25a>
 80032f2:	2301      	movs	r3, #1
 80032f4:	e7f3      	b.n	80032de <_dtoa_r+0x22e>
 80032f6:	2300      	movs	r3, #0
 80032f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80032fa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80032fc:	18fb      	adds	r3, r7, r3
 80032fe:	9308      	str	r3, [sp, #32]
 8003300:	3301      	adds	r3, #1
 8003302:	2b01      	cmp	r3, #1
 8003304:	9307      	str	r3, [sp, #28]
 8003306:	bfb8      	it	lt
 8003308:	2301      	movlt	r3, #1
 800330a:	2100      	movs	r1, #0
 800330c:	2204      	movs	r2, #4
 800330e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8003312:	f102 0514 	add.w	r5, r2, #20
 8003316:	429d      	cmp	r5, r3
 8003318:	d91f      	bls.n	800335a <_dtoa_r+0x2aa>
 800331a:	6041      	str	r1, [r0, #4]
 800331c:	4658      	mov	r0, fp
 800331e:	f000 fd8d 	bl	8003e3c <_Balloc>
 8003322:	4682      	mov	sl, r0
 8003324:	2800      	cmp	r0, #0
 8003326:	d139      	bne.n	800339c <_dtoa_r+0x2ec>
 8003328:	4602      	mov	r2, r0
 800332a:	f240 11af 	movw	r1, #431	@ 0x1af
 800332e:	4b1a      	ldr	r3, [pc, #104]	@ (8003398 <_dtoa_r+0x2e8>)
 8003330:	e6d2      	b.n	80030d8 <_dtoa_r+0x28>
 8003332:	2301      	movs	r3, #1
 8003334:	e7e0      	b.n	80032f8 <_dtoa_r+0x248>
 8003336:	2401      	movs	r4, #1
 8003338:	2300      	movs	r3, #0
 800333a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800333c:	9320      	str	r3, [sp, #128]	@ 0x80
 800333e:	f04f 33ff 	mov.w	r3, #4294967295
 8003342:	2200      	movs	r2, #0
 8003344:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003348:	2312      	movs	r3, #18
 800334a:	e7d0      	b.n	80032ee <_dtoa_r+0x23e>
 800334c:	2301      	movs	r3, #1
 800334e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003350:	e7f5      	b.n	800333e <_dtoa_r+0x28e>
 8003352:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003354:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003358:	e7d7      	b.n	800330a <_dtoa_r+0x25a>
 800335a:	3101      	adds	r1, #1
 800335c:	0052      	lsls	r2, r2, #1
 800335e:	e7d8      	b.n	8003312 <_dtoa_r+0x262>
 8003360:	636f4361 	.word	0x636f4361
 8003364:	3fd287a7 	.word	0x3fd287a7
 8003368:	8b60c8b3 	.word	0x8b60c8b3
 800336c:	3fc68a28 	.word	0x3fc68a28
 8003370:	509f79fb 	.word	0x509f79fb
 8003374:	3fd34413 	.word	0x3fd34413
 8003378:	08006690 	.word	0x08006690
 800337c:	080066a7 	.word	0x080066a7
 8003380:	7ff00000 	.word	0x7ff00000
 8003384:	0800668c 	.word	0x0800668c
 8003388:	0800665b 	.word	0x0800665b
 800338c:	0800665a 	.word	0x0800665a
 8003390:	3ff80000 	.word	0x3ff80000
 8003394:	080067a0 	.word	0x080067a0
 8003398:	080066ff 	.word	0x080066ff
 800339c:	f8db 301c 	ldr.w	r3, [fp, #28]
 80033a0:	6018      	str	r0, [r3, #0]
 80033a2:	9b07      	ldr	r3, [sp, #28]
 80033a4:	2b0e      	cmp	r3, #14
 80033a6:	f200 80a4 	bhi.w	80034f2 <_dtoa_r+0x442>
 80033aa:	2c00      	cmp	r4, #0
 80033ac:	f000 80a1 	beq.w	80034f2 <_dtoa_r+0x442>
 80033b0:	2f00      	cmp	r7, #0
 80033b2:	dd33      	ble.n	800341c <_dtoa_r+0x36c>
 80033b4:	4b86      	ldr	r3, [pc, #536]	@ (80035d0 <_dtoa_r+0x520>)
 80033b6:	f007 020f 	and.w	r2, r7, #15
 80033ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80033be:	05f8      	lsls	r0, r7, #23
 80033c0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80033c4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80033c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80033cc:	d516      	bpl.n	80033fc <_dtoa_r+0x34c>
 80033ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80033d2:	4b80      	ldr	r3, [pc, #512]	@ (80035d4 <_dtoa_r+0x524>)
 80033d4:	2603      	movs	r6, #3
 80033d6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80033da:	f7fd f9a7 	bl	800072c <__aeabi_ddiv>
 80033de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80033e2:	f004 040f 	and.w	r4, r4, #15
 80033e6:	4d7b      	ldr	r5, [pc, #492]	@ (80035d4 <_dtoa_r+0x524>)
 80033e8:	b954      	cbnz	r4, 8003400 <_dtoa_r+0x350>
 80033ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80033ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80033f2:	f7fd f99b 	bl	800072c <__aeabi_ddiv>
 80033f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80033fa:	e028      	b.n	800344e <_dtoa_r+0x39e>
 80033fc:	2602      	movs	r6, #2
 80033fe:	e7f2      	b.n	80033e6 <_dtoa_r+0x336>
 8003400:	07e1      	lsls	r1, r4, #31
 8003402:	d508      	bpl.n	8003416 <_dtoa_r+0x366>
 8003404:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003408:	e9d5 2300 	ldrd	r2, r3, [r5]
 800340c:	f7fd f864 	bl	80004d8 <__aeabi_dmul>
 8003410:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003414:	3601      	adds	r6, #1
 8003416:	1064      	asrs	r4, r4, #1
 8003418:	3508      	adds	r5, #8
 800341a:	e7e5      	b.n	80033e8 <_dtoa_r+0x338>
 800341c:	f000 80d2 	beq.w	80035c4 <_dtoa_r+0x514>
 8003420:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003424:	427c      	negs	r4, r7
 8003426:	4b6a      	ldr	r3, [pc, #424]	@ (80035d0 <_dtoa_r+0x520>)
 8003428:	f004 020f 	and.w	r2, r4, #15
 800342c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003434:	f7fd f850 	bl	80004d8 <__aeabi_dmul>
 8003438:	2602      	movs	r6, #2
 800343a:	2300      	movs	r3, #0
 800343c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003440:	4d64      	ldr	r5, [pc, #400]	@ (80035d4 <_dtoa_r+0x524>)
 8003442:	1124      	asrs	r4, r4, #4
 8003444:	2c00      	cmp	r4, #0
 8003446:	f040 80b2 	bne.w	80035ae <_dtoa_r+0x4fe>
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1d3      	bne.n	80033f6 <_dtoa_r+0x346>
 800344e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8003452:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003454:	2b00      	cmp	r3, #0
 8003456:	f000 80b7 	beq.w	80035c8 <_dtoa_r+0x518>
 800345a:	2200      	movs	r2, #0
 800345c:	4620      	mov	r0, r4
 800345e:	4629      	mov	r1, r5
 8003460:	4b5d      	ldr	r3, [pc, #372]	@ (80035d8 <_dtoa_r+0x528>)
 8003462:	f7fd faab 	bl	80009bc <__aeabi_dcmplt>
 8003466:	2800      	cmp	r0, #0
 8003468:	f000 80ae 	beq.w	80035c8 <_dtoa_r+0x518>
 800346c:	9b07      	ldr	r3, [sp, #28]
 800346e:	2b00      	cmp	r3, #0
 8003470:	f000 80aa 	beq.w	80035c8 <_dtoa_r+0x518>
 8003474:	9b08      	ldr	r3, [sp, #32]
 8003476:	2b00      	cmp	r3, #0
 8003478:	dd37      	ble.n	80034ea <_dtoa_r+0x43a>
 800347a:	1e7b      	subs	r3, r7, #1
 800347c:	4620      	mov	r0, r4
 800347e:	9304      	str	r3, [sp, #16]
 8003480:	2200      	movs	r2, #0
 8003482:	4629      	mov	r1, r5
 8003484:	4b55      	ldr	r3, [pc, #340]	@ (80035dc <_dtoa_r+0x52c>)
 8003486:	f7fd f827 	bl	80004d8 <__aeabi_dmul>
 800348a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800348e:	9c08      	ldr	r4, [sp, #32]
 8003490:	3601      	adds	r6, #1
 8003492:	4630      	mov	r0, r6
 8003494:	f7fc ffb6 	bl	8000404 <__aeabi_i2d>
 8003498:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800349c:	f7fd f81c 	bl	80004d8 <__aeabi_dmul>
 80034a0:	2200      	movs	r2, #0
 80034a2:	4b4f      	ldr	r3, [pc, #316]	@ (80035e0 <_dtoa_r+0x530>)
 80034a4:	f7fc fe62 	bl	800016c <__adddf3>
 80034a8:	4605      	mov	r5, r0
 80034aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80034ae:	2c00      	cmp	r4, #0
 80034b0:	f040 809a 	bne.w	80035e8 <_dtoa_r+0x538>
 80034b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80034b8:	2200      	movs	r2, #0
 80034ba:	4b4a      	ldr	r3, [pc, #296]	@ (80035e4 <_dtoa_r+0x534>)
 80034bc:	f7fc fe54 	bl	8000168 <__aeabi_dsub>
 80034c0:	4602      	mov	r2, r0
 80034c2:	460b      	mov	r3, r1
 80034c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80034c8:	462a      	mov	r2, r5
 80034ca:	4633      	mov	r3, r6
 80034cc:	f7fd fa94 	bl	80009f8 <__aeabi_dcmpgt>
 80034d0:	2800      	cmp	r0, #0
 80034d2:	f040 828e 	bne.w	80039f2 <_dtoa_r+0x942>
 80034d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80034da:	462a      	mov	r2, r5
 80034dc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80034e0:	f7fd fa6c 	bl	80009bc <__aeabi_dcmplt>
 80034e4:	2800      	cmp	r0, #0
 80034e6:	f040 8127 	bne.w	8003738 <_dtoa_r+0x688>
 80034ea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80034ee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80034f2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f2c0 8163 	blt.w	80037c0 <_dtoa_r+0x710>
 80034fa:	2f0e      	cmp	r7, #14
 80034fc:	f300 8160 	bgt.w	80037c0 <_dtoa_r+0x710>
 8003500:	4b33      	ldr	r3, [pc, #204]	@ (80035d0 <_dtoa_r+0x520>)
 8003502:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003506:	e9d3 3400 	ldrd	r3, r4, [r3]
 800350a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800350e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003510:	2b00      	cmp	r3, #0
 8003512:	da03      	bge.n	800351c <_dtoa_r+0x46c>
 8003514:	9b07      	ldr	r3, [sp, #28]
 8003516:	2b00      	cmp	r3, #0
 8003518:	f340 8100 	ble.w	800371c <_dtoa_r+0x66c>
 800351c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8003520:	4656      	mov	r6, sl
 8003522:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003526:	4620      	mov	r0, r4
 8003528:	4629      	mov	r1, r5
 800352a:	f7fd f8ff 	bl	800072c <__aeabi_ddiv>
 800352e:	f7fd fa83 	bl	8000a38 <__aeabi_d2iz>
 8003532:	4680      	mov	r8, r0
 8003534:	f7fc ff66 	bl	8000404 <__aeabi_i2d>
 8003538:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800353c:	f7fc ffcc 	bl	80004d8 <__aeabi_dmul>
 8003540:	4602      	mov	r2, r0
 8003542:	460b      	mov	r3, r1
 8003544:	4620      	mov	r0, r4
 8003546:	4629      	mov	r1, r5
 8003548:	f7fc fe0e 	bl	8000168 <__aeabi_dsub>
 800354c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8003550:	9d07      	ldr	r5, [sp, #28]
 8003552:	f806 4b01 	strb.w	r4, [r6], #1
 8003556:	eba6 040a 	sub.w	r4, r6, sl
 800355a:	42a5      	cmp	r5, r4
 800355c:	4602      	mov	r2, r0
 800355e:	460b      	mov	r3, r1
 8003560:	f040 8116 	bne.w	8003790 <_dtoa_r+0x6e0>
 8003564:	f7fc fe02 	bl	800016c <__adddf3>
 8003568:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800356c:	4604      	mov	r4, r0
 800356e:	460d      	mov	r5, r1
 8003570:	f7fd fa42 	bl	80009f8 <__aeabi_dcmpgt>
 8003574:	2800      	cmp	r0, #0
 8003576:	f040 80f8 	bne.w	800376a <_dtoa_r+0x6ba>
 800357a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800357e:	4620      	mov	r0, r4
 8003580:	4629      	mov	r1, r5
 8003582:	f7fd fa11 	bl	80009a8 <__aeabi_dcmpeq>
 8003586:	b118      	cbz	r0, 8003590 <_dtoa_r+0x4e0>
 8003588:	f018 0f01 	tst.w	r8, #1
 800358c:	f040 80ed 	bne.w	800376a <_dtoa_r+0x6ba>
 8003590:	4649      	mov	r1, r9
 8003592:	4658      	mov	r0, fp
 8003594:	f000 fc92 	bl	8003ebc <_Bfree>
 8003598:	2300      	movs	r3, #0
 800359a:	7033      	strb	r3, [r6, #0]
 800359c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800359e:	3701      	adds	r7, #1
 80035a0:	601f      	str	r7, [r3, #0]
 80035a2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f000 8320 	beq.w	8003bea <_dtoa_r+0xb3a>
 80035aa:	601e      	str	r6, [r3, #0]
 80035ac:	e31d      	b.n	8003bea <_dtoa_r+0xb3a>
 80035ae:	07e2      	lsls	r2, r4, #31
 80035b0:	d505      	bpl.n	80035be <_dtoa_r+0x50e>
 80035b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80035b6:	f7fc ff8f 	bl	80004d8 <__aeabi_dmul>
 80035ba:	2301      	movs	r3, #1
 80035bc:	3601      	adds	r6, #1
 80035be:	1064      	asrs	r4, r4, #1
 80035c0:	3508      	adds	r5, #8
 80035c2:	e73f      	b.n	8003444 <_dtoa_r+0x394>
 80035c4:	2602      	movs	r6, #2
 80035c6:	e742      	b.n	800344e <_dtoa_r+0x39e>
 80035c8:	9c07      	ldr	r4, [sp, #28]
 80035ca:	9704      	str	r7, [sp, #16]
 80035cc:	e761      	b.n	8003492 <_dtoa_r+0x3e2>
 80035ce:	bf00      	nop
 80035d0:	080067a0 	.word	0x080067a0
 80035d4:	08006778 	.word	0x08006778
 80035d8:	3ff00000 	.word	0x3ff00000
 80035dc:	40240000 	.word	0x40240000
 80035e0:	401c0000 	.word	0x401c0000
 80035e4:	40140000 	.word	0x40140000
 80035e8:	4b70      	ldr	r3, [pc, #448]	@ (80037ac <_dtoa_r+0x6fc>)
 80035ea:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80035ec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80035f0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80035f4:	4454      	add	r4, sl
 80035f6:	2900      	cmp	r1, #0
 80035f8:	d045      	beq.n	8003686 <_dtoa_r+0x5d6>
 80035fa:	2000      	movs	r0, #0
 80035fc:	496c      	ldr	r1, [pc, #432]	@ (80037b0 <_dtoa_r+0x700>)
 80035fe:	f7fd f895 	bl	800072c <__aeabi_ddiv>
 8003602:	4633      	mov	r3, r6
 8003604:	462a      	mov	r2, r5
 8003606:	f7fc fdaf 	bl	8000168 <__aeabi_dsub>
 800360a:	4656      	mov	r6, sl
 800360c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003610:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003614:	f7fd fa10 	bl	8000a38 <__aeabi_d2iz>
 8003618:	4605      	mov	r5, r0
 800361a:	f7fc fef3 	bl	8000404 <__aeabi_i2d>
 800361e:	4602      	mov	r2, r0
 8003620:	460b      	mov	r3, r1
 8003622:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003626:	f7fc fd9f 	bl	8000168 <__aeabi_dsub>
 800362a:	4602      	mov	r2, r0
 800362c:	460b      	mov	r3, r1
 800362e:	3530      	adds	r5, #48	@ 0x30
 8003630:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003634:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003638:	f806 5b01 	strb.w	r5, [r6], #1
 800363c:	f7fd f9be 	bl	80009bc <__aeabi_dcmplt>
 8003640:	2800      	cmp	r0, #0
 8003642:	d163      	bne.n	800370c <_dtoa_r+0x65c>
 8003644:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003648:	2000      	movs	r0, #0
 800364a:	495a      	ldr	r1, [pc, #360]	@ (80037b4 <_dtoa_r+0x704>)
 800364c:	f7fc fd8c 	bl	8000168 <__aeabi_dsub>
 8003650:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003654:	f7fd f9b2 	bl	80009bc <__aeabi_dcmplt>
 8003658:	2800      	cmp	r0, #0
 800365a:	f040 8087 	bne.w	800376c <_dtoa_r+0x6bc>
 800365e:	42a6      	cmp	r6, r4
 8003660:	f43f af43 	beq.w	80034ea <_dtoa_r+0x43a>
 8003664:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8003668:	2200      	movs	r2, #0
 800366a:	4b53      	ldr	r3, [pc, #332]	@ (80037b8 <_dtoa_r+0x708>)
 800366c:	f7fc ff34 	bl	80004d8 <__aeabi_dmul>
 8003670:	2200      	movs	r2, #0
 8003672:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003676:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800367a:	4b4f      	ldr	r3, [pc, #316]	@ (80037b8 <_dtoa_r+0x708>)
 800367c:	f7fc ff2c 	bl	80004d8 <__aeabi_dmul>
 8003680:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003684:	e7c4      	b.n	8003610 <_dtoa_r+0x560>
 8003686:	4631      	mov	r1, r6
 8003688:	4628      	mov	r0, r5
 800368a:	f7fc ff25 	bl	80004d8 <__aeabi_dmul>
 800368e:	4656      	mov	r6, sl
 8003690:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003694:	9413      	str	r4, [sp, #76]	@ 0x4c
 8003696:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800369a:	f7fd f9cd 	bl	8000a38 <__aeabi_d2iz>
 800369e:	4605      	mov	r5, r0
 80036a0:	f7fc feb0 	bl	8000404 <__aeabi_i2d>
 80036a4:	4602      	mov	r2, r0
 80036a6:	460b      	mov	r3, r1
 80036a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80036ac:	f7fc fd5c 	bl	8000168 <__aeabi_dsub>
 80036b0:	4602      	mov	r2, r0
 80036b2:	460b      	mov	r3, r1
 80036b4:	3530      	adds	r5, #48	@ 0x30
 80036b6:	f806 5b01 	strb.w	r5, [r6], #1
 80036ba:	42a6      	cmp	r6, r4
 80036bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80036c0:	f04f 0200 	mov.w	r2, #0
 80036c4:	d124      	bne.n	8003710 <_dtoa_r+0x660>
 80036c6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80036ca:	4b39      	ldr	r3, [pc, #228]	@ (80037b0 <_dtoa_r+0x700>)
 80036cc:	f7fc fd4e 	bl	800016c <__adddf3>
 80036d0:	4602      	mov	r2, r0
 80036d2:	460b      	mov	r3, r1
 80036d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80036d8:	f7fd f98e 	bl	80009f8 <__aeabi_dcmpgt>
 80036dc:	2800      	cmp	r0, #0
 80036de:	d145      	bne.n	800376c <_dtoa_r+0x6bc>
 80036e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80036e4:	2000      	movs	r0, #0
 80036e6:	4932      	ldr	r1, [pc, #200]	@ (80037b0 <_dtoa_r+0x700>)
 80036e8:	f7fc fd3e 	bl	8000168 <__aeabi_dsub>
 80036ec:	4602      	mov	r2, r0
 80036ee:	460b      	mov	r3, r1
 80036f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80036f4:	f7fd f962 	bl	80009bc <__aeabi_dcmplt>
 80036f8:	2800      	cmp	r0, #0
 80036fa:	f43f aef6 	beq.w	80034ea <_dtoa_r+0x43a>
 80036fe:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8003700:	1e73      	subs	r3, r6, #1
 8003702:	9313      	str	r3, [sp, #76]	@ 0x4c
 8003704:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8003708:	2b30      	cmp	r3, #48	@ 0x30
 800370a:	d0f8      	beq.n	80036fe <_dtoa_r+0x64e>
 800370c:	9f04      	ldr	r7, [sp, #16]
 800370e:	e73f      	b.n	8003590 <_dtoa_r+0x4e0>
 8003710:	4b29      	ldr	r3, [pc, #164]	@ (80037b8 <_dtoa_r+0x708>)
 8003712:	f7fc fee1 	bl	80004d8 <__aeabi_dmul>
 8003716:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800371a:	e7bc      	b.n	8003696 <_dtoa_r+0x5e6>
 800371c:	d10c      	bne.n	8003738 <_dtoa_r+0x688>
 800371e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003722:	2200      	movs	r2, #0
 8003724:	4b25      	ldr	r3, [pc, #148]	@ (80037bc <_dtoa_r+0x70c>)
 8003726:	f7fc fed7 	bl	80004d8 <__aeabi_dmul>
 800372a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800372e:	f7fd f959 	bl	80009e4 <__aeabi_dcmpge>
 8003732:	2800      	cmp	r0, #0
 8003734:	f000 815b 	beq.w	80039ee <_dtoa_r+0x93e>
 8003738:	2400      	movs	r4, #0
 800373a:	4625      	mov	r5, r4
 800373c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800373e:	4656      	mov	r6, sl
 8003740:	43db      	mvns	r3, r3
 8003742:	9304      	str	r3, [sp, #16]
 8003744:	2700      	movs	r7, #0
 8003746:	4621      	mov	r1, r4
 8003748:	4658      	mov	r0, fp
 800374a:	f000 fbb7 	bl	8003ebc <_Bfree>
 800374e:	2d00      	cmp	r5, #0
 8003750:	d0dc      	beq.n	800370c <_dtoa_r+0x65c>
 8003752:	b12f      	cbz	r7, 8003760 <_dtoa_r+0x6b0>
 8003754:	42af      	cmp	r7, r5
 8003756:	d003      	beq.n	8003760 <_dtoa_r+0x6b0>
 8003758:	4639      	mov	r1, r7
 800375a:	4658      	mov	r0, fp
 800375c:	f000 fbae 	bl	8003ebc <_Bfree>
 8003760:	4629      	mov	r1, r5
 8003762:	4658      	mov	r0, fp
 8003764:	f000 fbaa 	bl	8003ebc <_Bfree>
 8003768:	e7d0      	b.n	800370c <_dtoa_r+0x65c>
 800376a:	9704      	str	r7, [sp, #16]
 800376c:	4633      	mov	r3, r6
 800376e:	461e      	mov	r6, r3
 8003770:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003774:	2a39      	cmp	r2, #57	@ 0x39
 8003776:	d107      	bne.n	8003788 <_dtoa_r+0x6d8>
 8003778:	459a      	cmp	sl, r3
 800377a:	d1f8      	bne.n	800376e <_dtoa_r+0x6be>
 800377c:	9a04      	ldr	r2, [sp, #16]
 800377e:	3201      	adds	r2, #1
 8003780:	9204      	str	r2, [sp, #16]
 8003782:	2230      	movs	r2, #48	@ 0x30
 8003784:	f88a 2000 	strb.w	r2, [sl]
 8003788:	781a      	ldrb	r2, [r3, #0]
 800378a:	3201      	adds	r2, #1
 800378c:	701a      	strb	r2, [r3, #0]
 800378e:	e7bd      	b.n	800370c <_dtoa_r+0x65c>
 8003790:	2200      	movs	r2, #0
 8003792:	4b09      	ldr	r3, [pc, #36]	@ (80037b8 <_dtoa_r+0x708>)
 8003794:	f7fc fea0 	bl	80004d8 <__aeabi_dmul>
 8003798:	2200      	movs	r2, #0
 800379a:	2300      	movs	r3, #0
 800379c:	4604      	mov	r4, r0
 800379e:	460d      	mov	r5, r1
 80037a0:	f7fd f902 	bl	80009a8 <__aeabi_dcmpeq>
 80037a4:	2800      	cmp	r0, #0
 80037a6:	f43f aebc 	beq.w	8003522 <_dtoa_r+0x472>
 80037aa:	e6f1      	b.n	8003590 <_dtoa_r+0x4e0>
 80037ac:	080067a0 	.word	0x080067a0
 80037b0:	3fe00000 	.word	0x3fe00000
 80037b4:	3ff00000 	.word	0x3ff00000
 80037b8:	40240000 	.word	0x40240000
 80037bc:	40140000 	.word	0x40140000
 80037c0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80037c2:	2a00      	cmp	r2, #0
 80037c4:	f000 80db 	beq.w	800397e <_dtoa_r+0x8ce>
 80037c8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80037ca:	2a01      	cmp	r2, #1
 80037cc:	f300 80bf 	bgt.w	800394e <_dtoa_r+0x89e>
 80037d0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80037d2:	2a00      	cmp	r2, #0
 80037d4:	f000 80b7 	beq.w	8003946 <_dtoa_r+0x896>
 80037d8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80037dc:	4646      	mov	r6, r8
 80037de:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80037e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80037e2:	2101      	movs	r1, #1
 80037e4:	441a      	add	r2, r3
 80037e6:	4658      	mov	r0, fp
 80037e8:	4498      	add	r8, r3
 80037ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80037ec:	f000 fc64 	bl	80040b8 <__i2b>
 80037f0:	4605      	mov	r5, r0
 80037f2:	b15e      	cbz	r6, 800380c <_dtoa_r+0x75c>
 80037f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	dd08      	ble.n	800380c <_dtoa_r+0x75c>
 80037fa:	42b3      	cmp	r3, r6
 80037fc:	bfa8      	it	ge
 80037fe:	4633      	movge	r3, r6
 8003800:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003802:	eba8 0803 	sub.w	r8, r8, r3
 8003806:	1af6      	subs	r6, r6, r3
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	9309      	str	r3, [sp, #36]	@ 0x24
 800380c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800380e:	b1f3      	cbz	r3, 800384e <_dtoa_r+0x79e>
 8003810:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003812:	2b00      	cmp	r3, #0
 8003814:	f000 80b7 	beq.w	8003986 <_dtoa_r+0x8d6>
 8003818:	b18c      	cbz	r4, 800383e <_dtoa_r+0x78e>
 800381a:	4629      	mov	r1, r5
 800381c:	4622      	mov	r2, r4
 800381e:	4658      	mov	r0, fp
 8003820:	f000 fd08 	bl	8004234 <__pow5mult>
 8003824:	464a      	mov	r2, r9
 8003826:	4601      	mov	r1, r0
 8003828:	4605      	mov	r5, r0
 800382a:	4658      	mov	r0, fp
 800382c:	f000 fc5a 	bl	80040e4 <__multiply>
 8003830:	4649      	mov	r1, r9
 8003832:	9004      	str	r0, [sp, #16]
 8003834:	4658      	mov	r0, fp
 8003836:	f000 fb41 	bl	8003ebc <_Bfree>
 800383a:	9b04      	ldr	r3, [sp, #16]
 800383c:	4699      	mov	r9, r3
 800383e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003840:	1b1a      	subs	r2, r3, r4
 8003842:	d004      	beq.n	800384e <_dtoa_r+0x79e>
 8003844:	4649      	mov	r1, r9
 8003846:	4658      	mov	r0, fp
 8003848:	f000 fcf4 	bl	8004234 <__pow5mult>
 800384c:	4681      	mov	r9, r0
 800384e:	2101      	movs	r1, #1
 8003850:	4658      	mov	r0, fp
 8003852:	f000 fc31 	bl	80040b8 <__i2b>
 8003856:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003858:	4604      	mov	r4, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	f000 81c9 	beq.w	8003bf2 <_dtoa_r+0xb42>
 8003860:	461a      	mov	r2, r3
 8003862:	4601      	mov	r1, r0
 8003864:	4658      	mov	r0, fp
 8003866:	f000 fce5 	bl	8004234 <__pow5mult>
 800386a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800386c:	4604      	mov	r4, r0
 800386e:	2b01      	cmp	r3, #1
 8003870:	f300 808f 	bgt.w	8003992 <_dtoa_r+0x8e2>
 8003874:	9b02      	ldr	r3, [sp, #8]
 8003876:	2b00      	cmp	r3, #0
 8003878:	f040 8087 	bne.w	800398a <_dtoa_r+0x8da>
 800387c:	9b03      	ldr	r3, [sp, #12]
 800387e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003882:	2b00      	cmp	r3, #0
 8003884:	f040 8083 	bne.w	800398e <_dtoa_r+0x8de>
 8003888:	9b03      	ldr	r3, [sp, #12]
 800388a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800388e:	0d1b      	lsrs	r3, r3, #20
 8003890:	051b      	lsls	r3, r3, #20
 8003892:	b12b      	cbz	r3, 80038a0 <_dtoa_r+0x7f0>
 8003894:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003896:	f108 0801 	add.w	r8, r8, #1
 800389a:	3301      	adds	r3, #1
 800389c:	9309      	str	r3, [sp, #36]	@ 0x24
 800389e:	2301      	movs	r3, #1
 80038a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80038a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	f000 81aa 	beq.w	8003bfe <_dtoa_r+0xb4e>
 80038aa:	6923      	ldr	r3, [r4, #16]
 80038ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80038b0:	6918      	ldr	r0, [r3, #16]
 80038b2:	f000 fbb5 	bl	8004020 <__hi0bits>
 80038b6:	f1c0 0020 	rsb	r0, r0, #32
 80038ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80038bc:	4418      	add	r0, r3
 80038be:	f010 001f 	ands.w	r0, r0, #31
 80038c2:	d071      	beq.n	80039a8 <_dtoa_r+0x8f8>
 80038c4:	f1c0 0320 	rsb	r3, r0, #32
 80038c8:	2b04      	cmp	r3, #4
 80038ca:	dd65      	ble.n	8003998 <_dtoa_r+0x8e8>
 80038cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80038ce:	f1c0 001c 	rsb	r0, r0, #28
 80038d2:	4403      	add	r3, r0
 80038d4:	4480      	add	r8, r0
 80038d6:	4406      	add	r6, r0
 80038d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80038da:	f1b8 0f00 	cmp.w	r8, #0
 80038de:	dd05      	ble.n	80038ec <_dtoa_r+0x83c>
 80038e0:	4649      	mov	r1, r9
 80038e2:	4642      	mov	r2, r8
 80038e4:	4658      	mov	r0, fp
 80038e6:	f000 fcff 	bl	80042e8 <__lshift>
 80038ea:	4681      	mov	r9, r0
 80038ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	dd05      	ble.n	80038fe <_dtoa_r+0x84e>
 80038f2:	4621      	mov	r1, r4
 80038f4:	461a      	mov	r2, r3
 80038f6:	4658      	mov	r0, fp
 80038f8:	f000 fcf6 	bl	80042e8 <__lshift>
 80038fc:	4604      	mov	r4, r0
 80038fe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003900:	2b00      	cmp	r3, #0
 8003902:	d053      	beq.n	80039ac <_dtoa_r+0x8fc>
 8003904:	4621      	mov	r1, r4
 8003906:	4648      	mov	r0, r9
 8003908:	f000 fd5a 	bl	80043c0 <__mcmp>
 800390c:	2800      	cmp	r0, #0
 800390e:	da4d      	bge.n	80039ac <_dtoa_r+0x8fc>
 8003910:	1e7b      	subs	r3, r7, #1
 8003912:	4649      	mov	r1, r9
 8003914:	9304      	str	r3, [sp, #16]
 8003916:	220a      	movs	r2, #10
 8003918:	2300      	movs	r3, #0
 800391a:	4658      	mov	r0, fp
 800391c:	f000 faf0 	bl	8003f00 <__multadd>
 8003920:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003922:	4681      	mov	r9, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	f000 816c 	beq.w	8003c02 <_dtoa_r+0xb52>
 800392a:	2300      	movs	r3, #0
 800392c:	4629      	mov	r1, r5
 800392e:	220a      	movs	r2, #10
 8003930:	4658      	mov	r0, fp
 8003932:	f000 fae5 	bl	8003f00 <__multadd>
 8003936:	9b08      	ldr	r3, [sp, #32]
 8003938:	4605      	mov	r5, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	dc61      	bgt.n	8003a02 <_dtoa_r+0x952>
 800393e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003940:	2b02      	cmp	r3, #2
 8003942:	dc3b      	bgt.n	80039bc <_dtoa_r+0x90c>
 8003944:	e05d      	b.n	8003a02 <_dtoa_r+0x952>
 8003946:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003948:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800394c:	e746      	b.n	80037dc <_dtoa_r+0x72c>
 800394e:	9b07      	ldr	r3, [sp, #28]
 8003950:	1e5c      	subs	r4, r3, #1
 8003952:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003954:	42a3      	cmp	r3, r4
 8003956:	bfbf      	itttt	lt
 8003958:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800395a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800395c:	1ae3      	sublt	r3, r4, r3
 800395e:	18d2      	addlt	r2, r2, r3
 8003960:	bfa8      	it	ge
 8003962:	1b1c      	subge	r4, r3, r4
 8003964:	9b07      	ldr	r3, [sp, #28]
 8003966:	bfbe      	ittt	lt
 8003968:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800396a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800396c:	2400      	movlt	r4, #0
 800396e:	2b00      	cmp	r3, #0
 8003970:	bfb5      	itete	lt
 8003972:	eba8 0603 	sublt.w	r6, r8, r3
 8003976:	4646      	movge	r6, r8
 8003978:	2300      	movlt	r3, #0
 800397a:	9b07      	ldrge	r3, [sp, #28]
 800397c:	e730      	b.n	80037e0 <_dtoa_r+0x730>
 800397e:	4646      	mov	r6, r8
 8003980:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8003982:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8003984:	e735      	b.n	80037f2 <_dtoa_r+0x742>
 8003986:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003988:	e75c      	b.n	8003844 <_dtoa_r+0x794>
 800398a:	2300      	movs	r3, #0
 800398c:	e788      	b.n	80038a0 <_dtoa_r+0x7f0>
 800398e:	9b02      	ldr	r3, [sp, #8]
 8003990:	e786      	b.n	80038a0 <_dtoa_r+0x7f0>
 8003992:	2300      	movs	r3, #0
 8003994:	930a      	str	r3, [sp, #40]	@ 0x28
 8003996:	e788      	b.n	80038aa <_dtoa_r+0x7fa>
 8003998:	d09f      	beq.n	80038da <_dtoa_r+0x82a>
 800399a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800399c:	331c      	adds	r3, #28
 800399e:	441a      	add	r2, r3
 80039a0:	4498      	add	r8, r3
 80039a2:	441e      	add	r6, r3
 80039a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80039a6:	e798      	b.n	80038da <_dtoa_r+0x82a>
 80039a8:	4603      	mov	r3, r0
 80039aa:	e7f6      	b.n	800399a <_dtoa_r+0x8ea>
 80039ac:	9b07      	ldr	r3, [sp, #28]
 80039ae:	9704      	str	r7, [sp, #16]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	dc20      	bgt.n	80039f6 <_dtoa_r+0x946>
 80039b4:	9308      	str	r3, [sp, #32]
 80039b6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	dd1e      	ble.n	80039fa <_dtoa_r+0x94a>
 80039bc:	9b08      	ldr	r3, [sp, #32]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	f47f aebc 	bne.w	800373c <_dtoa_r+0x68c>
 80039c4:	4621      	mov	r1, r4
 80039c6:	2205      	movs	r2, #5
 80039c8:	4658      	mov	r0, fp
 80039ca:	f000 fa99 	bl	8003f00 <__multadd>
 80039ce:	4601      	mov	r1, r0
 80039d0:	4604      	mov	r4, r0
 80039d2:	4648      	mov	r0, r9
 80039d4:	f000 fcf4 	bl	80043c0 <__mcmp>
 80039d8:	2800      	cmp	r0, #0
 80039da:	f77f aeaf 	ble.w	800373c <_dtoa_r+0x68c>
 80039de:	2331      	movs	r3, #49	@ 0x31
 80039e0:	4656      	mov	r6, sl
 80039e2:	f806 3b01 	strb.w	r3, [r6], #1
 80039e6:	9b04      	ldr	r3, [sp, #16]
 80039e8:	3301      	adds	r3, #1
 80039ea:	9304      	str	r3, [sp, #16]
 80039ec:	e6aa      	b.n	8003744 <_dtoa_r+0x694>
 80039ee:	9c07      	ldr	r4, [sp, #28]
 80039f0:	9704      	str	r7, [sp, #16]
 80039f2:	4625      	mov	r5, r4
 80039f4:	e7f3      	b.n	80039de <_dtoa_r+0x92e>
 80039f6:	9b07      	ldr	r3, [sp, #28]
 80039f8:	9308      	str	r3, [sp, #32]
 80039fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f000 8104 	beq.w	8003c0a <_dtoa_r+0xb5a>
 8003a02:	2e00      	cmp	r6, #0
 8003a04:	dd05      	ble.n	8003a12 <_dtoa_r+0x962>
 8003a06:	4629      	mov	r1, r5
 8003a08:	4632      	mov	r2, r6
 8003a0a:	4658      	mov	r0, fp
 8003a0c:	f000 fc6c 	bl	80042e8 <__lshift>
 8003a10:	4605      	mov	r5, r0
 8003a12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d05a      	beq.n	8003ace <_dtoa_r+0xa1e>
 8003a18:	4658      	mov	r0, fp
 8003a1a:	6869      	ldr	r1, [r5, #4]
 8003a1c:	f000 fa0e 	bl	8003e3c <_Balloc>
 8003a20:	4606      	mov	r6, r0
 8003a22:	b928      	cbnz	r0, 8003a30 <_dtoa_r+0x980>
 8003a24:	4602      	mov	r2, r0
 8003a26:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8003a2a:	4b83      	ldr	r3, [pc, #524]	@ (8003c38 <_dtoa_r+0xb88>)
 8003a2c:	f7ff bb54 	b.w	80030d8 <_dtoa_r+0x28>
 8003a30:	692a      	ldr	r2, [r5, #16]
 8003a32:	f105 010c 	add.w	r1, r5, #12
 8003a36:	3202      	adds	r2, #2
 8003a38:	0092      	lsls	r2, r2, #2
 8003a3a:	300c      	adds	r0, #12
 8003a3c:	f001 ff5e 	bl	80058fc <memcpy>
 8003a40:	2201      	movs	r2, #1
 8003a42:	4631      	mov	r1, r6
 8003a44:	4658      	mov	r0, fp
 8003a46:	f000 fc4f 	bl	80042e8 <__lshift>
 8003a4a:	462f      	mov	r7, r5
 8003a4c:	4605      	mov	r5, r0
 8003a4e:	f10a 0301 	add.w	r3, sl, #1
 8003a52:	9307      	str	r3, [sp, #28]
 8003a54:	9b08      	ldr	r3, [sp, #32]
 8003a56:	4453      	add	r3, sl
 8003a58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003a5a:	9b02      	ldr	r3, [sp, #8]
 8003a5c:	f003 0301 	and.w	r3, r3, #1
 8003a60:	930a      	str	r3, [sp, #40]	@ 0x28
 8003a62:	9b07      	ldr	r3, [sp, #28]
 8003a64:	4621      	mov	r1, r4
 8003a66:	3b01      	subs	r3, #1
 8003a68:	4648      	mov	r0, r9
 8003a6a:	9302      	str	r3, [sp, #8]
 8003a6c:	f7ff fa96 	bl	8002f9c <quorem>
 8003a70:	4639      	mov	r1, r7
 8003a72:	9008      	str	r0, [sp, #32]
 8003a74:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8003a78:	4648      	mov	r0, r9
 8003a7a:	f000 fca1 	bl	80043c0 <__mcmp>
 8003a7e:	462a      	mov	r2, r5
 8003a80:	9009      	str	r0, [sp, #36]	@ 0x24
 8003a82:	4621      	mov	r1, r4
 8003a84:	4658      	mov	r0, fp
 8003a86:	f000 fcb7 	bl	80043f8 <__mdiff>
 8003a8a:	68c2      	ldr	r2, [r0, #12]
 8003a8c:	4606      	mov	r6, r0
 8003a8e:	bb02      	cbnz	r2, 8003ad2 <_dtoa_r+0xa22>
 8003a90:	4601      	mov	r1, r0
 8003a92:	4648      	mov	r0, r9
 8003a94:	f000 fc94 	bl	80043c0 <__mcmp>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	4631      	mov	r1, r6
 8003a9c:	4658      	mov	r0, fp
 8003a9e:	920c      	str	r2, [sp, #48]	@ 0x30
 8003aa0:	f000 fa0c 	bl	8003ebc <_Bfree>
 8003aa4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003aa6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8003aa8:	9e07      	ldr	r6, [sp, #28]
 8003aaa:	ea43 0102 	orr.w	r1, r3, r2
 8003aae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003ab0:	4319      	orrs	r1, r3
 8003ab2:	d110      	bne.n	8003ad6 <_dtoa_r+0xa26>
 8003ab4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8003ab8:	d029      	beq.n	8003b0e <_dtoa_r+0xa5e>
 8003aba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	dd02      	ble.n	8003ac6 <_dtoa_r+0xa16>
 8003ac0:	9b08      	ldr	r3, [sp, #32]
 8003ac2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8003ac6:	9b02      	ldr	r3, [sp, #8]
 8003ac8:	f883 8000 	strb.w	r8, [r3]
 8003acc:	e63b      	b.n	8003746 <_dtoa_r+0x696>
 8003ace:	4628      	mov	r0, r5
 8003ad0:	e7bb      	b.n	8003a4a <_dtoa_r+0x99a>
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	e7e1      	b.n	8003a9a <_dtoa_r+0x9ea>
 8003ad6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	db04      	blt.n	8003ae6 <_dtoa_r+0xa36>
 8003adc:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8003ade:	430b      	orrs	r3, r1
 8003ae0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003ae2:	430b      	orrs	r3, r1
 8003ae4:	d120      	bne.n	8003b28 <_dtoa_r+0xa78>
 8003ae6:	2a00      	cmp	r2, #0
 8003ae8:	dded      	ble.n	8003ac6 <_dtoa_r+0xa16>
 8003aea:	4649      	mov	r1, r9
 8003aec:	2201      	movs	r2, #1
 8003aee:	4658      	mov	r0, fp
 8003af0:	f000 fbfa 	bl	80042e8 <__lshift>
 8003af4:	4621      	mov	r1, r4
 8003af6:	4681      	mov	r9, r0
 8003af8:	f000 fc62 	bl	80043c0 <__mcmp>
 8003afc:	2800      	cmp	r0, #0
 8003afe:	dc03      	bgt.n	8003b08 <_dtoa_r+0xa58>
 8003b00:	d1e1      	bne.n	8003ac6 <_dtoa_r+0xa16>
 8003b02:	f018 0f01 	tst.w	r8, #1
 8003b06:	d0de      	beq.n	8003ac6 <_dtoa_r+0xa16>
 8003b08:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8003b0c:	d1d8      	bne.n	8003ac0 <_dtoa_r+0xa10>
 8003b0e:	2339      	movs	r3, #57	@ 0x39
 8003b10:	9a02      	ldr	r2, [sp, #8]
 8003b12:	7013      	strb	r3, [r2, #0]
 8003b14:	4633      	mov	r3, r6
 8003b16:	461e      	mov	r6, r3
 8003b18:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	2a39      	cmp	r2, #57	@ 0x39
 8003b20:	d052      	beq.n	8003bc8 <_dtoa_r+0xb18>
 8003b22:	3201      	adds	r2, #1
 8003b24:	701a      	strb	r2, [r3, #0]
 8003b26:	e60e      	b.n	8003746 <_dtoa_r+0x696>
 8003b28:	2a00      	cmp	r2, #0
 8003b2a:	dd07      	ble.n	8003b3c <_dtoa_r+0xa8c>
 8003b2c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8003b30:	d0ed      	beq.n	8003b0e <_dtoa_r+0xa5e>
 8003b32:	9a02      	ldr	r2, [sp, #8]
 8003b34:	f108 0301 	add.w	r3, r8, #1
 8003b38:	7013      	strb	r3, [r2, #0]
 8003b3a:	e604      	b.n	8003746 <_dtoa_r+0x696>
 8003b3c:	9b07      	ldr	r3, [sp, #28]
 8003b3e:	9a07      	ldr	r2, [sp, #28]
 8003b40:	f803 8c01 	strb.w	r8, [r3, #-1]
 8003b44:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d028      	beq.n	8003b9c <_dtoa_r+0xaec>
 8003b4a:	4649      	mov	r1, r9
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	220a      	movs	r2, #10
 8003b50:	4658      	mov	r0, fp
 8003b52:	f000 f9d5 	bl	8003f00 <__multadd>
 8003b56:	42af      	cmp	r7, r5
 8003b58:	4681      	mov	r9, r0
 8003b5a:	f04f 0300 	mov.w	r3, #0
 8003b5e:	f04f 020a 	mov.w	r2, #10
 8003b62:	4639      	mov	r1, r7
 8003b64:	4658      	mov	r0, fp
 8003b66:	d107      	bne.n	8003b78 <_dtoa_r+0xac8>
 8003b68:	f000 f9ca 	bl	8003f00 <__multadd>
 8003b6c:	4607      	mov	r7, r0
 8003b6e:	4605      	mov	r5, r0
 8003b70:	9b07      	ldr	r3, [sp, #28]
 8003b72:	3301      	adds	r3, #1
 8003b74:	9307      	str	r3, [sp, #28]
 8003b76:	e774      	b.n	8003a62 <_dtoa_r+0x9b2>
 8003b78:	f000 f9c2 	bl	8003f00 <__multadd>
 8003b7c:	4629      	mov	r1, r5
 8003b7e:	4607      	mov	r7, r0
 8003b80:	2300      	movs	r3, #0
 8003b82:	220a      	movs	r2, #10
 8003b84:	4658      	mov	r0, fp
 8003b86:	f000 f9bb 	bl	8003f00 <__multadd>
 8003b8a:	4605      	mov	r5, r0
 8003b8c:	e7f0      	b.n	8003b70 <_dtoa_r+0xac0>
 8003b8e:	9b08      	ldr	r3, [sp, #32]
 8003b90:	2700      	movs	r7, #0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	bfcc      	ite	gt
 8003b96:	461e      	movgt	r6, r3
 8003b98:	2601      	movle	r6, #1
 8003b9a:	4456      	add	r6, sl
 8003b9c:	4649      	mov	r1, r9
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	4658      	mov	r0, fp
 8003ba2:	f000 fba1 	bl	80042e8 <__lshift>
 8003ba6:	4621      	mov	r1, r4
 8003ba8:	4681      	mov	r9, r0
 8003baa:	f000 fc09 	bl	80043c0 <__mcmp>
 8003bae:	2800      	cmp	r0, #0
 8003bb0:	dcb0      	bgt.n	8003b14 <_dtoa_r+0xa64>
 8003bb2:	d102      	bne.n	8003bba <_dtoa_r+0xb0a>
 8003bb4:	f018 0f01 	tst.w	r8, #1
 8003bb8:	d1ac      	bne.n	8003b14 <_dtoa_r+0xa64>
 8003bba:	4633      	mov	r3, r6
 8003bbc:	461e      	mov	r6, r3
 8003bbe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003bc2:	2a30      	cmp	r2, #48	@ 0x30
 8003bc4:	d0fa      	beq.n	8003bbc <_dtoa_r+0xb0c>
 8003bc6:	e5be      	b.n	8003746 <_dtoa_r+0x696>
 8003bc8:	459a      	cmp	sl, r3
 8003bca:	d1a4      	bne.n	8003b16 <_dtoa_r+0xa66>
 8003bcc:	9b04      	ldr	r3, [sp, #16]
 8003bce:	3301      	adds	r3, #1
 8003bd0:	9304      	str	r3, [sp, #16]
 8003bd2:	2331      	movs	r3, #49	@ 0x31
 8003bd4:	f88a 3000 	strb.w	r3, [sl]
 8003bd8:	e5b5      	b.n	8003746 <_dtoa_r+0x696>
 8003bda:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003bdc:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8003c3c <_dtoa_r+0xb8c>
 8003be0:	b11b      	cbz	r3, 8003bea <_dtoa_r+0xb3a>
 8003be2:	f10a 0308 	add.w	r3, sl, #8
 8003be6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8003be8:	6013      	str	r3, [r2, #0]
 8003bea:	4650      	mov	r0, sl
 8003bec:	b017      	add	sp, #92	@ 0x5c
 8003bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bf2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	f77f ae3d 	ble.w	8003874 <_dtoa_r+0x7c4>
 8003bfa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003bfc:	930a      	str	r3, [sp, #40]	@ 0x28
 8003bfe:	2001      	movs	r0, #1
 8003c00:	e65b      	b.n	80038ba <_dtoa_r+0x80a>
 8003c02:	9b08      	ldr	r3, [sp, #32]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f77f aed6 	ble.w	80039b6 <_dtoa_r+0x906>
 8003c0a:	4656      	mov	r6, sl
 8003c0c:	4621      	mov	r1, r4
 8003c0e:	4648      	mov	r0, r9
 8003c10:	f7ff f9c4 	bl	8002f9c <quorem>
 8003c14:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8003c18:	9b08      	ldr	r3, [sp, #32]
 8003c1a:	f806 8b01 	strb.w	r8, [r6], #1
 8003c1e:	eba6 020a 	sub.w	r2, r6, sl
 8003c22:	4293      	cmp	r3, r2
 8003c24:	ddb3      	ble.n	8003b8e <_dtoa_r+0xade>
 8003c26:	4649      	mov	r1, r9
 8003c28:	2300      	movs	r3, #0
 8003c2a:	220a      	movs	r2, #10
 8003c2c:	4658      	mov	r0, fp
 8003c2e:	f000 f967 	bl	8003f00 <__multadd>
 8003c32:	4681      	mov	r9, r0
 8003c34:	e7ea      	b.n	8003c0c <_dtoa_r+0xb5c>
 8003c36:	bf00      	nop
 8003c38:	080066ff 	.word	0x080066ff
 8003c3c:	08006683 	.word	0x08006683

08003c40 <_free_r>:
 8003c40:	b538      	push	{r3, r4, r5, lr}
 8003c42:	4605      	mov	r5, r0
 8003c44:	2900      	cmp	r1, #0
 8003c46:	d040      	beq.n	8003cca <_free_r+0x8a>
 8003c48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c4c:	1f0c      	subs	r4, r1, #4
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	bfb8      	it	lt
 8003c52:	18e4      	addlt	r4, r4, r3
 8003c54:	f000 f8e6 	bl	8003e24 <__malloc_lock>
 8003c58:	4a1c      	ldr	r2, [pc, #112]	@ (8003ccc <_free_r+0x8c>)
 8003c5a:	6813      	ldr	r3, [r2, #0]
 8003c5c:	b933      	cbnz	r3, 8003c6c <_free_r+0x2c>
 8003c5e:	6063      	str	r3, [r4, #4]
 8003c60:	6014      	str	r4, [r2, #0]
 8003c62:	4628      	mov	r0, r5
 8003c64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c68:	f000 b8e2 	b.w	8003e30 <__malloc_unlock>
 8003c6c:	42a3      	cmp	r3, r4
 8003c6e:	d908      	bls.n	8003c82 <_free_r+0x42>
 8003c70:	6820      	ldr	r0, [r4, #0]
 8003c72:	1821      	adds	r1, r4, r0
 8003c74:	428b      	cmp	r3, r1
 8003c76:	bf01      	itttt	eq
 8003c78:	6819      	ldreq	r1, [r3, #0]
 8003c7a:	685b      	ldreq	r3, [r3, #4]
 8003c7c:	1809      	addeq	r1, r1, r0
 8003c7e:	6021      	streq	r1, [r4, #0]
 8003c80:	e7ed      	b.n	8003c5e <_free_r+0x1e>
 8003c82:	461a      	mov	r2, r3
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	b10b      	cbz	r3, 8003c8c <_free_r+0x4c>
 8003c88:	42a3      	cmp	r3, r4
 8003c8a:	d9fa      	bls.n	8003c82 <_free_r+0x42>
 8003c8c:	6811      	ldr	r1, [r2, #0]
 8003c8e:	1850      	adds	r0, r2, r1
 8003c90:	42a0      	cmp	r0, r4
 8003c92:	d10b      	bne.n	8003cac <_free_r+0x6c>
 8003c94:	6820      	ldr	r0, [r4, #0]
 8003c96:	4401      	add	r1, r0
 8003c98:	1850      	adds	r0, r2, r1
 8003c9a:	4283      	cmp	r3, r0
 8003c9c:	6011      	str	r1, [r2, #0]
 8003c9e:	d1e0      	bne.n	8003c62 <_free_r+0x22>
 8003ca0:	6818      	ldr	r0, [r3, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	4408      	add	r0, r1
 8003ca6:	6010      	str	r0, [r2, #0]
 8003ca8:	6053      	str	r3, [r2, #4]
 8003caa:	e7da      	b.n	8003c62 <_free_r+0x22>
 8003cac:	d902      	bls.n	8003cb4 <_free_r+0x74>
 8003cae:	230c      	movs	r3, #12
 8003cb0:	602b      	str	r3, [r5, #0]
 8003cb2:	e7d6      	b.n	8003c62 <_free_r+0x22>
 8003cb4:	6820      	ldr	r0, [r4, #0]
 8003cb6:	1821      	adds	r1, r4, r0
 8003cb8:	428b      	cmp	r3, r1
 8003cba:	bf01      	itttt	eq
 8003cbc:	6819      	ldreq	r1, [r3, #0]
 8003cbe:	685b      	ldreq	r3, [r3, #4]
 8003cc0:	1809      	addeq	r1, r1, r0
 8003cc2:	6021      	streq	r1, [r4, #0]
 8003cc4:	6063      	str	r3, [r4, #4]
 8003cc6:	6054      	str	r4, [r2, #4]
 8003cc8:	e7cb      	b.n	8003c62 <_free_r+0x22>
 8003cca:	bd38      	pop	{r3, r4, r5, pc}
 8003ccc:	20000340 	.word	0x20000340

08003cd0 <malloc>:
 8003cd0:	4b02      	ldr	r3, [pc, #8]	@ (8003cdc <malloc+0xc>)
 8003cd2:	4601      	mov	r1, r0
 8003cd4:	6818      	ldr	r0, [r3, #0]
 8003cd6:	f000 b825 	b.w	8003d24 <_malloc_r>
 8003cda:	bf00      	nop
 8003cdc:	20000018 	.word	0x20000018

08003ce0 <sbrk_aligned>:
 8003ce0:	b570      	push	{r4, r5, r6, lr}
 8003ce2:	4e0f      	ldr	r6, [pc, #60]	@ (8003d20 <sbrk_aligned+0x40>)
 8003ce4:	460c      	mov	r4, r1
 8003ce6:	6831      	ldr	r1, [r6, #0]
 8003ce8:	4605      	mov	r5, r0
 8003cea:	b911      	cbnz	r1, 8003cf2 <sbrk_aligned+0x12>
 8003cec:	f001 fdf6 	bl	80058dc <_sbrk_r>
 8003cf0:	6030      	str	r0, [r6, #0]
 8003cf2:	4621      	mov	r1, r4
 8003cf4:	4628      	mov	r0, r5
 8003cf6:	f001 fdf1 	bl	80058dc <_sbrk_r>
 8003cfa:	1c43      	adds	r3, r0, #1
 8003cfc:	d103      	bne.n	8003d06 <sbrk_aligned+0x26>
 8003cfe:	f04f 34ff 	mov.w	r4, #4294967295
 8003d02:	4620      	mov	r0, r4
 8003d04:	bd70      	pop	{r4, r5, r6, pc}
 8003d06:	1cc4      	adds	r4, r0, #3
 8003d08:	f024 0403 	bic.w	r4, r4, #3
 8003d0c:	42a0      	cmp	r0, r4
 8003d0e:	d0f8      	beq.n	8003d02 <sbrk_aligned+0x22>
 8003d10:	1a21      	subs	r1, r4, r0
 8003d12:	4628      	mov	r0, r5
 8003d14:	f001 fde2 	bl	80058dc <_sbrk_r>
 8003d18:	3001      	adds	r0, #1
 8003d1a:	d1f2      	bne.n	8003d02 <sbrk_aligned+0x22>
 8003d1c:	e7ef      	b.n	8003cfe <sbrk_aligned+0x1e>
 8003d1e:	bf00      	nop
 8003d20:	2000033c 	.word	0x2000033c

08003d24 <_malloc_r>:
 8003d24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d28:	1ccd      	adds	r5, r1, #3
 8003d2a:	f025 0503 	bic.w	r5, r5, #3
 8003d2e:	3508      	adds	r5, #8
 8003d30:	2d0c      	cmp	r5, #12
 8003d32:	bf38      	it	cc
 8003d34:	250c      	movcc	r5, #12
 8003d36:	2d00      	cmp	r5, #0
 8003d38:	4606      	mov	r6, r0
 8003d3a:	db01      	blt.n	8003d40 <_malloc_r+0x1c>
 8003d3c:	42a9      	cmp	r1, r5
 8003d3e:	d904      	bls.n	8003d4a <_malloc_r+0x26>
 8003d40:	230c      	movs	r3, #12
 8003d42:	6033      	str	r3, [r6, #0]
 8003d44:	2000      	movs	r0, #0
 8003d46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003e20 <_malloc_r+0xfc>
 8003d4e:	f000 f869 	bl	8003e24 <__malloc_lock>
 8003d52:	f8d8 3000 	ldr.w	r3, [r8]
 8003d56:	461c      	mov	r4, r3
 8003d58:	bb44      	cbnz	r4, 8003dac <_malloc_r+0x88>
 8003d5a:	4629      	mov	r1, r5
 8003d5c:	4630      	mov	r0, r6
 8003d5e:	f7ff ffbf 	bl	8003ce0 <sbrk_aligned>
 8003d62:	1c43      	adds	r3, r0, #1
 8003d64:	4604      	mov	r4, r0
 8003d66:	d158      	bne.n	8003e1a <_malloc_r+0xf6>
 8003d68:	f8d8 4000 	ldr.w	r4, [r8]
 8003d6c:	4627      	mov	r7, r4
 8003d6e:	2f00      	cmp	r7, #0
 8003d70:	d143      	bne.n	8003dfa <_malloc_r+0xd6>
 8003d72:	2c00      	cmp	r4, #0
 8003d74:	d04b      	beq.n	8003e0e <_malloc_r+0xea>
 8003d76:	6823      	ldr	r3, [r4, #0]
 8003d78:	4639      	mov	r1, r7
 8003d7a:	4630      	mov	r0, r6
 8003d7c:	eb04 0903 	add.w	r9, r4, r3
 8003d80:	f001 fdac 	bl	80058dc <_sbrk_r>
 8003d84:	4581      	cmp	r9, r0
 8003d86:	d142      	bne.n	8003e0e <_malloc_r+0xea>
 8003d88:	6821      	ldr	r1, [r4, #0]
 8003d8a:	4630      	mov	r0, r6
 8003d8c:	1a6d      	subs	r5, r5, r1
 8003d8e:	4629      	mov	r1, r5
 8003d90:	f7ff ffa6 	bl	8003ce0 <sbrk_aligned>
 8003d94:	3001      	adds	r0, #1
 8003d96:	d03a      	beq.n	8003e0e <_malloc_r+0xea>
 8003d98:	6823      	ldr	r3, [r4, #0]
 8003d9a:	442b      	add	r3, r5
 8003d9c:	6023      	str	r3, [r4, #0]
 8003d9e:	f8d8 3000 	ldr.w	r3, [r8]
 8003da2:	685a      	ldr	r2, [r3, #4]
 8003da4:	bb62      	cbnz	r2, 8003e00 <_malloc_r+0xdc>
 8003da6:	f8c8 7000 	str.w	r7, [r8]
 8003daa:	e00f      	b.n	8003dcc <_malloc_r+0xa8>
 8003dac:	6822      	ldr	r2, [r4, #0]
 8003dae:	1b52      	subs	r2, r2, r5
 8003db0:	d420      	bmi.n	8003df4 <_malloc_r+0xd0>
 8003db2:	2a0b      	cmp	r2, #11
 8003db4:	d917      	bls.n	8003de6 <_malloc_r+0xc2>
 8003db6:	1961      	adds	r1, r4, r5
 8003db8:	42a3      	cmp	r3, r4
 8003dba:	6025      	str	r5, [r4, #0]
 8003dbc:	bf18      	it	ne
 8003dbe:	6059      	strne	r1, [r3, #4]
 8003dc0:	6863      	ldr	r3, [r4, #4]
 8003dc2:	bf08      	it	eq
 8003dc4:	f8c8 1000 	streq.w	r1, [r8]
 8003dc8:	5162      	str	r2, [r4, r5]
 8003dca:	604b      	str	r3, [r1, #4]
 8003dcc:	4630      	mov	r0, r6
 8003dce:	f000 f82f 	bl	8003e30 <__malloc_unlock>
 8003dd2:	f104 000b 	add.w	r0, r4, #11
 8003dd6:	1d23      	adds	r3, r4, #4
 8003dd8:	f020 0007 	bic.w	r0, r0, #7
 8003ddc:	1ac2      	subs	r2, r0, r3
 8003dde:	bf1c      	itt	ne
 8003de0:	1a1b      	subne	r3, r3, r0
 8003de2:	50a3      	strne	r3, [r4, r2]
 8003de4:	e7af      	b.n	8003d46 <_malloc_r+0x22>
 8003de6:	6862      	ldr	r2, [r4, #4]
 8003de8:	42a3      	cmp	r3, r4
 8003dea:	bf0c      	ite	eq
 8003dec:	f8c8 2000 	streq.w	r2, [r8]
 8003df0:	605a      	strne	r2, [r3, #4]
 8003df2:	e7eb      	b.n	8003dcc <_malloc_r+0xa8>
 8003df4:	4623      	mov	r3, r4
 8003df6:	6864      	ldr	r4, [r4, #4]
 8003df8:	e7ae      	b.n	8003d58 <_malloc_r+0x34>
 8003dfa:	463c      	mov	r4, r7
 8003dfc:	687f      	ldr	r7, [r7, #4]
 8003dfe:	e7b6      	b.n	8003d6e <_malloc_r+0x4a>
 8003e00:	461a      	mov	r2, r3
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	42a3      	cmp	r3, r4
 8003e06:	d1fb      	bne.n	8003e00 <_malloc_r+0xdc>
 8003e08:	2300      	movs	r3, #0
 8003e0a:	6053      	str	r3, [r2, #4]
 8003e0c:	e7de      	b.n	8003dcc <_malloc_r+0xa8>
 8003e0e:	230c      	movs	r3, #12
 8003e10:	4630      	mov	r0, r6
 8003e12:	6033      	str	r3, [r6, #0]
 8003e14:	f000 f80c 	bl	8003e30 <__malloc_unlock>
 8003e18:	e794      	b.n	8003d44 <_malloc_r+0x20>
 8003e1a:	6005      	str	r5, [r0, #0]
 8003e1c:	e7d6      	b.n	8003dcc <_malloc_r+0xa8>
 8003e1e:	bf00      	nop
 8003e20:	20000340 	.word	0x20000340

08003e24 <__malloc_lock>:
 8003e24:	4801      	ldr	r0, [pc, #4]	@ (8003e2c <__malloc_lock+0x8>)
 8003e26:	f7ff b8a4 	b.w	8002f72 <__retarget_lock_acquire_recursive>
 8003e2a:	bf00      	nop
 8003e2c:	20000338 	.word	0x20000338

08003e30 <__malloc_unlock>:
 8003e30:	4801      	ldr	r0, [pc, #4]	@ (8003e38 <__malloc_unlock+0x8>)
 8003e32:	f7ff b89f 	b.w	8002f74 <__retarget_lock_release_recursive>
 8003e36:	bf00      	nop
 8003e38:	20000338 	.word	0x20000338

08003e3c <_Balloc>:
 8003e3c:	b570      	push	{r4, r5, r6, lr}
 8003e3e:	69c6      	ldr	r6, [r0, #28]
 8003e40:	4604      	mov	r4, r0
 8003e42:	460d      	mov	r5, r1
 8003e44:	b976      	cbnz	r6, 8003e64 <_Balloc+0x28>
 8003e46:	2010      	movs	r0, #16
 8003e48:	f7ff ff42 	bl	8003cd0 <malloc>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	61e0      	str	r0, [r4, #28]
 8003e50:	b920      	cbnz	r0, 8003e5c <_Balloc+0x20>
 8003e52:	216b      	movs	r1, #107	@ 0x6b
 8003e54:	4b17      	ldr	r3, [pc, #92]	@ (8003eb4 <_Balloc+0x78>)
 8003e56:	4818      	ldr	r0, [pc, #96]	@ (8003eb8 <_Balloc+0x7c>)
 8003e58:	f001 fd64 	bl	8005924 <__assert_func>
 8003e5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003e60:	6006      	str	r6, [r0, #0]
 8003e62:	60c6      	str	r6, [r0, #12]
 8003e64:	69e6      	ldr	r6, [r4, #28]
 8003e66:	68f3      	ldr	r3, [r6, #12]
 8003e68:	b183      	cbz	r3, 8003e8c <_Balloc+0x50>
 8003e6a:	69e3      	ldr	r3, [r4, #28]
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003e72:	b9b8      	cbnz	r0, 8003ea4 <_Balloc+0x68>
 8003e74:	2101      	movs	r1, #1
 8003e76:	fa01 f605 	lsl.w	r6, r1, r5
 8003e7a:	1d72      	adds	r2, r6, #5
 8003e7c:	4620      	mov	r0, r4
 8003e7e:	0092      	lsls	r2, r2, #2
 8003e80:	f001 fd6e 	bl	8005960 <_calloc_r>
 8003e84:	b160      	cbz	r0, 8003ea0 <_Balloc+0x64>
 8003e86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8003e8a:	e00e      	b.n	8003eaa <_Balloc+0x6e>
 8003e8c:	2221      	movs	r2, #33	@ 0x21
 8003e8e:	2104      	movs	r1, #4
 8003e90:	4620      	mov	r0, r4
 8003e92:	f001 fd65 	bl	8005960 <_calloc_r>
 8003e96:	69e3      	ldr	r3, [r4, #28]
 8003e98:	60f0      	str	r0, [r6, #12]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d1e4      	bne.n	8003e6a <_Balloc+0x2e>
 8003ea0:	2000      	movs	r0, #0
 8003ea2:	bd70      	pop	{r4, r5, r6, pc}
 8003ea4:	6802      	ldr	r2, [r0, #0]
 8003ea6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8003eaa:	2300      	movs	r3, #0
 8003eac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003eb0:	e7f7      	b.n	8003ea2 <_Balloc+0x66>
 8003eb2:	bf00      	nop
 8003eb4:	08006690 	.word	0x08006690
 8003eb8:	08006710 	.word	0x08006710

08003ebc <_Bfree>:
 8003ebc:	b570      	push	{r4, r5, r6, lr}
 8003ebe:	69c6      	ldr	r6, [r0, #28]
 8003ec0:	4605      	mov	r5, r0
 8003ec2:	460c      	mov	r4, r1
 8003ec4:	b976      	cbnz	r6, 8003ee4 <_Bfree+0x28>
 8003ec6:	2010      	movs	r0, #16
 8003ec8:	f7ff ff02 	bl	8003cd0 <malloc>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	61e8      	str	r0, [r5, #28]
 8003ed0:	b920      	cbnz	r0, 8003edc <_Bfree+0x20>
 8003ed2:	218f      	movs	r1, #143	@ 0x8f
 8003ed4:	4b08      	ldr	r3, [pc, #32]	@ (8003ef8 <_Bfree+0x3c>)
 8003ed6:	4809      	ldr	r0, [pc, #36]	@ (8003efc <_Bfree+0x40>)
 8003ed8:	f001 fd24 	bl	8005924 <__assert_func>
 8003edc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003ee0:	6006      	str	r6, [r0, #0]
 8003ee2:	60c6      	str	r6, [r0, #12]
 8003ee4:	b13c      	cbz	r4, 8003ef6 <_Bfree+0x3a>
 8003ee6:	69eb      	ldr	r3, [r5, #28]
 8003ee8:	6862      	ldr	r2, [r4, #4]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003ef0:	6021      	str	r1, [r4, #0]
 8003ef2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8003ef6:	bd70      	pop	{r4, r5, r6, pc}
 8003ef8:	08006690 	.word	0x08006690
 8003efc:	08006710 	.word	0x08006710

08003f00 <__multadd>:
 8003f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f04:	4607      	mov	r7, r0
 8003f06:	460c      	mov	r4, r1
 8003f08:	461e      	mov	r6, r3
 8003f0a:	2000      	movs	r0, #0
 8003f0c:	690d      	ldr	r5, [r1, #16]
 8003f0e:	f101 0c14 	add.w	ip, r1, #20
 8003f12:	f8dc 3000 	ldr.w	r3, [ip]
 8003f16:	3001      	adds	r0, #1
 8003f18:	b299      	uxth	r1, r3
 8003f1a:	fb02 6101 	mla	r1, r2, r1, r6
 8003f1e:	0c1e      	lsrs	r6, r3, #16
 8003f20:	0c0b      	lsrs	r3, r1, #16
 8003f22:	fb02 3306 	mla	r3, r2, r6, r3
 8003f26:	b289      	uxth	r1, r1
 8003f28:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8003f2c:	4285      	cmp	r5, r0
 8003f2e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8003f32:	f84c 1b04 	str.w	r1, [ip], #4
 8003f36:	dcec      	bgt.n	8003f12 <__multadd+0x12>
 8003f38:	b30e      	cbz	r6, 8003f7e <__multadd+0x7e>
 8003f3a:	68a3      	ldr	r3, [r4, #8]
 8003f3c:	42ab      	cmp	r3, r5
 8003f3e:	dc19      	bgt.n	8003f74 <__multadd+0x74>
 8003f40:	6861      	ldr	r1, [r4, #4]
 8003f42:	4638      	mov	r0, r7
 8003f44:	3101      	adds	r1, #1
 8003f46:	f7ff ff79 	bl	8003e3c <_Balloc>
 8003f4a:	4680      	mov	r8, r0
 8003f4c:	b928      	cbnz	r0, 8003f5a <__multadd+0x5a>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	21ba      	movs	r1, #186	@ 0xba
 8003f52:	4b0c      	ldr	r3, [pc, #48]	@ (8003f84 <__multadd+0x84>)
 8003f54:	480c      	ldr	r0, [pc, #48]	@ (8003f88 <__multadd+0x88>)
 8003f56:	f001 fce5 	bl	8005924 <__assert_func>
 8003f5a:	6922      	ldr	r2, [r4, #16]
 8003f5c:	f104 010c 	add.w	r1, r4, #12
 8003f60:	3202      	adds	r2, #2
 8003f62:	0092      	lsls	r2, r2, #2
 8003f64:	300c      	adds	r0, #12
 8003f66:	f001 fcc9 	bl	80058fc <memcpy>
 8003f6a:	4621      	mov	r1, r4
 8003f6c:	4638      	mov	r0, r7
 8003f6e:	f7ff ffa5 	bl	8003ebc <_Bfree>
 8003f72:	4644      	mov	r4, r8
 8003f74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003f78:	3501      	adds	r5, #1
 8003f7a:	615e      	str	r6, [r3, #20]
 8003f7c:	6125      	str	r5, [r4, #16]
 8003f7e:	4620      	mov	r0, r4
 8003f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f84:	080066ff 	.word	0x080066ff
 8003f88:	08006710 	.word	0x08006710

08003f8c <__s2b>:
 8003f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f90:	4615      	mov	r5, r2
 8003f92:	2209      	movs	r2, #9
 8003f94:	461f      	mov	r7, r3
 8003f96:	3308      	adds	r3, #8
 8003f98:	460c      	mov	r4, r1
 8003f9a:	fb93 f3f2 	sdiv	r3, r3, r2
 8003f9e:	4606      	mov	r6, r0
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	2100      	movs	r1, #0
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	db09      	blt.n	8003fbc <__s2b+0x30>
 8003fa8:	4630      	mov	r0, r6
 8003faa:	f7ff ff47 	bl	8003e3c <_Balloc>
 8003fae:	b940      	cbnz	r0, 8003fc2 <__s2b+0x36>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	21d3      	movs	r1, #211	@ 0xd3
 8003fb4:	4b18      	ldr	r3, [pc, #96]	@ (8004018 <__s2b+0x8c>)
 8003fb6:	4819      	ldr	r0, [pc, #100]	@ (800401c <__s2b+0x90>)
 8003fb8:	f001 fcb4 	bl	8005924 <__assert_func>
 8003fbc:	0052      	lsls	r2, r2, #1
 8003fbe:	3101      	adds	r1, #1
 8003fc0:	e7f0      	b.n	8003fa4 <__s2b+0x18>
 8003fc2:	9b08      	ldr	r3, [sp, #32]
 8003fc4:	2d09      	cmp	r5, #9
 8003fc6:	6143      	str	r3, [r0, #20]
 8003fc8:	f04f 0301 	mov.w	r3, #1
 8003fcc:	6103      	str	r3, [r0, #16]
 8003fce:	dd16      	ble.n	8003ffe <__s2b+0x72>
 8003fd0:	f104 0909 	add.w	r9, r4, #9
 8003fd4:	46c8      	mov	r8, r9
 8003fd6:	442c      	add	r4, r5
 8003fd8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8003fdc:	4601      	mov	r1, r0
 8003fde:	220a      	movs	r2, #10
 8003fe0:	4630      	mov	r0, r6
 8003fe2:	3b30      	subs	r3, #48	@ 0x30
 8003fe4:	f7ff ff8c 	bl	8003f00 <__multadd>
 8003fe8:	45a0      	cmp	r8, r4
 8003fea:	d1f5      	bne.n	8003fd8 <__s2b+0x4c>
 8003fec:	f1a5 0408 	sub.w	r4, r5, #8
 8003ff0:	444c      	add	r4, r9
 8003ff2:	1b2d      	subs	r5, r5, r4
 8003ff4:	1963      	adds	r3, r4, r5
 8003ff6:	42bb      	cmp	r3, r7
 8003ff8:	db04      	blt.n	8004004 <__s2b+0x78>
 8003ffa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ffe:	2509      	movs	r5, #9
 8004000:	340a      	adds	r4, #10
 8004002:	e7f6      	b.n	8003ff2 <__s2b+0x66>
 8004004:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004008:	4601      	mov	r1, r0
 800400a:	220a      	movs	r2, #10
 800400c:	4630      	mov	r0, r6
 800400e:	3b30      	subs	r3, #48	@ 0x30
 8004010:	f7ff ff76 	bl	8003f00 <__multadd>
 8004014:	e7ee      	b.n	8003ff4 <__s2b+0x68>
 8004016:	bf00      	nop
 8004018:	080066ff 	.word	0x080066ff
 800401c:	08006710 	.word	0x08006710

08004020 <__hi0bits>:
 8004020:	4603      	mov	r3, r0
 8004022:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004026:	bf3a      	itte	cc
 8004028:	0403      	lslcc	r3, r0, #16
 800402a:	2010      	movcc	r0, #16
 800402c:	2000      	movcs	r0, #0
 800402e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004032:	bf3c      	itt	cc
 8004034:	021b      	lslcc	r3, r3, #8
 8004036:	3008      	addcc	r0, #8
 8004038:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800403c:	bf3c      	itt	cc
 800403e:	011b      	lslcc	r3, r3, #4
 8004040:	3004      	addcc	r0, #4
 8004042:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004046:	bf3c      	itt	cc
 8004048:	009b      	lslcc	r3, r3, #2
 800404a:	3002      	addcc	r0, #2
 800404c:	2b00      	cmp	r3, #0
 800404e:	db05      	blt.n	800405c <__hi0bits+0x3c>
 8004050:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004054:	f100 0001 	add.w	r0, r0, #1
 8004058:	bf08      	it	eq
 800405a:	2020      	moveq	r0, #32
 800405c:	4770      	bx	lr

0800405e <__lo0bits>:
 800405e:	6803      	ldr	r3, [r0, #0]
 8004060:	4602      	mov	r2, r0
 8004062:	f013 0007 	ands.w	r0, r3, #7
 8004066:	d00b      	beq.n	8004080 <__lo0bits+0x22>
 8004068:	07d9      	lsls	r1, r3, #31
 800406a:	d421      	bmi.n	80040b0 <__lo0bits+0x52>
 800406c:	0798      	lsls	r0, r3, #30
 800406e:	bf49      	itett	mi
 8004070:	085b      	lsrmi	r3, r3, #1
 8004072:	089b      	lsrpl	r3, r3, #2
 8004074:	2001      	movmi	r0, #1
 8004076:	6013      	strmi	r3, [r2, #0]
 8004078:	bf5c      	itt	pl
 800407a:	2002      	movpl	r0, #2
 800407c:	6013      	strpl	r3, [r2, #0]
 800407e:	4770      	bx	lr
 8004080:	b299      	uxth	r1, r3
 8004082:	b909      	cbnz	r1, 8004088 <__lo0bits+0x2a>
 8004084:	2010      	movs	r0, #16
 8004086:	0c1b      	lsrs	r3, r3, #16
 8004088:	b2d9      	uxtb	r1, r3
 800408a:	b909      	cbnz	r1, 8004090 <__lo0bits+0x32>
 800408c:	3008      	adds	r0, #8
 800408e:	0a1b      	lsrs	r3, r3, #8
 8004090:	0719      	lsls	r1, r3, #28
 8004092:	bf04      	itt	eq
 8004094:	091b      	lsreq	r3, r3, #4
 8004096:	3004      	addeq	r0, #4
 8004098:	0799      	lsls	r1, r3, #30
 800409a:	bf04      	itt	eq
 800409c:	089b      	lsreq	r3, r3, #2
 800409e:	3002      	addeq	r0, #2
 80040a0:	07d9      	lsls	r1, r3, #31
 80040a2:	d403      	bmi.n	80040ac <__lo0bits+0x4e>
 80040a4:	085b      	lsrs	r3, r3, #1
 80040a6:	f100 0001 	add.w	r0, r0, #1
 80040aa:	d003      	beq.n	80040b4 <__lo0bits+0x56>
 80040ac:	6013      	str	r3, [r2, #0]
 80040ae:	4770      	bx	lr
 80040b0:	2000      	movs	r0, #0
 80040b2:	4770      	bx	lr
 80040b4:	2020      	movs	r0, #32
 80040b6:	4770      	bx	lr

080040b8 <__i2b>:
 80040b8:	b510      	push	{r4, lr}
 80040ba:	460c      	mov	r4, r1
 80040bc:	2101      	movs	r1, #1
 80040be:	f7ff febd 	bl	8003e3c <_Balloc>
 80040c2:	4602      	mov	r2, r0
 80040c4:	b928      	cbnz	r0, 80040d2 <__i2b+0x1a>
 80040c6:	f240 1145 	movw	r1, #325	@ 0x145
 80040ca:	4b04      	ldr	r3, [pc, #16]	@ (80040dc <__i2b+0x24>)
 80040cc:	4804      	ldr	r0, [pc, #16]	@ (80040e0 <__i2b+0x28>)
 80040ce:	f001 fc29 	bl	8005924 <__assert_func>
 80040d2:	2301      	movs	r3, #1
 80040d4:	6144      	str	r4, [r0, #20]
 80040d6:	6103      	str	r3, [r0, #16]
 80040d8:	bd10      	pop	{r4, pc}
 80040da:	bf00      	nop
 80040dc:	080066ff 	.word	0x080066ff
 80040e0:	08006710 	.word	0x08006710

080040e4 <__multiply>:
 80040e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040e8:	4614      	mov	r4, r2
 80040ea:	690a      	ldr	r2, [r1, #16]
 80040ec:	6923      	ldr	r3, [r4, #16]
 80040ee:	460f      	mov	r7, r1
 80040f0:	429a      	cmp	r2, r3
 80040f2:	bfa2      	ittt	ge
 80040f4:	4623      	movge	r3, r4
 80040f6:	460c      	movge	r4, r1
 80040f8:	461f      	movge	r7, r3
 80040fa:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80040fe:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8004102:	68a3      	ldr	r3, [r4, #8]
 8004104:	6861      	ldr	r1, [r4, #4]
 8004106:	eb0a 0609 	add.w	r6, sl, r9
 800410a:	42b3      	cmp	r3, r6
 800410c:	b085      	sub	sp, #20
 800410e:	bfb8      	it	lt
 8004110:	3101      	addlt	r1, #1
 8004112:	f7ff fe93 	bl	8003e3c <_Balloc>
 8004116:	b930      	cbnz	r0, 8004126 <__multiply+0x42>
 8004118:	4602      	mov	r2, r0
 800411a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800411e:	4b43      	ldr	r3, [pc, #268]	@ (800422c <__multiply+0x148>)
 8004120:	4843      	ldr	r0, [pc, #268]	@ (8004230 <__multiply+0x14c>)
 8004122:	f001 fbff 	bl	8005924 <__assert_func>
 8004126:	f100 0514 	add.w	r5, r0, #20
 800412a:	462b      	mov	r3, r5
 800412c:	2200      	movs	r2, #0
 800412e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004132:	4543      	cmp	r3, r8
 8004134:	d321      	bcc.n	800417a <__multiply+0x96>
 8004136:	f107 0114 	add.w	r1, r7, #20
 800413a:	f104 0214 	add.w	r2, r4, #20
 800413e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8004142:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8004146:	9302      	str	r3, [sp, #8]
 8004148:	1b13      	subs	r3, r2, r4
 800414a:	3b15      	subs	r3, #21
 800414c:	f023 0303 	bic.w	r3, r3, #3
 8004150:	3304      	adds	r3, #4
 8004152:	f104 0715 	add.w	r7, r4, #21
 8004156:	42ba      	cmp	r2, r7
 8004158:	bf38      	it	cc
 800415a:	2304      	movcc	r3, #4
 800415c:	9301      	str	r3, [sp, #4]
 800415e:	9b02      	ldr	r3, [sp, #8]
 8004160:	9103      	str	r1, [sp, #12]
 8004162:	428b      	cmp	r3, r1
 8004164:	d80c      	bhi.n	8004180 <__multiply+0x9c>
 8004166:	2e00      	cmp	r6, #0
 8004168:	dd03      	ble.n	8004172 <__multiply+0x8e>
 800416a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800416e:	2b00      	cmp	r3, #0
 8004170:	d05a      	beq.n	8004228 <__multiply+0x144>
 8004172:	6106      	str	r6, [r0, #16]
 8004174:	b005      	add	sp, #20
 8004176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800417a:	f843 2b04 	str.w	r2, [r3], #4
 800417e:	e7d8      	b.n	8004132 <__multiply+0x4e>
 8004180:	f8b1 a000 	ldrh.w	sl, [r1]
 8004184:	f1ba 0f00 	cmp.w	sl, #0
 8004188:	d023      	beq.n	80041d2 <__multiply+0xee>
 800418a:	46a9      	mov	r9, r5
 800418c:	f04f 0c00 	mov.w	ip, #0
 8004190:	f104 0e14 	add.w	lr, r4, #20
 8004194:	f85e 7b04 	ldr.w	r7, [lr], #4
 8004198:	f8d9 3000 	ldr.w	r3, [r9]
 800419c:	fa1f fb87 	uxth.w	fp, r7
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	fb0a 330b 	mla	r3, sl, fp, r3
 80041a6:	4463      	add	r3, ip
 80041a8:	f8d9 c000 	ldr.w	ip, [r9]
 80041ac:	0c3f      	lsrs	r7, r7, #16
 80041ae:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80041b2:	fb0a c707 	mla	r7, sl, r7, ip
 80041b6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80041c0:	4572      	cmp	r2, lr
 80041c2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80041c6:	f849 3b04 	str.w	r3, [r9], #4
 80041ca:	d8e3      	bhi.n	8004194 <__multiply+0xb0>
 80041cc:	9b01      	ldr	r3, [sp, #4]
 80041ce:	f845 c003 	str.w	ip, [r5, r3]
 80041d2:	9b03      	ldr	r3, [sp, #12]
 80041d4:	3104      	adds	r1, #4
 80041d6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80041da:	f1b9 0f00 	cmp.w	r9, #0
 80041de:	d021      	beq.n	8004224 <__multiply+0x140>
 80041e0:	46ae      	mov	lr, r5
 80041e2:	f04f 0a00 	mov.w	sl, #0
 80041e6:	682b      	ldr	r3, [r5, #0]
 80041e8:	f104 0c14 	add.w	ip, r4, #20
 80041ec:	f8bc b000 	ldrh.w	fp, [ip]
 80041f0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	fb09 770b 	mla	r7, r9, fp, r7
 80041fa:	4457      	add	r7, sl
 80041fc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004200:	f84e 3b04 	str.w	r3, [lr], #4
 8004204:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004208:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800420c:	f8be 3000 	ldrh.w	r3, [lr]
 8004210:	4562      	cmp	r2, ip
 8004212:	fb09 330a 	mla	r3, r9, sl, r3
 8004216:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800421a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800421e:	d8e5      	bhi.n	80041ec <__multiply+0x108>
 8004220:	9f01      	ldr	r7, [sp, #4]
 8004222:	51eb      	str	r3, [r5, r7]
 8004224:	3504      	adds	r5, #4
 8004226:	e79a      	b.n	800415e <__multiply+0x7a>
 8004228:	3e01      	subs	r6, #1
 800422a:	e79c      	b.n	8004166 <__multiply+0x82>
 800422c:	080066ff 	.word	0x080066ff
 8004230:	08006710 	.word	0x08006710

08004234 <__pow5mult>:
 8004234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004238:	4615      	mov	r5, r2
 800423a:	f012 0203 	ands.w	r2, r2, #3
 800423e:	4607      	mov	r7, r0
 8004240:	460e      	mov	r6, r1
 8004242:	d007      	beq.n	8004254 <__pow5mult+0x20>
 8004244:	4c25      	ldr	r4, [pc, #148]	@ (80042dc <__pow5mult+0xa8>)
 8004246:	3a01      	subs	r2, #1
 8004248:	2300      	movs	r3, #0
 800424a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800424e:	f7ff fe57 	bl	8003f00 <__multadd>
 8004252:	4606      	mov	r6, r0
 8004254:	10ad      	asrs	r5, r5, #2
 8004256:	d03d      	beq.n	80042d4 <__pow5mult+0xa0>
 8004258:	69fc      	ldr	r4, [r7, #28]
 800425a:	b97c      	cbnz	r4, 800427c <__pow5mult+0x48>
 800425c:	2010      	movs	r0, #16
 800425e:	f7ff fd37 	bl	8003cd0 <malloc>
 8004262:	4602      	mov	r2, r0
 8004264:	61f8      	str	r0, [r7, #28]
 8004266:	b928      	cbnz	r0, 8004274 <__pow5mult+0x40>
 8004268:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800426c:	4b1c      	ldr	r3, [pc, #112]	@ (80042e0 <__pow5mult+0xac>)
 800426e:	481d      	ldr	r0, [pc, #116]	@ (80042e4 <__pow5mult+0xb0>)
 8004270:	f001 fb58 	bl	8005924 <__assert_func>
 8004274:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004278:	6004      	str	r4, [r0, #0]
 800427a:	60c4      	str	r4, [r0, #12]
 800427c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8004280:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004284:	b94c      	cbnz	r4, 800429a <__pow5mult+0x66>
 8004286:	f240 2171 	movw	r1, #625	@ 0x271
 800428a:	4638      	mov	r0, r7
 800428c:	f7ff ff14 	bl	80040b8 <__i2b>
 8004290:	2300      	movs	r3, #0
 8004292:	4604      	mov	r4, r0
 8004294:	f8c8 0008 	str.w	r0, [r8, #8]
 8004298:	6003      	str	r3, [r0, #0]
 800429a:	f04f 0900 	mov.w	r9, #0
 800429e:	07eb      	lsls	r3, r5, #31
 80042a0:	d50a      	bpl.n	80042b8 <__pow5mult+0x84>
 80042a2:	4631      	mov	r1, r6
 80042a4:	4622      	mov	r2, r4
 80042a6:	4638      	mov	r0, r7
 80042a8:	f7ff ff1c 	bl	80040e4 <__multiply>
 80042ac:	4680      	mov	r8, r0
 80042ae:	4631      	mov	r1, r6
 80042b0:	4638      	mov	r0, r7
 80042b2:	f7ff fe03 	bl	8003ebc <_Bfree>
 80042b6:	4646      	mov	r6, r8
 80042b8:	106d      	asrs	r5, r5, #1
 80042ba:	d00b      	beq.n	80042d4 <__pow5mult+0xa0>
 80042bc:	6820      	ldr	r0, [r4, #0]
 80042be:	b938      	cbnz	r0, 80042d0 <__pow5mult+0x9c>
 80042c0:	4622      	mov	r2, r4
 80042c2:	4621      	mov	r1, r4
 80042c4:	4638      	mov	r0, r7
 80042c6:	f7ff ff0d 	bl	80040e4 <__multiply>
 80042ca:	6020      	str	r0, [r4, #0]
 80042cc:	f8c0 9000 	str.w	r9, [r0]
 80042d0:	4604      	mov	r4, r0
 80042d2:	e7e4      	b.n	800429e <__pow5mult+0x6a>
 80042d4:	4630      	mov	r0, r6
 80042d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042da:	bf00      	nop
 80042dc:	0800676c 	.word	0x0800676c
 80042e0:	08006690 	.word	0x08006690
 80042e4:	08006710 	.word	0x08006710

080042e8 <__lshift>:
 80042e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042ec:	460c      	mov	r4, r1
 80042ee:	4607      	mov	r7, r0
 80042f0:	4691      	mov	r9, r2
 80042f2:	6923      	ldr	r3, [r4, #16]
 80042f4:	6849      	ldr	r1, [r1, #4]
 80042f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80042fa:	68a3      	ldr	r3, [r4, #8]
 80042fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004300:	f108 0601 	add.w	r6, r8, #1
 8004304:	42b3      	cmp	r3, r6
 8004306:	db0b      	blt.n	8004320 <__lshift+0x38>
 8004308:	4638      	mov	r0, r7
 800430a:	f7ff fd97 	bl	8003e3c <_Balloc>
 800430e:	4605      	mov	r5, r0
 8004310:	b948      	cbnz	r0, 8004326 <__lshift+0x3e>
 8004312:	4602      	mov	r2, r0
 8004314:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8004318:	4b27      	ldr	r3, [pc, #156]	@ (80043b8 <__lshift+0xd0>)
 800431a:	4828      	ldr	r0, [pc, #160]	@ (80043bc <__lshift+0xd4>)
 800431c:	f001 fb02 	bl	8005924 <__assert_func>
 8004320:	3101      	adds	r1, #1
 8004322:	005b      	lsls	r3, r3, #1
 8004324:	e7ee      	b.n	8004304 <__lshift+0x1c>
 8004326:	2300      	movs	r3, #0
 8004328:	f100 0114 	add.w	r1, r0, #20
 800432c:	f100 0210 	add.w	r2, r0, #16
 8004330:	4618      	mov	r0, r3
 8004332:	4553      	cmp	r3, sl
 8004334:	db33      	blt.n	800439e <__lshift+0xb6>
 8004336:	6920      	ldr	r0, [r4, #16]
 8004338:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800433c:	f104 0314 	add.w	r3, r4, #20
 8004340:	f019 091f 	ands.w	r9, r9, #31
 8004344:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004348:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800434c:	d02b      	beq.n	80043a6 <__lshift+0xbe>
 800434e:	468a      	mov	sl, r1
 8004350:	2200      	movs	r2, #0
 8004352:	f1c9 0e20 	rsb	lr, r9, #32
 8004356:	6818      	ldr	r0, [r3, #0]
 8004358:	fa00 f009 	lsl.w	r0, r0, r9
 800435c:	4310      	orrs	r0, r2
 800435e:	f84a 0b04 	str.w	r0, [sl], #4
 8004362:	f853 2b04 	ldr.w	r2, [r3], #4
 8004366:	459c      	cmp	ip, r3
 8004368:	fa22 f20e 	lsr.w	r2, r2, lr
 800436c:	d8f3      	bhi.n	8004356 <__lshift+0x6e>
 800436e:	ebac 0304 	sub.w	r3, ip, r4
 8004372:	3b15      	subs	r3, #21
 8004374:	f023 0303 	bic.w	r3, r3, #3
 8004378:	3304      	adds	r3, #4
 800437a:	f104 0015 	add.w	r0, r4, #21
 800437e:	4584      	cmp	ip, r0
 8004380:	bf38      	it	cc
 8004382:	2304      	movcc	r3, #4
 8004384:	50ca      	str	r2, [r1, r3]
 8004386:	b10a      	cbz	r2, 800438c <__lshift+0xa4>
 8004388:	f108 0602 	add.w	r6, r8, #2
 800438c:	3e01      	subs	r6, #1
 800438e:	4638      	mov	r0, r7
 8004390:	4621      	mov	r1, r4
 8004392:	612e      	str	r6, [r5, #16]
 8004394:	f7ff fd92 	bl	8003ebc <_Bfree>
 8004398:	4628      	mov	r0, r5
 800439a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800439e:	f842 0f04 	str.w	r0, [r2, #4]!
 80043a2:	3301      	adds	r3, #1
 80043a4:	e7c5      	b.n	8004332 <__lshift+0x4a>
 80043a6:	3904      	subs	r1, #4
 80043a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80043ac:	459c      	cmp	ip, r3
 80043ae:	f841 2f04 	str.w	r2, [r1, #4]!
 80043b2:	d8f9      	bhi.n	80043a8 <__lshift+0xc0>
 80043b4:	e7ea      	b.n	800438c <__lshift+0xa4>
 80043b6:	bf00      	nop
 80043b8:	080066ff 	.word	0x080066ff
 80043bc:	08006710 	.word	0x08006710

080043c0 <__mcmp>:
 80043c0:	4603      	mov	r3, r0
 80043c2:	690a      	ldr	r2, [r1, #16]
 80043c4:	6900      	ldr	r0, [r0, #16]
 80043c6:	b530      	push	{r4, r5, lr}
 80043c8:	1a80      	subs	r0, r0, r2
 80043ca:	d10e      	bne.n	80043ea <__mcmp+0x2a>
 80043cc:	3314      	adds	r3, #20
 80043ce:	3114      	adds	r1, #20
 80043d0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80043d4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80043d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80043dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80043e0:	4295      	cmp	r5, r2
 80043e2:	d003      	beq.n	80043ec <__mcmp+0x2c>
 80043e4:	d205      	bcs.n	80043f2 <__mcmp+0x32>
 80043e6:	f04f 30ff 	mov.w	r0, #4294967295
 80043ea:	bd30      	pop	{r4, r5, pc}
 80043ec:	42a3      	cmp	r3, r4
 80043ee:	d3f3      	bcc.n	80043d8 <__mcmp+0x18>
 80043f0:	e7fb      	b.n	80043ea <__mcmp+0x2a>
 80043f2:	2001      	movs	r0, #1
 80043f4:	e7f9      	b.n	80043ea <__mcmp+0x2a>
	...

080043f8 <__mdiff>:
 80043f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043fc:	4689      	mov	r9, r1
 80043fe:	4606      	mov	r6, r0
 8004400:	4611      	mov	r1, r2
 8004402:	4648      	mov	r0, r9
 8004404:	4614      	mov	r4, r2
 8004406:	f7ff ffdb 	bl	80043c0 <__mcmp>
 800440a:	1e05      	subs	r5, r0, #0
 800440c:	d112      	bne.n	8004434 <__mdiff+0x3c>
 800440e:	4629      	mov	r1, r5
 8004410:	4630      	mov	r0, r6
 8004412:	f7ff fd13 	bl	8003e3c <_Balloc>
 8004416:	4602      	mov	r2, r0
 8004418:	b928      	cbnz	r0, 8004426 <__mdiff+0x2e>
 800441a:	f240 2137 	movw	r1, #567	@ 0x237
 800441e:	4b3e      	ldr	r3, [pc, #248]	@ (8004518 <__mdiff+0x120>)
 8004420:	483e      	ldr	r0, [pc, #248]	@ (800451c <__mdiff+0x124>)
 8004422:	f001 fa7f 	bl	8005924 <__assert_func>
 8004426:	2301      	movs	r3, #1
 8004428:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800442c:	4610      	mov	r0, r2
 800442e:	b003      	add	sp, #12
 8004430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004434:	bfbc      	itt	lt
 8004436:	464b      	movlt	r3, r9
 8004438:	46a1      	movlt	r9, r4
 800443a:	4630      	mov	r0, r6
 800443c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004440:	bfba      	itte	lt
 8004442:	461c      	movlt	r4, r3
 8004444:	2501      	movlt	r5, #1
 8004446:	2500      	movge	r5, #0
 8004448:	f7ff fcf8 	bl	8003e3c <_Balloc>
 800444c:	4602      	mov	r2, r0
 800444e:	b918      	cbnz	r0, 8004458 <__mdiff+0x60>
 8004450:	f240 2145 	movw	r1, #581	@ 0x245
 8004454:	4b30      	ldr	r3, [pc, #192]	@ (8004518 <__mdiff+0x120>)
 8004456:	e7e3      	b.n	8004420 <__mdiff+0x28>
 8004458:	f100 0b14 	add.w	fp, r0, #20
 800445c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004460:	f109 0310 	add.w	r3, r9, #16
 8004464:	60c5      	str	r5, [r0, #12]
 8004466:	f04f 0c00 	mov.w	ip, #0
 800446a:	f109 0514 	add.w	r5, r9, #20
 800446e:	46d9      	mov	r9, fp
 8004470:	6926      	ldr	r6, [r4, #16]
 8004472:	f104 0e14 	add.w	lr, r4, #20
 8004476:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800447a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800447e:	9301      	str	r3, [sp, #4]
 8004480:	9b01      	ldr	r3, [sp, #4]
 8004482:	f85e 0b04 	ldr.w	r0, [lr], #4
 8004486:	f853 af04 	ldr.w	sl, [r3, #4]!
 800448a:	b281      	uxth	r1, r0
 800448c:	9301      	str	r3, [sp, #4]
 800448e:	fa1f f38a 	uxth.w	r3, sl
 8004492:	1a5b      	subs	r3, r3, r1
 8004494:	0c00      	lsrs	r0, r0, #16
 8004496:	4463      	add	r3, ip
 8004498:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800449c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80044a6:	4576      	cmp	r6, lr
 80044a8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80044ac:	f849 3b04 	str.w	r3, [r9], #4
 80044b0:	d8e6      	bhi.n	8004480 <__mdiff+0x88>
 80044b2:	1b33      	subs	r3, r6, r4
 80044b4:	3b15      	subs	r3, #21
 80044b6:	f023 0303 	bic.w	r3, r3, #3
 80044ba:	3415      	adds	r4, #21
 80044bc:	3304      	adds	r3, #4
 80044be:	42a6      	cmp	r6, r4
 80044c0:	bf38      	it	cc
 80044c2:	2304      	movcc	r3, #4
 80044c4:	441d      	add	r5, r3
 80044c6:	445b      	add	r3, fp
 80044c8:	461e      	mov	r6, r3
 80044ca:	462c      	mov	r4, r5
 80044cc:	4544      	cmp	r4, r8
 80044ce:	d30e      	bcc.n	80044ee <__mdiff+0xf6>
 80044d0:	f108 0103 	add.w	r1, r8, #3
 80044d4:	1b49      	subs	r1, r1, r5
 80044d6:	f021 0103 	bic.w	r1, r1, #3
 80044da:	3d03      	subs	r5, #3
 80044dc:	45a8      	cmp	r8, r5
 80044de:	bf38      	it	cc
 80044e0:	2100      	movcc	r1, #0
 80044e2:	440b      	add	r3, r1
 80044e4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80044e8:	b199      	cbz	r1, 8004512 <__mdiff+0x11a>
 80044ea:	6117      	str	r7, [r2, #16]
 80044ec:	e79e      	b.n	800442c <__mdiff+0x34>
 80044ee:	46e6      	mov	lr, ip
 80044f0:	f854 1b04 	ldr.w	r1, [r4], #4
 80044f4:	fa1f fc81 	uxth.w	ip, r1
 80044f8:	44f4      	add	ip, lr
 80044fa:	0c08      	lsrs	r0, r1, #16
 80044fc:	4471      	add	r1, lr
 80044fe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8004502:	b289      	uxth	r1, r1
 8004504:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004508:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800450c:	f846 1b04 	str.w	r1, [r6], #4
 8004510:	e7dc      	b.n	80044cc <__mdiff+0xd4>
 8004512:	3f01      	subs	r7, #1
 8004514:	e7e6      	b.n	80044e4 <__mdiff+0xec>
 8004516:	bf00      	nop
 8004518:	080066ff 	.word	0x080066ff
 800451c:	08006710 	.word	0x08006710

08004520 <__ulp>:
 8004520:	4b0e      	ldr	r3, [pc, #56]	@ (800455c <__ulp+0x3c>)
 8004522:	400b      	ands	r3, r1
 8004524:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8004528:	2b00      	cmp	r3, #0
 800452a:	dc08      	bgt.n	800453e <__ulp+0x1e>
 800452c:	425b      	negs	r3, r3
 800452e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8004532:	ea4f 5223 	mov.w	r2, r3, asr #20
 8004536:	da04      	bge.n	8004542 <__ulp+0x22>
 8004538:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800453c:	4113      	asrs	r3, r2
 800453e:	2200      	movs	r2, #0
 8004540:	e008      	b.n	8004554 <__ulp+0x34>
 8004542:	f1a2 0314 	sub.w	r3, r2, #20
 8004546:	2b1e      	cmp	r3, #30
 8004548:	bfd6      	itet	le
 800454a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800454e:	2201      	movgt	r2, #1
 8004550:	40da      	lsrle	r2, r3
 8004552:	2300      	movs	r3, #0
 8004554:	4619      	mov	r1, r3
 8004556:	4610      	mov	r0, r2
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	7ff00000 	.word	0x7ff00000

08004560 <__b2d>:
 8004560:	6902      	ldr	r2, [r0, #16]
 8004562:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004564:	f100 0614 	add.w	r6, r0, #20
 8004568:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800456c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8004570:	4f1e      	ldr	r7, [pc, #120]	@ (80045ec <__b2d+0x8c>)
 8004572:	4620      	mov	r0, r4
 8004574:	f7ff fd54 	bl	8004020 <__hi0bits>
 8004578:	4603      	mov	r3, r0
 800457a:	f1c0 0020 	rsb	r0, r0, #32
 800457e:	2b0a      	cmp	r3, #10
 8004580:	f1a2 0504 	sub.w	r5, r2, #4
 8004584:	6008      	str	r0, [r1, #0]
 8004586:	dc12      	bgt.n	80045ae <__b2d+0x4e>
 8004588:	42ae      	cmp	r6, r5
 800458a:	bf2c      	ite	cs
 800458c:	2200      	movcs	r2, #0
 800458e:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8004592:	f1c3 0c0b 	rsb	ip, r3, #11
 8004596:	3315      	adds	r3, #21
 8004598:	fa24 fe0c 	lsr.w	lr, r4, ip
 800459c:	fa04 f303 	lsl.w	r3, r4, r3
 80045a0:	fa22 f20c 	lsr.w	r2, r2, ip
 80045a4:	ea4e 0107 	orr.w	r1, lr, r7
 80045a8:	431a      	orrs	r2, r3
 80045aa:	4610      	mov	r0, r2
 80045ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045ae:	42ae      	cmp	r6, r5
 80045b0:	bf36      	itet	cc
 80045b2:	f1a2 0508 	subcc.w	r5, r2, #8
 80045b6:	2200      	movcs	r2, #0
 80045b8:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80045bc:	3b0b      	subs	r3, #11
 80045be:	d012      	beq.n	80045e6 <__b2d+0x86>
 80045c0:	f1c3 0720 	rsb	r7, r3, #32
 80045c4:	fa22 f107 	lsr.w	r1, r2, r7
 80045c8:	409c      	lsls	r4, r3
 80045ca:	430c      	orrs	r4, r1
 80045cc:	42b5      	cmp	r5, r6
 80045ce:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 80045d2:	bf94      	ite	ls
 80045d4:	2400      	movls	r4, #0
 80045d6:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 80045da:	409a      	lsls	r2, r3
 80045dc:	40fc      	lsrs	r4, r7
 80045de:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80045e2:	4322      	orrs	r2, r4
 80045e4:	e7e1      	b.n	80045aa <__b2d+0x4a>
 80045e6:	ea44 0107 	orr.w	r1, r4, r7
 80045ea:	e7de      	b.n	80045aa <__b2d+0x4a>
 80045ec:	3ff00000 	.word	0x3ff00000

080045f0 <__d2b>:
 80045f0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80045f4:	2101      	movs	r1, #1
 80045f6:	4690      	mov	r8, r2
 80045f8:	4699      	mov	r9, r3
 80045fa:	9e08      	ldr	r6, [sp, #32]
 80045fc:	f7ff fc1e 	bl	8003e3c <_Balloc>
 8004600:	4604      	mov	r4, r0
 8004602:	b930      	cbnz	r0, 8004612 <__d2b+0x22>
 8004604:	4602      	mov	r2, r0
 8004606:	f240 310f 	movw	r1, #783	@ 0x30f
 800460a:	4b23      	ldr	r3, [pc, #140]	@ (8004698 <__d2b+0xa8>)
 800460c:	4823      	ldr	r0, [pc, #140]	@ (800469c <__d2b+0xac>)
 800460e:	f001 f989 	bl	8005924 <__assert_func>
 8004612:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004616:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800461a:	b10d      	cbz	r5, 8004620 <__d2b+0x30>
 800461c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004620:	9301      	str	r3, [sp, #4]
 8004622:	f1b8 0300 	subs.w	r3, r8, #0
 8004626:	d024      	beq.n	8004672 <__d2b+0x82>
 8004628:	4668      	mov	r0, sp
 800462a:	9300      	str	r3, [sp, #0]
 800462c:	f7ff fd17 	bl	800405e <__lo0bits>
 8004630:	e9dd 1200 	ldrd	r1, r2, [sp]
 8004634:	b1d8      	cbz	r0, 800466e <__d2b+0x7e>
 8004636:	f1c0 0320 	rsb	r3, r0, #32
 800463a:	fa02 f303 	lsl.w	r3, r2, r3
 800463e:	430b      	orrs	r3, r1
 8004640:	40c2      	lsrs	r2, r0
 8004642:	6163      	str	r3, [r4, #20]
 8004644:	9201      	str	r2, [sp, #4]
 8004646:	9b01      	ldr	r3, [sp, #4]
 8004648:	2b00      	cmp	r3, #0
 800464a:	bf0c      	ite	eq
 800464c:	2201      	moveq	r2, #1
 800464e:	2202      	movne	r2, #2
 8004650:	61a3      	str	r3, [r4, #24]
 8004652:	6122      	str	r2, [r4, #16]
 8004654:	b1ad      	cbz	r5, 8004682 <__d2b+0x92>
 8004656:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800465a:	4405      	add	r5, r0
 800465c:	6035      	str	r5, [r6, #0]
 800465e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8004662:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004664:	6018      	str	r0, [r3, #0]
 8004666:	4620      	mov	r0, r4
 8004668:	b002      	add	sp, #8
 800466a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800466e:	6161      	str	r1, [r4, #20]
 8004670:	e7e9      	b.n	8004646 <__d2b+0x56>
 8004672:	a801      	add	r0, sp, #4
 8004674:	f7ff fcf3 	bl	800405e <__lo0bits>
 8004678:	9b01      	ldr	r3, [sp, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	6163      	str	r3, [r4, #20]
 800467e:	3020      	adds	r0, #32
 8004680:	e7e7      	b.n	8004652 <__d2b+0x62>
 8004682:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8004686:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800468a:	6030      	str	r0, [r6, #0]
 800468c:	6918      	ldr	r0, [r3, #16]
 800468e:	f7ff fcc7 	bl	8004020 <__hi0bits>
 8004692:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004696:	e7e4      	b.n	8004662 <__d2b+0x72>
 8004698:	080066ff 	.word	0x080066ff
 800469c:	08006710 	.word	0x08006710

080046a0 <__ratio>:
 80046a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046a4:	b085      	sub	sp, #20
 80046a6:	e9cd 1000 	strd	r1, r0, [sp]
 80046aa:	a902      	add	r1, sp, #8
 80046ac:	f7ff ff58 	bl	8004560 <__b2d>
 80046b0:	468b      	mov	fp, r1
 80046b2:	4606      	mov	r6, r0
 80046b4:	460f      	mov	r7, r1
 80046b6:	9800      	ldr	r0, [sp, #0]
 80046b8:	a903      	add	r1, sp, #12
 80046ba:	f7ff ff51 	bl	8004560 <__b2d>
 80046be:	460d      	mov	r5, r1
 80046c0:	9b01      	ldr	r3, [sp, #4]
 80046c2:	4689      	mov	r9, r1
 80046c4:	6919      	ldr	r1, [r3, #16]
 80046c6:	9b00      	ldr	r3, [sp, #0]
 80046c8:	4604      	mov	r4, r0
 80046ca:	691b      	ldr	r3, [r3, #16]
 80046cc:	4630      	mov	r0, r6
 80046ce:	1ac9      	subs	r1, r1, r3
 80046d0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80046d4:	1a9b      	subs	r3, r3, r2
 80046d6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80046da:	2b00      	cmp	r3, #0
 80046dc:	bfcd      	iteet	gt
 80046de:	463a      	movgt	r2, r7
 80046e0:	462a      	movle	r2, r5
 80046e2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80046e6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80046ea:	bfd8      	it	le
 80046ec:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80046f0:	464b      	mov	r3, r9
 80046f2:	4622      	mov	r2, r4
 80046f4:	4659      	mov	r1, fp
 80046f6:	f7fc f819 	bl	800072c <__aeabi_ddiv>
 80046fa:	b005      	add	sp, #20
 80046fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004700 <__copybits>:
 8004700:	3901      	subs	r1, #1
 8004702:	b570      	push	{r4, r5, r6, lr}
 8004704:	1149      	asrs	r1, r1, #5
 8004706:	6914      	ldr	r4, [r2, #16]
 8004708:	3101      	adds	r1, #1
 800470a:	f102 0314 	add.w	r3, r2, #20
 800470e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004712:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8004716:	1f05      	subs	r5, r0, #4
 8004718:	42a3      	cmp	r3, r4
 800471a:	d30c      	bcc.n	8004736 <__copybits+0x36>
 800471c:	1aa3      	subs	r3, r4, r2
 800471e:	3b11      	subs	r3, #17
 8004720:	f023 0303 	bic.w	r3, r3, #3
 8004724:	3211      	adds	r2, #17
 8004726:	42a2      	cmp	r2, r4
 8004728:	bf88      	it	hi
 800472a:	2300      	movhi	r3, #0
 800472c:	4418      	add	r0, r3
 800472e:	2300      	movs	r3, #0
 8004730:	4288      	cmp	r0, r1
 8004732:	d305      	bcc.n	8004740 <__copybits+0x40>
 8004734:	bd70      	pop	{r4, r5, r6, pc}
 8004736:	f853 6b04 	ldr.w	r6, [r3], #4
 800473a:	f845 6f04 	str.w	r6, [r5, #4]!
 800473e:	e7eb      	b.n	8004718 <__copybits+0x18>
 8004740:	f840 3b04 	str.w	r3, [r0], #4
 8004744:	e7f4      	b.n	8004730 <__copybits+0x30>

08004746 <__any_on>:
 8004746:	f100 0214 	add.w	r2, r0, #20
 800474a:	6900      	ldr	r0, [r0, #16]
 800474c:	114b      	asrs	r3, r1, #5
 800474e:	4298      	cmp	r0, r3
 8004750:	b510      	push	{r4, lr}
 8004752:	db11      	blt.n	8004778 <__any_on+0x32>
 8004754:	dd0a      	ble.n	800476c <__any_on+0x26>
 8004756:	f011 011f 	ands.w	r1, r1, #31
 800475a:	d007      	beq.n	800476c <__any_on+0x26>
 800475c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8004760:	fa24 f001 	lsr.w	r0, r4, r1
 8004764:	fa00 f101 	lsl.w	r1, r0, r1
 8004768:	428c      	cmp	r4, r1
 800476a:	d10b      	bne.n	8004784 <__any_on+0x3e>
 800476c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004770:	4293      	cmp	r3, r2
 8004772:	d803      	bhi.n	800477c <__any_on+0x36>
 8004774:	2000      	movs	r0, #0
 8004776:	bd10      	pop	{r4, pc}
 8004778:	4603      	mov	r3, r0
 800477a:	e7f7      	b.n	800476c <__any_on+0x26>
 800477c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004780:	2900      	cmp	r1, #0
 8004782:	d0f5      	beq.n	8004770 <__any_on+0x2a>
 8004784:	2001      	movs	r0, #1
 8004786:	e7f6      	b.n	8004776 <__any_on+0x30>

08004788 <sulp>:
 8004788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800478c:	460f      	mov	r7, r1
 800478e:	4690      	mov	r8, r2
 8004790:	f7ff fec6 	bl	8004520 <__ulp>
 8004794:	4604      	mov	r4, r0
 8004796:	460d      	mov	r5, r1
 8004798:	f1b8 0f00 	cmp.w	r8, #0
 800479c:	d011      	beq.n	80047c2 <sulp+0x3a>
 800479e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80047a2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	dd0b      	ble.n	80047c2 <sulp+0x3a>
 80047aa:	2400      	movs	r4, #0
 80047ac:	051b      	lsls	r3, r3, #20
 80047ae:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80047b2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80047b6:	4622      	mov	r2, r4
 80047b8:	462b      	mov	r3, r5
 80047ba:	f7fb fe8d 	bl	80004d8 <__aeabi_dmul>
 80047be:	4604      	mov	r4, r0
 80047c0:	460d      	mov	r5, r1
 80047c2:	4620      	mov	r0, r4
 80047c4:	4629      	mov	r1, r5
 80047c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047ca:	0000      	movs	r0, r0
 80047cc:	0000      	movs	r0, r0
	...

080047d0 <_strtod_l>:
 80047d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047d4:	b09f      	sub	sp, #124	@ 0x7c
 80047d6:	9217      	str	r2, [sp, #92]	@ 0x5c
 80047d8:	2200      	movs	r2, #0
 80047da:	460c      	mov	r4, r1
 80047dc:	921a      	str	r2, [sp, #104]	@ 0x68
 80047de:	f04f 0a00 	mov.w	sl, #0
 80047e2:	f04f 0b00 	mov.w	fp, #0
 80047e6:	460a      	mov	r2, r1
 80047e8:	9005      	str	r0, [sp, #20]
 80047ea:	9219      	str	r2, [sp, #100]	@ 0x64
 80047ec:	7811      	ldrb	r1, [r2, #0]
 80047ee:	292b      	cmp	r1, #43	@ 0x2b
 80047f0:	d048      	beq.n	8004884 <_strtod_l+0xb4>
 80047f2:	d836      	bhi.n	8004862 <_strtod_l+0x92>
 80047f4:	290d      	cmp	r1, #13
 80047f6:	d830      	bhi.n	800485a <_strtod_l+0x8a>
 80047f8:	2908      	cmp	r1, #8
 80047fa:	d830      	bhi.n	800485e <_strtod_l+0x8e>
 80047fc:	2900      	cmp	r1, #0
 80047fe:	d039      	beq.n	8004874 <_strtod_l+0xa4>
 8004800:	2200      	movs	r2, #0
 8004802:	920b      	str	r2, [sp, #44]	@ 0x2c
 8004804:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8004806:	782a      	ldrb	r2, [r5, #0]
 8004808:	2a30      	cmp	r2, #48	@ 0x30
 800480a:	f040 80b1 	bne.w	8004970 <_strtod_l+0x1a0>
 800480e:	786a      	ldrb	r2, [r5, #1]
 8004810:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8004814:	2a58      	cmp	r2, #88	@ 0x58
 8004816:	d16c      	bne.n	80048f2 <_strtod_l+0x122>
 8004818:	9302      	str	r3, [sp, #8]
 800481a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800481c:	4a8e      	ldr	r2, [pc, #568]	@ (8004a58 <_strtod_l+0x288>)
 800481e:	9301      	str	r3, [sp, #4]
 8004820:	ab1a      	add	r3, sp, #104	@ 0x68
 8004822:	9300      	str	r3, [sp, #0]
 8004824:	9805      	ldr	r0, [sp, #20]
 8004826:	ab1b      	add	r3, sp, #108	@ 0x6c
 8004828:	a919      	add	r1, sp, #100	@ 0x64
 800482a:	f001 f915 	bl	8005a58 <__gethex>
 800482e:	f010 060f 	ands.w	r6, r0, #15
 8004832:	4604      	mov	r4, r0
 8004834:	d005      	beq.n	8004842 <_strtod_l+0x72>
 8004836:	2e06      	cmp	r6, #6
 8004838:	d126      	bne.n	8004888 <_strtod_l+0xb8>
 800483a:	2300      	movs	r3, #0
 800483c:	3501      	adds	r5, #1
 800483e:	9519      	str	r5, [sp, #100]	@ 0x64
 8004840:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004842:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004844:	2b00      	cmp	r3, #0
 8004846:	f040 8584 	bne.w	8005352 <_strtod_l+0xb82>
 800484a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800484c:	b1bb      	cbz	r3, 800487e <_strtod_l+0xae>
 800484e:	4650      	mov	r0, sl
 8004850:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8004854:	b01f      	add	sp, #124	@ 0x7c
 8004856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800485a:	2920      	cmp	r1, #32
 800485c:	d1d0      	bne.n	8004800 <_strtod_l+0x30>
 800485e:	3201      	adds	r2, #1
 8004860:	e7c3      	b.n	80047ea <_strtod_l+0x1a>
 8004862:	292d      	cmp	r1, #45	@ 0x2d
 8004864:	d1cc      	bne.n	8004800 <_strtod_l+0x30>
 8004866:	2101      	movs	r1, #1
 8004868:	910b      	str	r1, [sp, #44]	@ 0x2c
 800486a:	1c51      	adds	r1, r2, #1
 800486c:	9119      	str	r1, [sp, #100]	@ 0x64
 800486e:	7852      	ldrb	r2, [r2, #1]
 8004870:	2a00      	cmp	r2, #0
 8004872:	d1c7      	bne.n	8004804 <_strtod_l+0x34>
 8004874:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004876:	9419      	str	r4, [sp, #100]	@ 0x64
 8004878:	2b00      	cmp	r3, #0
 800487a:	f040 8568 	bne.w	800534e <_strtod_l+0xb7e>
 800487e:	4650      	mov	r0, sl
 8004880:	4659      	mov	r1, fp
 8004882:	e7e7      	b.n	8004854 <_strtod_l+0x84>
 8004884:	2100      	movs	r1, #0
 8004886:	e7ef      	b.n	8004868 <_strtod_l+0x98>
 8004888:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800488a:	b13a      	cbz	r2, 800489c <_strtod_l+0xcc>
 800488c:	2135      	movs	r1, #53	@ 0x35
 800488e:	a81c      	add	r0, sp, #112	@ 0x70
 8004890:	f7ff ff36 	bl	8004700 <__copybits>
 8004894:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004896:	9805      	ldr	r0, [sp, #20]
 8004898:	f7ff fb10 	bl	8003ebc <_Bfree>
 800489c:	3e01      	subs	r6, #1
 800489e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80048a0:	2e04      	cmp	r6, #4
 80048a2:	d806      	bhi.n	80048b2 <_strtod_l+0xe2>
 80048a4:	e8df f006 	tbb	[pc, r6]
 80048a8:	201d0314 	.word	0x201d0314
 80048ac:	14          	.byte	0x14
 80048ad:	00          	.byte	0x00
 80048ae:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80048b2:	05e1      	lsls	r1, r4, #23
 80048b4:	bf48      	it	mi
 80048b6:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80048ba:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80048be:	0d1b      	lsrs	r3, r3, #20
 80048c0:	051b      	lsls	r3, r3, #20
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1bd      	bne.n	8004842 <_strtod_l+0x72>
 80048c6:	f7fe fb29 	bl	8002f1c <__errno>
 80048ca:	2322      	movs	r3, #34	@ 0x22
 80048cc:	6003      	str	r3, [r0, #0]
 80048ce:	e7b8      	b.n	8004842 <_strtod_l+0x72>
 80048d0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80048d4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80048d8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80048dc:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80048e0:	e7e7      	b.n	80048b2 <_strtod_l+0xe2>
 80048e2:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8004a5c <_strtod_l+0x28c>
 80048e6:	e7e4      	b.n	80048b2 <_strtod_l+0xe2>
 80048e8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80048ec:	f04f 3aff 	mov.w	sl, #4294967295
 80048f0:	e7df      	b.n	80048b2 <_strtod_l+0xe2>
 80048f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80048f4:	1c5a      	adds	r2, r3, #1
 80048f6:	9219      	str	r2, [sp, #100]	@ 0x64
 80048f8:	785b      	ldrb	r3, [r3, #1]
 80048fa:	2b30      	cmp	r3, #48	@ 0x30
 80048fc:	d0f9      	beq.n	80048f2 <_strtod_l+0x122>
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d09f      	beq.n	8004842 <_strtod_l+0x72>
 8004902:	2301      	movs	r3, #1
 8004904:	9309      	str	r3, [sp, #36]	@ 0x24
 8004906:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004908:	220a      	movs	r2, #10
 800490a:	930c      	str	r3, [sp, #48]	@ 0x30
 800490c:	2300      	movs	r3, #0
 800490e:	461f      	mov	r7, r3
 8004910:	9308      	str	r3, [sp, #32]
 8004912:	930a      	str	r3, [sp, #40]	@ 0x28
 8004914:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8004916:	7805      	ldrb	r5, [r0, #0]
 8004918:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800491c:	b2d9      	uxtb	r1, r3
 800491e:	2909      	cmp	r1, #9
 8004920:	d928      	bls.n	8004974 <_strtod_l+0x1a4>
 8004922:	2201      	movs	r2, #1
 8004924:	494e      	ldr	r1, [pc, #312]	@ (8004a60 <_strtod_l+0x290>)
 8004926:	f000 ffc7 	bl	80058b8 <strncmp>
 800492a:	2800      	cmp	r0, #0
 800492c:	d032      	beq.n	8004994 <_strtod_l+0x1c4>
 800492e:	2000      	movs	r0, #0
 8004930:	462a      	mov	r2, r5
 8004932:	4681      	mov	r9, r0
 8004934:	463d      	mov	r5, r7
 8004936:	4603      	mov	r3, r0
 8004938:	2a65      	cmp	r2, #101	@ 0x65
 800493a:	d001      	beq.n	8004940 <_strtod_l+0x170>
 800493c:	2a45      	cmp	r2, #69	@ 0x45
 800493e:	d114      	bne.n	800496a <_strtod_l+0x19a>
 8004940:	b91d      	cbnz	r5, 800494a <_strtod_l+0x17a>
 8004942:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004944:	4302      	orrs	r2, r0
 8004946:	d095      	beq.n	8004874 <_strtod_l+0xa4>
 8004948:	2500      	movs	r5, #0
 800494a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800494c:	1c62      	adds	r2, r4, #1
 800494e:	9219      	str	r2, [sp, #100]	@ 0x64
 8004950:	7862      	ldrb	r2, [r4, #1]
 8004952:	2a2b      	cmp	r2, #43	@ 0x2b
 8004954:	d077      	beq.n	8004a46 <_strtod_l+0x276>
 8004956:	2a2d      	cmp	r2, #45	@ 0x2d
 8004958:	d07b      	beq.n	8004a52 <_strtod_l+0x282>
 800495a:	f04f 0c00 	mov.w	ip, #0
 800495e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8004962:	2909      	cmp	r1, #9
 8004964:	f240 8082 	bls.w	8004a6c <_strtod_l+0x29c>
 8004968:	9419      	str	r4, [sp, #100]	@ 0x64
 800496a:	f04f 0800 	mov.w	r8, #0
 800496e:	e0a2      	b.n	8004ab6 <_strtod_l+0x2e6>
 8004970:	2300      	movs	r3, #0
 8004972:	e7c7      	b.n	8004904 <_strtod_l+0x134>
 8004974:	2f08      	cmp	r7, #8
 8004976:	bfd5      	itete	le
 8004978:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800497a:	9908      	ldrgt	r1, [sp, #32]
 800497c:	fb02 3301 	mlale	r3, r2, r1, r3
 8004980:	fb02 3301 	mlagt	r3, r2, r1, r3
 8004984:	f100 0001 	add.w	r0, r0, #1
 8004988:	bfd4      	ite	le
 800498a:	930a      	strle	r3, [sp, #40]	@ 0x28
 800498c:	9308      	strgt	r3, [sp, #32]
 800498e:	3701      	adds	r7, #1
 8004990:	9019      	str	r0, [sp, #100]	@ 0x64
 8004992:	e7bf      	b.n	8004914 <_strtod_l+0x144>
 8004994:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004996:	1c5a      	adds	r2, r3, #1
 8004998:	9219      	str	r2, [sp, #100]	@ 0x64
 800499a:	785a      	ldrb	r2, [r3, #1]
 800499c:	b37f      	cbz	r7, 80049fe <_strtod_l+0x22e>
 800499e:	4681      	mov	r9, r0
 80049a0:	463d      	mov	r5, r7
 80049a2:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80049a6:	2b09      	cmp	r3, #9
 80049a8:	d912      	bls.n	80049d0 <_strtod_l+0x200>
 80049aa:	2301      	movs	r3, #1
 80049ac:	e7c4      	b.n	8004938 <_strtod_l+0x168>
 80049ae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80049b0:	3001      	adds	r0, #1
 80049b2:	1c5a      	adds	r2, r3, #1
 80049b4:	9219      	str	r2, [sp, #100]	@ 0x64
 80049b6:	785a      	ldrb	r2, [r3, #1]
 80049b8:	2a30      	cmp	r2, #48	@ 0x30
 80049ba:	d0f8      	beq.n	80049ae <_strtod_l+0x1de>
 80049bc:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80049c0:	2b08      	cmp	r3, #8
 80049c2:	f200 84cb 	bhi.w	800535c <_strtod_l+0xb8c>
 80049c6:	4681      	mov	r9, r0
 80049c8:	2000      	movs	r0, #0
 80049ca:	4605      	mov	r5, r0
 80049cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80049ce:	930c      	str	r3, [sp, #48]	@ 0x30
 80049d0:	3a30      	subs	r2, #48	@ 0x30
 80049d2:	f100 0301 	add.w	r3, r0, #1
 80049d6:	d02a      	beq.n	8004a2e <_strtod_l+0x25e>
 80049d8:	4499      	add	r9, r3
 80049da:	210a      	movs	r1, #10
 80049dc:	462b      	mov	r3, r5
 80049de:	eb00 0c05 	add.w	ip, r0, r5
 80049e2:	4563      	cmp	r3, ip
 80049e4:	d10d      	bne.n	8004a02 <_strtod_l+0x232>
 80049e6:	1c69      	adds	r1, r5, #1
 80049e8:	4401      	add	r1, r0
 80049ea:	4428      	add	r0, r5
 80049ec:	2808      	cmp	r0, #8
 80049ee:	dc16      	bgt.n	8004a1e <_strtod_l+0x24e>
 80049f0:	230a      	movs	r3, #10
 80049f2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80049f4:	fb03 2300 	mla	r3, r3, r0, r2
 80049f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80049fa:	2300      	movs	r3, #0
 80049fc:	e018      	b.n	8004a30 <_strtod_l+0x260>
 80049fe:	4638      	mov	r0, r7
 8004a00:	e7da      	b.n	80049b8 <_strtod_l+0x1e8>
 8004a02:	2b08      	cmp	r3, #8
 8004a04:	f103 0301 	add.w	r3, r3, #1
 8004a08:	dc03      	bgt.n	8004a12 <_strtod_l+0x242>
 8004a0a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8004a0c:	434e      	muls	r6, r1
 8004a0e:	960a      	str	r6, [sp, #40]	@ 0x28
 8004a10:	e7e7      	b.n	80049e2 <_strtod_l+0x212>
 8004a12:	2b10      	cmp	r3, #16
 8004a14:	bfde      	ittt	le
 8004a16:	9e08      	ldrle	r6, [sp, #32]
 8004a18:	434e      	mulle	r6, r1
 8004a1a:	9608      	strle	r6, [sp, #32]
 8004a1c:	e7e1      	b.n	80049e2 <_strtod_l+0x212>
 8004a1e:	280f      	cmp	r0, #15
 8004a20:	dceb      	bgt.n	80049fa <_strtod_l+0x22a>
 8004a22:	230a      	movs	r3, #10
 8004a24:	9808      	ldr	r0, [sp, #32]
 8004a26:	fb03 2300 	mla	r3, r3, r0, r2
 8004a2a:	9308      	str	r3, [sp, #32]
 8004a2c:	e7e5      	b.n	80049fa <_strtod_l+0x22a>
 8004a2e:	4629      	mov	r1, r5
 8004a30:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004a32:	460d      	mov	r5, r1
 8004a34:	1c50      	adds	r0, r2, #1
 8004a36:	9019      	str	r0, [sp, #100]	@ 0x64
 8004a38:	7852      	ldrb	r2, [r2, #1]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	e7b1      	b.n	80049a2 <_strtod_l+0x1d2>
 8004a3e:	f04f 0900 	mov.w	r9, #0
 8004a42:	2301      	movs	r3, #1
 8004a44:	e77d      	b.n	8004942 <_strtod_l+0x172>
 8004a46:	f04f 0c00 	mov.w	ip, #0
 8004a4a:	1ca2      	adds	r2, r4, #2
 8004a4c:	9219      	str	r2, [sp, #100]	@ 0x64
 8004a4e:	78a2      	ldrb	r2, [r4, #2]
 8004a50:	e785      	b.n	800495e <_strtod_l+0x18e>
 8004a52:	f04f 0c01 	mov.w	ip, #1
 8004a56:	e7f8      	b.n	8004a4a <_strtod_l+0x27a>
 8004a58:	08006880 	.word	0x08006880
 8004a5c:	7ff00000 	.word	0x7ff00000
 8004a60:	08006868 	.word	0x08006868
 8004a64:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004a66:	1c51      	adds	r1, r2, #1
 8004a68:	9119      	str	r1, [sp, #100]	@ 0x64
 8004a6a:	7852      	ldrb	r2, [r2, #1]
 8004a6c:	2a30      	cmp	r2, #48	@ 0x30
 8004a6e:	d0f9      	beq.n	8004a64 <_strtod_l+0x294>
 8004a70:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8004a74:	2908      	cmp	r1, #8
 8004a76:	f63f af78 	bhi.w	800496a <_strtod_l+0x19a>
 8004a7a:	f04f 080a 	mov.w	r8, #10
 8004a7e:	3a30      	subs	r2, #48	@ 0x30
 8004a80:	920e      	str	r2, [sp, #56]	@ 0x38
 8004a82:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004a84:	920f      	str	r2, [sp, #60]	@ 0x3c
 8004a86:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004a88:	1c56      	adds	r6, r2, #1
 8004a8a:	9619      	str	r6, [sp, #100]	@ 0x64
 8004a8c:	7852      	ldrb	r2, [r2, #1]
 8004a8e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8004a92:	f1be 0f09 	cmp.w	lr, #9
 8004a96:	d939      	bls.n	8004b0c <_strtod_l+0x33c>
 8004a98:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004a9a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8004a9e:	1a76      	subs	r6, r6, r1
 8004aa0:	2e08      	cmp	r6, #8
 8004aa2:	dc03      	bgt.n	8004aac <_strtod_l+0x2dc>
 8004aa4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8004aa6:	4588      	cmp	r8, r1
 8004aa8:	bfa8      	it	ge
 8004aaa:	4688      	movge	r8, r1
 8004aac:	f1bc 0f00 	cmp.w	ip, #0
 8004ab0:	d001      	beq.n	8004ab6 <_strtod_l+0x2e6>
 8004ab2:	f1c8 0800 	rsb	r8, r8, #0
 8004ab6:	2d00      	cmp	r5, #0
 8004ab8:	d14e      	bne.n	8004b58 <_strtod_l+0x388>
 8004aba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004abc:	4308      	orrs	r0, r1
 8004abe:	f47f aec0 	bne.w	8004842 <_strtod_l+0x72>
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	f47f aed6 	bne.w	8004874 <_strtod_l+0xa4>
 8004ac8:	2a69      	cmp	r2, #105	@ 0x69
 8004aca:	d028      	beq.n	8004b1e <_strtod_l+0x34e>
 8004acc:	dc25      	bgt.n	8004b1a <_strtod_l+0x34a>
 8004ace:	2a49      	cmp	r2, #73	@ 0x49
 8004ad0:	d025      	beq.n	8004b1e <_strtod_l+0x34e>
 8004ad2:	2a4e      	cmp	r2, #78	@ 0x4e
 8004ad4:	f47f aece 	bne.w	8004874 <_strtod_l+0xa4>
 8004ad8:	499a      	ldr	r1, [pc, #616]	@ (8004d44 <_strtod_l+0x574>)
 8004ada:	a819      	add	r0, sp, #100	@ 0x64
 8004adc:	f001 f9de 	bl	8005e9c <__match>
 8004ae0:	2800      	cmp	r0, #0
 8004ae2:	f43f aec7 	beq.w	8004874 <_strtod_l+0xa4>
 8004ae6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	2b28      	cmp	r3, #40	@ 0x28
 8004aec:	d12e      	bne.n	8004b4c <_strtod_l+0x37c>
 8004aee:	4996      	ldr	r1, [pc, #600]	@ (8004d48 <_strtod_l+0x578>)
 8004af0:	aa1c      	add	r2, sp, #112	@ 0x70
 8004af2:	a819      	add	r0, sp, #100	@ 0x64
 8004af4:	f001 f9e6 	bl	8005ec4 <__hexnan>
 8004af8:	2805      	cmp	r0, #5
 8004afa:	d127      	bne.n	8004b4c <_strtod_l+0x37c>
 8004afc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8004afe:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8004b02:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8004b06:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8004b0a:	e69a      	b.n	8004842 <_strtod_l+0x72>
 8004b0c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8004b0e:	fb08 2101 	mla	r1, r8, r1, r2
 8004b12:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8004b16:	920e      	str	r2, [sp, #56]	@ 0x38
 8004b18:	e7b5      	b.n	8004a86 <_strtod_l+0x2b6>
 8004b1a:	2a6e      	cmp	r2, #110	@ 0x6e
 8004b1c:	e7da      	b.n	8004ad4 <_strtod_l+0x304>
 8004b1e:	498b      	ldr	r1, [pc, #556]	@ (8004d4c <_strtod_l+0x57c>)
 8004b20:	a819      	add	r0, sp, #100	@ 0x64
 8004b22:	f001 f9bb 	bl	8005e9c <__match>
 8004b26:	2800      	cmp	r0, #0
 8004b28:	f43f aea4 	beq.w	8004874 <_strtod_l+0xa4>
 8004b2c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004b2e:	4988      	ldr	r1, [pc, #544]	@ (8004d50 <_strtod_l+0x580>)
 8004b30:	3b01      	subs	r3, #1
 8004b32:	a819      	add	r0, sp, #100	@ 0x64
 8004b34:	9319      	str	r3, [sp, #100]	@ 0x64
 8004b36:	f001 f9b1 	bl	8005e9c <__match>
 8004b3a:	b910      	cbnz	r0, 8004b42 <_strtod_l+0x372>
 8004b3c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004b3e:	3301      	adds	r3, #1
 8004b40:	9319      	str	r3, [sp, #100]	@ 0x64
 8004b42:	f04f 0a00 	mov.w	sl, #0
 8004b46:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8004d54 <_strtod_l+0x584>
 8004b4a:	e67a      	b.n	8004842 <_strtod_l+0x72>
 8004b4c:	4882      	ldr	r0, [pc, #520]	@ (8004d58 <_strtod_l+0x588>)
 8004b4e:	f000 fee3 	bl	8005918 <nan>
 8004b52:	4682      	mov	sl, r0
 8004b54:	468b      	mov	fp, r1
 8004b56:	e674      	b.n	8004842 <_strtod_l+0x72>
 8004b58:	eba8 0309 	sub.w	r3, r8, r9
 8004b5c:	2f00      	cmp	r7, #0
 8004b5e:	bf08      	it	eq
 8004b60:	462f      	moveq	r7, r5
 8004b62:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004b64:	2d10      	cmp	r5, #16
 8004b66:	462c      	mov	r4, r5
 8004b68:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b6a:	bfa8      	it	ge
 8004b6c:	2410      	movge	r4, #16
 8004b6e:	f7fb fc39 	bl	80003e4 <__aeabi_ui2d>
 8004b72:	2d09      	cmp	r5, #9
 8004b74:	4682      	mov	sl, r0
 8004b76:	468b      	mov	fp, r1
 8004b78:	dc11      	bgt.n	8004b9e <_strtod_l+0x3ce>
 8004b7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	f43f ae60 	beq.w	8004842 <_strtod_l+0x72>
 8004b82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b84:	dd76      	ble.n	8004c74 <_strtod_l+0x4a4>
 8004b86:	2b16      	cmp	r3, #22
 8004b88:	dc5d      	bgt.n	8004c46 <_strtod_l+0x476>
 8004b8a:	4974      	ldr	r1, [pc, #464]	@ (8004d5c <_strtod_l+0x58c>)
 8004b8c:	4652      	mov	r2, sl
 8004b8e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004b92:	465b      	mov	r3, fp
 8004b94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b98:	f7fb fc9e 	bl	80004d8 <__aeabi_dmul>
 8004b9c:	e7d9      	b.n	8004b52 <_strtod_l+0x382>
 8004b9e:	4b6f      	ldr	r3, [pc, #444]	@ (8004d5c <_strtod_l+0x58c>)
 8004ba0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004ba4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8004ba8:	f7fb fc96 	bl	80004d8 <__aeabi_dmul>
 8004bac:	4682      	mov	sl, r0
 8004bae:	9808      	ldr	r0, [sp, #32]
 8004bb0:	468b      	mov	fp, r1
 8004bb2:	f7fb fc17 	bl	80003e4 <__aeabi_ui2d>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	460b      	mov	r3, r1
 8004bba:	4650      	mov	r0, sl
 8004bbc:	4659      	mov	r1, fp
 8004bbe:	f7fb fad5 	bl	800016c <__adddf3>
 8004bc2:	2d0f      	cmp	r5, #15
 8004bc4:	4682      	mov	sl, r0
 8004bc6:	468b      	mov	fp, r1
 8004bc8:	ddd7      	ble.n	8004b7a <_strtod_l+0x3aa>
 8004bca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004bcc:	1b2c      	subs	r4, r5, r4
 8004bce:	441c      	add	r4, r3
 8004bd0:	2c00      	cmp	r4, #0
 8004bd2:	f340 8096 	ble.w	8004d02 <_strtod_l+0x532>
 8004bd6:	f014 030f 	ands.w	r3, r4, #15
 8004bda:	d00a      	beq.n	8004bf2 <_strtod_l+0x422>
 8004bdc:	495f      	ldr	r1, [pc, #380]	@ (8004d5c <_strtod_l+0x58c>)
 8004bde:	4652      	mov	r2, sl
 8004be0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004be4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004be8:	465b      	mov	r3, fp
 8004bea:	f7fb fc75 	bl	80004d8 <__aeabi_dmul>
 8004bee:	4682      	mov	sl, r0
 8004bf0:	468b      	mov	fp, r1
 8004bf2:	f034 040f 	bics.w	r4, r4, #15
 8004bf6:	d073      	beq.n	8004ce0 <_strtod_l+0x510>
 8004bf8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8004bfc:	dd48      	ble.n	8004c90 <_strtod_l+0x4c0>
 8004bfe:	2400      	movs	r4, #0
 8004c00:	46a0      	mov	r8, r4
 8004c02:	46a1      	mov	r9, r4
 8004c04:	940a      	str	r4, [sp, #40]	@ 0x28
 8004c06:	2322      	movs	r3, #34	@ 0x22
 8004c08:	f04f 0a00 	mov.w	sl, #0
 8004c0c:	9a05      	ldr	r2, [sp, #20]
 8004c0e:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8004d54 <_strtod_l+0x584>
 8004c12:	6013      	str	r3, [r2, #0]
 8004c14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f43f ae13 	beq.w	8004842 <_strtod_l+0x72>
 8004c1c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004c1e:	9805      	ldr	r0, [sp, #20]
 8004c20:	f7ff f94c 	bl	8003ebc <_Bfree>
 8004c24:	4649      	mov	r1, r9
 8004c26:	9805      	ldr	r0, [sp, #20]
 8004c28:	f7ff f948 	bl	8003ebc <_Bfree>
 8004c2c:	4641      	mov	r1, r8
 8004c2e:	9805      	ldr	r0, [sp, #20]
 8004c30:	f7ff f944 	bl	8003ebc <_Bfree>
 8004c34:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004c36:	9805      	ldr	r0, [sp, #20]
 8004c38:	f7ff f940 	bl	8003ebc <_Bfree>
 8004c3c:	4621      	mov	r1, r4
 8004c3e:	9805      	ldr	r0, [sp, #20]
 8004c40:	f7ff f93c 	bl	8003ebc <_Bfree>
 8004c44:	e5fd      	b.n	8004842 <_strtod_l+0x72>
 8004c46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c48:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	dbbc      	blt.n	8004bca <_strtod_l+0x3fa>
 8004c50:	4c42      	ldr	r4, [pc, #264]	@ (8004d5c <_strtod_l+0x58c>)
 8004c52:	f1c5 050f 	rsb	r5, r5, #15
 8004c56:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8004c5a:	4652      	mov	r2, sl
 8004c5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c60:	465b      	mov	r3, fp
 8004c62:	f7fb fc39 	bl	80004d8 <__aeabi_dmul>
 8004c66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c68:	1b5d      	subs	r5, r3, r5
 8004c6a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8004c6e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004c72:	e791      	b.n	8004b98 <_strtod_l+0x3c8>
 8004c74:	3316      	adds	r3, #22
 8004c76:	dba8      	blt.n	8004bca <_strtod_l+0x3fa>
 8004c78:	4b38      	ldr	r3, [pc, #224]	@ (8004d5c <_strtod_l+0x58c>)
 8004c7a:	eba9 0808 	sub.w	r8, r9, r8
 8004c7e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8004c82:	4650      	mov	r0, sl
 8004c84:	e9d8 2300 	ldrd	r2, r3, [r8]
 8004c88:	4659      	mov	r1, fp
 8004c8a:	f7fb fd4f 	bl	800072c <__aeabi_ddiv>
 8004c8e:	e760      	b.n	8004b52 <_strtod_l+0x382>
 8004c90:	4b33      	ldr	r3, [pc, #204]	@ (8004d60 <_strtod_l+0x590>)
 8004c92:	4650      	mov	r0, sl
 8004c94:	9308      	str	r3, [sp, #32]
 8004c96:	2300      	movs	r3, #0
 8004c98:	4659      	mov	r1, fp
 8004c9a:	461e      	mov	r6, r3
 8004c9c:	1124      	asrs	r4, r4, #4
 8004c9e:	2c01      	cmp	r4, #1
 8004ca0:	dc21      	bgt.n	8004ce6 <_strtod_l+0x516>
 8004ca2:	b10b      	cbz	r3, 8004ca8 <_strtod_l+0x4d8>
 8004ca4:	4682      	mov	sl, r0
 8004ca6:	468b      	mov	fp, r1
 8004ca8:	492d      	ldr	r1, [pc, #180]	@ (8004d60 <_strtod_l+0x590>)
 8004caa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8004cae:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8004cb2:	4652      	mov	r2, sl
 8004cb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004cb8:	465b      	mov	r3, fp
 8004cba:	f7fb fc0d 	bl	80004d8 <__aeabi_dmul>
 8004cbe:	4b25      	ldr	r3, [pc, #148]	@ (8004d54 <_strtod_l+0x584>)
 8004cc0:	460a      	mov	r2, r1
 8004cc2:	400b      	ands	r3, r1
 8004cc4:	4927      	ldr	r1, [pc, #156]	@ (8004d64 <_strtod_l+0x594>)
 8004cc6:	4682      	mov	sl, r0
 8004cc8:	428b      	cmp	r3, r1
 8004cca:	d898      	bhi.n	8004bfe <_strtod_l+0x42e>
 8004ccc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8004cd0:	428b      	cmp	r3, r1
 8004cd2:	bf86      	itte	hi
 8004cd4:	f04f 3aff 	movhi.w	sl, #4294967295
 8004cd8:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8004d68 <_strtod_l+0x598>
 8004cdc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	9308      	str	r3, [sp, #32]
 8004ce4:	e07a      	b.n	8004ddc <_strtod_l+0x60c>
 8004ce6:	07e2      	lsls	r2, r4, #31
 8004ce8:	d505      	bpl.n	8004cf6 <_strtod_l+0x526>
 8004cea:	9b08      	ldr	r3, [sp, #32]
 8004cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf0:	f7fb fbf2 	bl	80004d8 <__aeabi_dmul>
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	9a08      	ldr	r2, [sp, #32]
 8004cf8:	3601      	adds	r6, #1
 8004cfa:	3208      	adds	r2, #8
 8004cfc:	1064      	asrs	r4, r4, #1
 8004cfe:	9208      	str	r2, [sp, #32]
 8004d00:	e7cd      	b.n	8004c9e <_strtod_l+0x4ce>
 8004d02:	d0ed      	beq.n	8004ce0 <_strtod_l+0x510>
 8004d04:	4264      	negs	r4, r4
 8004d06:	f014 020f 	ands.w	r2, r4, #15
 8004d0a:	d00a      	beq.n	8004d22 <_strtod_l+0x552>
 8004d0c:	4b13      	ldr	r3, [pc, #76]	@ (8004d5c <_strtod_l+0x58c>)
 8004d0e:	4650      	mov	r0, sl
 8004d10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004d14:	4659      	mov	r1, fp
 8004d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d1a:	f7fb fd07 	bl	800072c <__aeabi_ddiv>
 8004d1e:	4682      	mov	sl, r0
 8004d20:	468b      	mov	fp, r1
 8004d22:	1124      	asrs	r4, r4, #4
 8004d24:	d0dc      	beq.n	8004ce0 <_strtod_l+0x510>
 8004d26:	2c1f      	cmp	r4, #31
 8004d28:	dd20      	ble.n	8004d6c <_strtod_l+0x59c>
 8004d2a:	2400      	movs	r4, #0
 8004d2c:	46a0      	mov	r8, r4
 8004d2e:	46a1      	mov	r9, r4
 8004d30:	940a      	str	r4, [sp, #40]	@ 0x28
 8004d32:	2322      	movs	r3, #34	@ 0x22
 8004d34:	9a05      	ldr	r2, [sp, #20]
 8004d36:	f04f 0a00 	mov.w	sl, #0
 8004d3a:	f04f 0b00 	mov.w	fp, #0
 8004d3e:	6013      	str	r3, [r2, #0]
 8004d40:	e768      	b.n	8004c14 <_strtod_l+0x444>
 8004d42:	bf00      	nop
 8004d44:	08006657 	.word	0x08006657
 8004d48:	0800686c 	.word	0x0800686c
 8004d4c:	0800664f 	.word	0x0800664f
 8004d50:	08006686 	.word	0x08006686
 8004d54:	7ff00000 	.word	0x7ff00000
 8004d58:	08006a15 	.word	0x08006a15
 8004d5c:	080067a0 	.word	0x080067a0
 8004d60:	08006778 	.word	0x08006778
 8004d64:	7ca00000 	.word	0x7ca00000
 8004d68:	7fefffff 	.word	0x7fefffff
 8004d6c:	f014 0310 	ands.w	r3, r4, #16
 8004d70:	bf18      	it	ne
 8004d72:	236a      	movne	r3, #106	@ 0x6a
 8004d74:	4650      	mov	r0, sl
 8004d76:	9308      	str	r3, [sp, #32]
 8004d78:	4659      	mov	r1, fp
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	4ea9      	ldr	r6, [pc, #676]	@ (8005024 <_strtod_l+0x854>)
 8004d7e:	07e2      	lsls	r2, r4, #31
 8004d80:	d504      	bpl.n	8004d8c <_strtod_l+0x5bc>
 8004d82:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004d86:	f7fb fba7 	bl	80004d8 <__aeabi_dmul>
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	1064      	asrs	r4, r4, #1
 8004d8e:	f106 0608 	add.w	r6, r6, #8
 8004d92:	d1f4      	bne.n	8004d7e <_strtod_l+0x5ae>
 8004d94:	b10b      	cbz	r3, 8004d9a <_strtod_l+0x5ca>
 8004d96:	4682      	mov	sl, r0
 8004d98:	468b      	mov	fp, r1
 8004d9a:	9b08      	ldr	r3, [sp, #32]
 8004d9c:	b1b3      	cbz	r3, 8004dcc <_strtod_l+0x5fc>
 8004d9e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8004da2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	4659      	mov	r1, fp
 8004daa:	dd0f      	ble.n	8004dcc <_strtod_l+0x5fc>
 8004dac:	2b1f      	cmp	r3, #31
 8004dae:	dd57      	ble.n	8004e60 <_strtod_l+0x690>
 8004db0:	2b34      	cmp	r3, #52	@ 0x34
 8004db2:	bfd8      	it	le
 8004db4:	f04f 33ff 	movle.w	r3, #4294967295
 8004db8:	f04f 0a00 	mov.w	sl, #0
 8004dbc:	bfcf      	iteee	gt
 8004dbe:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8004dc2:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8004dc6:	4093      	lslle	r3, r2
 8004dc8:	ea03 0b01 	andle.w	fp, r3, r1
 8004dcc:	2200      	movs	r2, #0
 8004dce:	2300      	movs	r3, #0
 8004dd0:	4650      	mov	r0, sl
 8004dd2:	4659      	mov	r1, fp
 8004dd4:	f7fb fde8 	bl	80009a8 <__aeabi_dcmpeq>
 8004dd8:	2800      	cmp	r0, #0
 8004dda:	d1a6      	bne.n	8004d2a <_strtod_l+0x55a>
 8004ddc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004dde:	463a      	mov	r2, r7
 8004de0:	9300      	str	r3, [sp, #0]
 8004de2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8004de4:	462b      	mov	r3, r5
 8004de6:	9805      	ldr	r0, [sp, #20]
 8004de8:	f7ff f8d0 	bl	8003f8c <__s2b>
 8004dec:	900a      	str	r0, [sp, #40]	@ 0x28
 8004dee:	2800      	cmp	r0, #0
 8004df0:	f43f af05 	beq.w	8004bfe <_strtod_l+0x42e>
 8004df4:	2400      	movs	r4, #0
 8004df6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004df8:	eba9 0308 	sub.w	r3, r9, r8
 8004dfc:	2a00      	cmp	r2, #0
 8004dfe:	bfa8      	it	ge
 8004e00:	2300      	movge	r3, #0
 8004e02:	46a0      	mov	r8, r4
 8004e04:	9312      	str	r3, [sp, #72]	@ 0x48
 8004e06:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8004e0a:	9316      	str	r3, [sp, #88]	@ 0x58
 8004e0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004e0e:	9805      	ldr	r0, [sp, #20]
 8004e10:	6859      	ldr	r1, [r3, #4]
 8004e12:	f7ff f813 	bl	8003e3c <_Balloc>
 8004e16:	4681      	mov	r9, r0
 8004e18:	2800      	cmp	r0, #0
 8004e1a:	f43f aef4 	beq.w	8004c06 <_strtod_l+0x436>
 8004e1e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004e20:	300c      	adds	r0, #12
 8004e22:	691a      	ldr	r2, [r3, #16]
 8004e24:	f103 010c 	add.w	r1, r3, #12
 8004e28:	3202      	adds	r2, #2
 8004e2a:	0092      	lsls	r2, r2, #2
 8004e2c:	f000 fd66 	bl	80058fc <memcpy>
 8004e30:	ab1c      	add	r3, sp, #112	@ 0x70
 8004e32:	9301      	str	r3, [sp, #4]
 8004e34:	ab1b      	add	r3, sp, #108	@ 0x6c
 8004e36:	9300      	str	r3, [sp, #0]
 8004e38:	4652      	mov	r2, sl
 8004e3a:	465b      	mov	r3, fp
 8004e3c:	9805      	ldr	r0, [sp, #20]
 8004e3e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8004e42:	f7ff fbd5 	bl	80045f0 <__d2b>
 8004e46:	901a      	str	r0, [sp, #104]	@ 0x68
 8004e48:	2800      	cmp	r0, #0
 8004e4a:	f43f aedc 	beq.w	8004c06 <_strtod_l+0x436>
 8004e4e:	2101      	movs	r1, #1
 8004e50:	9805      	ldr	r0, [sp, #20]
 8004e52:	f7ff f931 	bl	80040b8 <__i2b>
 8004e56:	4680      	mov	r8, r0
 8004e58:	b948      	cbnz	r0, 8004e6e <_strtod_l+0x69e>
 8004e5a:	f04f 0800 	mov.w	r8, #0
 8004e5e:	e6d2      	b.n	8004c06 <_strtod_l+0x436>
 8004e60:	f04f 32ff 	mov.w	r2, #4294967295
 8004e64:	fa02 f303 	lsl.w	r3, r2, r3
 8004e68:	ea03 0a0a 	and.w	sl, r3, sl
 8004e6c:	e7ae      	b.n	8004dcc <_strtod_l+0x5fc>
 8004e6e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8004e70:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8004e72:	2d00      	cmp	r5, #0
 8004e74:	bfab      	itete	ge
 8004e76:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8004e78:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8004e7a:	18ef      	addge	r7, r5, r3
 8004e7c:	1b5e      	sublt	r6, r3, r5
 8004e7e:	9b08      	ldr	r3, [sp, #32]
 8004e80:	bfa8      	it	ge
 8004e82:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8004e84:	eba5 0503 	sub.w	r5, r5, r3
 8004e88:	4415      	add	r5, r2
 8004e8a:	4b67      	ldr	r3, [pc, #412]	@ (8005028 <_strtod_l+0x858>)
 8004e8c:	f105 35ff 	add.w	r5, r5, #4294967295
 8004e90:	bfb8      	it	lt
 8004e92:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8004e94:	429d      	cmp	r5, r3
 8004e96:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8004e9a:	da50      	bge.n	8004f3e <_strtod_l+0x76e>
 8004e9c:	1b5b      	subs	r3, r3, r5
 8004e9e:	2b1f      	cmp	r3, #31
 8004ea0:	f04f 0101 	mov.w	r1, #1
 8004ea4:	eba2 0203 	sub.w	r2, r2, r3
 8004ea8:	dc3d      	bgt.n	8004f26 <_strtod_l+0x756>
 8004eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8004eae:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	9310      	str	r3, [sp, #64]	@ 0x40
 8004eb4:	18bd      	adds	r5, r7, r2
 8004eb6:	9b08      	ldr	r3, [sp, #32]
 8004eb8:	42af      	cmp	r7, r5
 8004eba:	4416      	add	r6, r2
 8004ebc:	441e      	add	r6, r3
 8004ebe:	463b      	mov	r3, r7
 8004ec0:	bfa8      	it	ge
 8004ec2:	462b      	movge	r3, r5
 8004ec4:	42b3      	cmp	r3, r6
 8004ec6:	bfa8      	it	ge
 8004ec8:	4633      	movge	r3, r6
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	bfc2      	ittt	gt
 8004ece:	1aed      	subgt	r5, r5, r3
 8004ed0:	1af6      	subgt	r6, r6, r3
 8004ed2:	1aff      	subgt	r7, r7, r3
 8004ed4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	dd16      	ble.n	8004f08 <_strtod_l+0x738>
 8004eda:	4641      	mov	r1, r8
 8004edc:	461a      	mov	r2, r3
 8004ede:	9805      	ldr	r0, [sp, #20]
 8004ee0:	f7ff f9a8 	bl	8004234 <__pow5mult>
 8004ee4:	4680      	mov	r8, r0
 8004ee6:	2800      	cmp	r0, #0
 8004ee8:	d0b7      	beq.n	8004e5a <_strtod_l+0x68a>
 8004eea:	4601      	mov	r1, r0
 8004eec:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8004eee:	9805      	ldr	r0, [sp, #20]
 8004ef0:	f7ff f8f8 	bl	80040e4 <__multiply>
 8004ef4:	900e      	str	r0, [sp, #56]	@ 0x38
 8004ef6:	2800      	cmp	r0, #0
 8004ef8:	f43f ae85 	beq.w	8004c06 <_strtod_l+0x436>
 8004efc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004efe:	9805      	ldr	r0, [sp, #20]
 8004f00:	f7fe ffdc 	bl	8003ebc <_Bfree>
 8004f04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004f06:	931a      	str	r3, [sp, #104]	@ 0x68
 8004f08:	2d00      	cmp	r5, #0
 8004f0a:	dc1d      	bgt.n	8004f48 <_strtod_l+0x778>
 8004f0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	dd23      	ble.n	8004f5a <_strtod_l+0x78a>
 8004f12:	4649      	mov	r1, r9
 8004f14:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8004f16:	9805      	ldr	r0, [sp, #20]
 8004f18:	f7ff f98c 	bl	8004234 <__pow5mult>
 8004f1c:	4681      	mov	r9, r0
 8004f1e:	b9e0      	cbnz	r0, 8004f5a <_strtod_l+0x78a>
 8004f20:	f04f 0900 	mov.w	r9, #0
 8004f24:	e66f      	b.n	8004c06 <_strtod_l+0x436>
 8004f26:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8004f2a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8004f2e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8004f32:	35e2      	adds	r5, #226	@ 0xe2
 8004f34:	fa01 f305 	lsl.w	r3, r1, r5
 8004f38:	9310      	str	r3, [sp, #64]	@ 0x40
 8004f3a:	9113      	str	r1, [sp, #76]	@ 0x4c
 8004f3c:	e7ba      	b.n	8004eb4 <_strtod_l+0x6e4>
 8004f3e:	2300      	movs	r3, #0
 8004f40:	9310      	str	r3, [sp, #64]	@ 0x40
 8004f42:	2301      	movs	r3, #1
 8004f44:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004f46:	e7b5      	b.n	8004eb4 <_strtod_l+0x6e4>
 8004f48:	462a      	mov	r2, r5
 8004f4a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004f4c:	9805      	ldr	r0, [sp, #20]
 8004f4e:	f7ff f9cb 	bl	80042e8 <__lshift>
 8004f52:	901a      	str	r0, [sp, #104]	@ 0x68
 8004f54:	2800      	cmp	r0, #0
 8004f56:	d1d9      	bne.n	8004f0c <_strtod_l+0x73c>
 8004f58:	e655      	b.n	8004c06 <_strtod_l+0x436>
 8004f5a:	2e00      	cmp	r6, #0
 8004f5c:	dd07      	ble.n	8004f6e <_strtod_l+0x79e>
 8004f5e:	4649      	mov	r1, r9
 8004f60:	4632      	mov	r2, r6
 8004f62:	9805      	ldr	r0, [sp, #20]
 8004f64:	f7ff f9c0 	bl	80042e8 <__lshift>
 8004f68:	4681      	mov	r9, r0
 8004f6a:	2800      	cmp	r0, #0
 8004f6c:	d0d8      	beq.n	8004f20 <_strtod_l+0x750>
 8004f6e:	2f00      	cmp	r7, #0
 8004f70:	dd08      	ble.n	8004f84 <_strtod_l+0x7b4>
 8004f72:	4641      	mov	r1, r8
 8004f74:	463a      	mov	r2, r7
 8004f76:	9805      	ldr	r0, [sp, #20]
 8004f78:	f7ff f9b6 	bl	80042e8 <__lshift>
 8004f7c:	4680      	mov	r8, r0
 8004f7e:	2800      	cmp	r0, #0
 8004f80:	f43f ae41 	beq.w	8004c06 <_strtod_l+0x436>
 8004f84:	464a      	mov	r2, r9
 8004f86:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004f88:	9805      	ldr	r0, [sp, #20]
 8004f8a:	f7ff fa35 	bl	80043f8 <__mdiff>
 8004f8e:	4604      	mov	r4, r0
 8004f90:	2800      	cmp	r0, #0
 8004f92:	f43f ae38 	beq.w	8004c06 <_strtod_l+0x436>
 8004f96:	68c3      	ldr	r3, [r0, #12]
 8004f98:	4641      	mov	r1, r8
 8004f9a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	60c3      	str	r3, [r0, #12]
 8004fa0:	f7ff fa0e 	bl	80043c0 <__mcmp>
 8004fa4:	2800      	cmp	r0, #0
 8004fa6:	da45      	bge.n	8005034 <_strtod_l+0x864>
 8004fa8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004faa:	ea53 030a 	orrs.w	r3, r3, sl
 8004fae:	d16b      	bne.n	8005088 <_strtod_l+0x8b8>
 8004fb0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d167      	bne.n	8005088 <_strtod_l+0x8b8>
 8004fb8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8004fbc:	0d1b      	lsrs	r3, r3, #20
 8004fbe:	051b      	lsls	r3, r3, #20
 8004fc0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8004fc4:	d960      	bls.n	8005088 <_strtod_l+0x8b8>
 8004fc6:	6963      	ldr	r3, [r4, #20]
 8004fc8:	b913      	cbnz	r3, 8004fd0 <_strtod_l+0x800>
 8004fca:	6923      	ldr	r3, [r4, #16]
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	dd5b      	ble.n	8005088 <_strtod_l+0x8b8>
 8004fd0:	4621      	mov	r1, r4
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	9805      	ldr	r0, [sp, #20]
 8004fd6:	f7ff f987 	bl	80042e8 <__lshift>
 8004fda:	4641      	mov	r1, r8
 8004fdc:	4604      	mov	r4, r0
 8004fde:	f7ff f9ef 	bl	80043c0 <__mcmp>
 8004fe2:	2800      	cmp	r0, #0
 8004fe4:	dd50      	ble.n	8005088 <_strtod_l+0x8b8>
 8004fe6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8004fea:	9a08      	ldr	r2, [sp, #32]
 8004fec:	0d1b      	lsrs	r3, r3, #20
 8004fee:	051b      	lsls	r3, r3, #20
 8004ff0:	2a00      	cmp	r2, #0
 8004ff2:	d06a      	beq.n	80050ca <_strtod_l+0x8fa>
 8004ff4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8004ff8:	d867      	bhi.n	80050ca <_strtod_l+0x8fa>
 8004ffa:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8004ffe:	f67f ae98 	bls.w	8004d32 <_strtod_l+0x562>
 8005002:	4650      	mov	r0, sl
 8005004:	4659      	mov	r1, fp
 8005006:	4b09      	ldr	r3, [pc, #36]	@ (800502c <_strtod_l+0x85c>)
 8005008:	2200      	movs	r2, #0
 800500a:	f7fb fa65 	bl	80004d8 <__aeabi_dmul>
 800500e:	4b08      	ldr	r3, [pc, #32]	@ (8005030 <_strtod_l+0x860>)
 8005010:	4682      	mov	sl, r0
 8005012:	400b      	ands	r3, r1
 8005014:	468b      	mov	fp, r1
 8005016:	2b00      	cmp	r3, #0
 8005018:	f47f ae00 	bne.w	8004c1c <_strtod_l+0x44c>
 800501c:	2322      	movs	r3, #34	@ 0x22
 800501e:	9a05      	ldr	r2, [sp, #20]
 8005020:	6013      	str	r3, [r2, #0]
 8005022:	e5fb      	b.n	8004c1c <_strtod_l+0x44c>
 8005024:	08006898 	.word	0x08006898
 8005028:	fffffc02 	.word	0xfffffc02
 800502c:	39500000 	.word	0x39500000
 8005030:	7ff00000 	.word	0x7ff00000
 8005034:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8005038:	d165      	bne.n	8005106 <_strtod_l+0x936>
 800503a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800503c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005040:	b35a      	cbz	r2, 800509a <_strtod_l+0x8ca>
 8005042:	4a99      	ldr	r2, [pc, #612]	@ (80052a8 <_strtod_l+0xad8>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d12b      	bne.n	80050a0 <_strtod_l+0x8d0>
 8005048:	9b08      	ldr	r3, [sp, #32]
 800504a:	4651      	mov	r1, sl
 800504c:	b303      	cbz	r3, 8005090 <_strtod_l+0x8c0>
 800504e:	465a      	mov	r2, fp
 8005050:	4b96      	ldr	r3, [pc, #600]	@ (80052ac <_strtod_l+0xadc>)
 8005052:	4013      	ands	r3, r2
 8005054:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8005058:	f04f 32ff 	mov.w	r2, #4294967295
 800505c:	d81b      	bhi.n	8005096 <_strtod_l+0x8c6>
 800505e:	0d1b      	lsrs	r3, r3, #20
 8005060:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005064:	fa02 f303 	lsl.w	r3, r2, r3
 8005068:	4299      	cmp	r1, r3
 800506a:	d119      	bne.n	80050a0 <_strtod_l+0x8d0>
 800506c:	4b90      	ldr	r3, [pc, #576]	@ (80052b0 <_strtod_l+0xae0>)
 800506e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005070:	429a      	cmp	r2, r3
 8005072:	d102      	bne.n	800507a <_strtod_l+0x8aa>
 8005074:	3101      	adds	r1, #1
 8005076:	f43f adc6 	beq.w	8004c06 <_strtod_l+0x436>
 800507a:	f04f 0a00 	mov.w	sl, #0
 800507e:	4b8b      	ldr	r3, [pc, #556]	@ (80052ac <_strtod_l+0xadc>)
 8005080:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005082:	401a      	ands	r2, r3
 8005084:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8005088:	9b08      	ldr	r3, [sp, #32]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1b9      	bne.n	8005002 <_strtod_l+0x832>
 800508e:	e5c5      	b.n	8004c1c <_strtod_l+0x44c>
 8005090:	f04f 33ff 	mov.w	r3, #4294967295
 8005094:	e7e8      	b.n	8005068 <_strtod_l+0x898>
 8005096:	4613      	mov	r3, r2
 8005098:	e7e6      	b.n	8005068 <_strtod_l+0x898>
 800509a:	ea53 030a 	orrs.w	r3, r3, sl
 800509e:	d0a2      	beq.n	8004fe6 <_strtod_l+0x816>
 80050a0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80050a2:	b1db      	cbz	r3, 80050dc <_strtod_l+0x90c>
 80050a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80050a6:	4213      	tst	r3, r2
 80050a8:	d0ee      	beq.n	8005088 <_strtod_l+0x8b8>
 80050aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80050ac:	4650      	mov	r0, sl
 80050ae:	4659      	mov	r1, fp
 80050b0:	9a08      	ldr	r2, [sp, #32]
 80050b2:	b1bb      	cbz	r3, 80050e4 <_strtod_l+0x914>
 80050b4:	f7ff fb68 	bl	8004788 <sulp>
 80050b8:	4602      	mov	r2, r0
 80050ba:	460b      	mov	r3, r1
 80050bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80050c0:	f7fb f854 	bl	800016c <__adddf3>
 80050c4:	4682      	mov	sl, r0
 80050c6:	468b      	mov	fp, r1
 80050c8:	e7de      	b.n	8005088 <_strtod_l+0x8b8>
 80050ca:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80050ce:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80050d2:	f04f 3aff 	mov.w	sl, #4294967295
 80050d6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80050da:	e7d5      	b.n	8005088 <_strtod_l+0x8b8>
 80050dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80050de:	ea13 0f0a 	tst.w	r3, sl
 80050e2:	e7e1      	b.n	80050a8 <_strtod_l+0x8d8>
 80050e4:	f7ff fb50 	bl	8004788 <sulp>
 80050e8:	4602      	mov	r2, r0
 80050ea:	460b      	mov	r3, r1
 80050ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80050f0:	f7fb f83a 	bl	8000168 <__aeabi_dsub>
 80050f4:	2200      	movs	r2, #0
 80050f6:	2300      	movs	r3, #0
 80050f8:	4682      	mov	sl, r0
 80050fa:	468b      	mov	fp, r1
 80050fc:	f7fb fc54 	bl	80009a8 <__aeabi_dcmpeq>
 8005100:	2800      	cmp	r0, #0
 8005102:	d0c1      	beq.n	8005088 <_strtod_l+0x8b8>
 8005104:	e615      	b.n	8004d32 <_strtod_l+0x562>
 8005106:	4641      	mov	r1, r8
 8005108:	4620      	mov	r0, r4
 800510a:	f7ff fac9 	bl	80046a0 <__ratio>
 800510e:	2200      	movs	r2, #0
 8005110:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005114:	4606      	mov	r6, r0
 8005116:	460f      	mov	r7, r1
 8005118:	f7fb fc5a 	bl	80009d0 <__aeabi_dcmple>
 800511c:	2800      	cmp	r0, #0
 800511e:	d06d      	beq.n	80051fc <_strtod_l+0xa2c>
 8005120:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005122:	2b00      	cmp	r3, #0
 8005124:	d178      	bne.n	8005218 <_strtod_l+0xa48>
 8005126:	f1ba 0f00 	cmp.w	sl, #0
 800512a:	d156      	bne.n	80051da <_strtod_l+0xa0a>
 800512c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800512e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005132:	2b00      	cmp	r3, #0
 8005134:	d158      	bne.n	80051e8 <_strtod_l+0xa18>
 8005136:	2200      	movs	r2, #0
 8005138:	4630      	mov	r0, r6
 800513a:	4639      	mov	r1, r7
 800513c:	4b5d      	ldr	r3, [pc, #372]	@ (80052b4 <_strtod_l+0xae4>)
 800513e:	f7fb fc3d 	bl	80009bc <__aeabi_dcmplt>
 8005142:	2800      	cmp	r0, #0
 8005144:	d157      	bne.n	80051f6 <_strtod_l+0xa26>
 8005146:	4630      	mov	r0, r6
 8005148:	4639      	mov	r1, r7
 800514a:	2200      	movs	r2, #0
 800514c:	4b5a      	ldr	r3, [pc, #360]	@ (80052b8 <_strtod_l+0xae8>)
 800514e:	f7fb f9c3 	bl	80004d8 <__aeabi_dmul>
 8005152:	4606      	mov	r6, r0
 8005154:	460f      	mov	r7, r1
 8005156:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800515a:	9606      	str	r6, [sp, #24]
 800515c:	9307      	str	r3, [sp, #28]
 800515e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005162:	4d52      	ldr	r5, [pc, #328]	@ (80052ac <_strtod_l+0xadc>)
 8005164:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005168:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800516a:	401d      	ands	r5, r3
 800516c:	4b53      	ldr	r3, [pc, #332]	@ (80052bc <_strtod_l+0xaec>)
 800516e:	429d      	cmp	r5, r3
 8005170:	f040 80aa 	bne.w	80052c8 <_strtod_l+0xaf8>
 8005174:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005176:	4650      	mov	r0, sl
 8005178:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800517c:	4659      	mov	r1, fp
 800517e:	f7ff f9cf 	bl	8004520 <__ulp>
 8005182:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005186:	f7fb f9a7 	bl	80004d8 <__aeabi_dmul>
 800518a:	4652      	mov	r2, sl
 800518c:	465b      	mov	r3, fp
 800518e:	f7fa ffed 	bl	800016c <__adddf3>
 8005192:	460b      	mov	r3, r1
 8005194:	4945      	ldr	r1, [pc, #276]	@ (80052ac <_strtod_l+0xadc>)
 8005196:	4a4a      	ldr	r2, [pc, #296]	@ (80052c0 <_strtod_l+0xaf0>)
 8005198:	4019      	ands	r1, r3
 800519a:	4291      	cmp	r1, r2
 800519c:	4682      	mov	sl, r0
 800519e:	d942      	bls.n	8005226 <_strtod_l+0xa56>
 80051a0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80051a2:	4b43      	ldr	r3, [pc, #268]	@ (80052b0 <_strtod_l+0xae0>)
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d103      	bne.n	80051b0 <_strtod_l+0x9e0>
 80051a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80051aa:	3301      	adds	r3, #1
 80051ac:	f43f ad2b 	beq.w	8004c06 <_strtod_l+0x436>
 80051b0:	f04f 3aff 	mov.w	sl, #4294967295
 80051b4:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 80052b0 <_strtod_l+0xae0>
 80051b8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80051ba:	9805      	ldr	r0, [sp, #20]
 80051bc:	f7fe fe7e 	bl	8003ebc <_Bfree>
 80051c0:	4649      	mov	r1, r9
 80051c2:	9805      	ldr	r0, [sp, #20]
 80051c4:	f7fe fe7a 	bl	8003ebc <_Bfree>
 80051c8:	4641      	mov	r1, r8
 80051ca:	9805      	ldr	r0, [sp, #20]
 80051cc:	f7fe fe76 	bl	8003ebc <_Bfree>
 80051d0:	4621      	mov	r1, r4
 80051d2:	9805      	ldr	r0, [sp, #20]
 80051d4:	f7fe fe72 	bl	8003ebc <_Bfree>
 80051d8:	e618      	b.n	8004e0c <_strtod_l+0x63c>
 80051da:	f1ba 0f01 	cmp.w	sl, #1
 80051de:	d103      	bne.n	80051e8 <_strtod_l+0xa18>
 80051e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	f43f ada5 	beq.w	8004d32 <_strtod_l+0x562>
 80051e8:	2200      	movs	r2, #0
 80051ea:	4b36      	ldr	r3, [pc, #216]	@ (80052c4 <_strtod_l+0xaf4>)
 80051ec:	2600      	movs	r6, #0
 80051ee:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80051f2:	4f30      	ldr	r7, [pc, #192]	@ (80052b4 <_strtod_l+0xae4>)
 80051f4:	e7b3      	b.n	800515e <_strtod_l+0x98e>
 80051f6:	2600      	movs	r6, #0
 80051f8:	4f2f      	ldr	r7, [pc, #188]	@ (80052b8 <_strtod_l+0xae8>)
 80051fa:	e7ac      	b.n	8005156 <_strtod_l+0x986>
 80051fc:	4630      	mov	r0, r6
 80051fe:	4639      	mov	r1, r7
 8005200:	4b2d      	ldr	r3, [pc, #180]	@ (80052b8 <_strtod_l+0xae8>)
 8005202:	2200      	movs	r2, #0
 8005204:	f7fb f968 	bl	80004d8 <__aeabi_dmul>
 8005208:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800520a:	4606      	mov	r6, r0
 800520c:	460f      	mov	r7, r1
 800520e:	2b00      	cmp	r3, #0
 8005210:	d0a1      	beq.n	8005156 <_strtod_l+0x986>
 8005212:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8005216:	e7a2      	b.n	800515e <_strtod_l+0x98e>
 8005218:	2200      	movs	r2, #0
 800521a:	4b26      	ldr	r3, [pc, #152]	@ (80052b4 <_strtod_l+0xae4>)
 800521c:	4616      	mov	r6, r2
 800521e:	461f      	mov	r7, r3
 8005220:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005224:	e79b      	b.n	800515e <_strtod_l+0x98e>
 8005226:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800522a:	9b08      	ldr	r3, [sp, #32]
 800522c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8005230:	2b00      	cmp	r3, #0
 8005232:	d1c1      	bne.n	80051b8 <_strtod_l+0x9e8>
 8005234:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005238:	0d1b      	lsrs	r3, r3, #20
 800523a:	051b      	lsls	r3, r3, #20
 800523c:	429d      	cmp	r5, r3
 800523e:	d1bb      	bne.n	80051b8 <_strtod_l+0x9e8>
 8005240:	4630      	mov	r0, r6
 8005242:	4639      	mov	r1, r7
 8005244:	f7fb fc90 	bl	8000b68 <__aeabi_d2lz>
 8005248:	f7fb f918 	bl	800047c <__aeabi_l2d>
 800524c:	4602      	mov	r2, r0
 800524e:	460b      	mov	r3, r1
 8005250:	4630      	mov	r0, r6
 8005252:	4639      	mov	r1, r7
 8005254:	f7fa ff88 	bl	8000168 <__aeabi_dsub>
 8005258:	460b      	mov	r3, r1
 800525a:	4602      	mov	r2, r0
 800525c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8005260:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005264:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005266:	ea46 060a 	orr.w	r6, r6, sl
 800526a:	431e      	orrs	r6, r3
 800526c:	d069      	beq.n	8005342 <_strtod_l+0xb72>
 800526e:	a30a      	add	r3, pc, #40	@ (adr r3, 8005298 <_strtod_l+0xac8>)
 8005270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005274:	f7fb fba2 	bl	80009bc <__aeabi_dcmplt>
 8005278:	2800      	cmp	r0, #0
 800527a:	f47f accf 	bne.w	8004c1c <_strtod_l+0x44c>
 800527e:	a308      	add	r3, pc, #32	@ (adr r3, 80052a0 <_strtod_l+0xad0>)
 8005280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005284:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005288:	f7fb fbb6 	bl	80009f8 <__aeabi_dcmpgt>
 800528c:	2800      	cmp	r0, #0
 800528e:	d093      	beq.n	80051b8 <_strtod_l+0x9e8>
 8005290:	e4c4      	b.n	8004c1c <_strtod_l+0x44c>
 8005292:	bf00      	nop
 8005294:	f3af 8000 	nop.w
 8005298:	94a03595 	.word	0x94a03595
 800529c:	3fdfffff 	.word	0x3fdfffff
 80052a0:	35afe535 	.word	0x35afe535
 80052a4:	3fe00000 	.word	0x3fe00000
 80052a8:	000fffff 	.word	0x000fffff
 80052ac:	7ff00000 	.word	0x7ff00000
 80052b0:	7fefffff 	.word	0x7fefffff
 80052b4:	3ff00000 	.word	0x3ff00000
 80052b8:	3fe00000 	.word	0x3fe00000
 80052bc:	7fe00000 	.word	0x7fe00000
 80052c0:	7c9fffff 	.word	0x7c9fffff
 80052c4:	bff00000 	.word	0xbff00000
 80052c8:	9b08      	ldr	r3, [sp, #32]
 80052ca:	b323      	cbz	r3, 8005316 <_strtod_l+0xb46>
 80052cc:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80052d0:	d821      	bhi.n	8005316 <_strtod_l+0xb46>
 80052d2:	a327      	add	r3, pc, #156	@ (adr r3, 8005370 <_strtod_l+0xba0>)
 80052d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d8:	4630      	mov	r0, r6
 80052da:	4639      	mov	r1, r7
 80052dc:	f7fb fb78 	bl	80009d0 <__aeabi_dcmple>
 80052e0:	b1a0      	cbz	r0, 800530c <_strtod_l+0xb3c>
 80052e2:	4639      	mov	r1, r7
 80052e4:	4630      	mov	r0, r6
 80052e6:	f7fb fbcf 	bl	8000a88 <__aeabi_d2uiz>
 80052ea:	2801      	cmp	r0, #1
 80052ec:	bf38      	it	cc
 80052ee:	2001      	movcc	r0, #1
 80052f0:	f7fb f878 	bl	80003e4 <__aeabi_ui2d>
 80052f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80052f6:	4606      	mov	r6, r0
 80052f8:	460f      	mov	r7, r1
 80052fa:	b9fb      	cbnz	r3, 800533c <_strtod_l+0xb6c>
 80052fc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005300:	9014      	str	r0, [sp, #80]	@ 0x50
 8005302:	9315      	str	r3, [sp, #84]	@ 0x54
 8005304:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8005308:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800530c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800530e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8005312:	1b5b      	subs	r3, r3, r5
 8005314:	9311      	str	r3, [sp, #68]	@ 0x44
 8005316:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800531a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800531e:	f7ff f8ff 	bl	8004520 <__ulp>
 8005322:	4602      	mov	r2, r0
 8005324:	460b      	mov	r3, r1
 8005326:	4650      	mov	r0, sl
 8005328:	4659      	mov	r1, fp
 800532a:	f7fb f8d5 	bl	80004d8 <__aeabi_dmul>
 800532e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005332:	f7fa ff1b 	bl	800016c <__adddf3>
 8005336:	4682      	mov	sl, r0
 8005338:	468b      	mov	fp, r1
 800533a:	e776      	b.n	800522a <_strtod_l+0xa5a>
 800533c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8005340:	e7e0      	b.n	8005304 <_strtod_l+0xb34>
 8005342:	a30d      	add	r3, pc, #52	@ (adr r3, 8005378 <_strtod_l+0xba8>)
 8005344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005348:	f7fb fb38 	bl	80009bc <__aeabi_dcmplt>
 800534c:	e79e      	b.n	800528c <_strtod_l+0xabc>
 800534e:	2300      	movs	r3, #0
 8005350:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005352:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005354:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8005356:	6013      	str	r3, [r2, #0]
 8005358:	f7ff ba77 	b.w	800484a <_strtod_l+0x7a>
 800535c:	2a65      	cmp	r2, #101	@ 0x65
 800535e:	f43f ab6e 	beq.w	8004a3e <_strtod_l+0x26e>
 8005362:	2a45      	cmp	r2, #69	@ 0x45
 8005364:	f43f ab6b 	beq.w	8004a3e <_strtod_l+0x26e>
 8005368:	2301      	movs	r3, #1
 800536a:	f7ff bba6 	b.w	8004aba <_strtod_l+0x2ea>
 800536e:	bf00      	nop
 8005370:	ffc00000 	.word	0xffc00000
 8005374:	41dfffff 	.word	0x41dfffff
 8005378:	94a03595 	.word	0x94a03595
 800537c:	3fcfffff 	.word	0x3fcfffff

08005380 <_strtod_r>:
 8005380:	4b01      	ldr	r3, [pc, #4]	@ (8005388 <_strtod_r+0x8>)
 8005382:	f7ff ba25 	b.w	80047d0 <_strtod_l>
 8005386:	bf00      	nop
 8005388:	20000068 	.word	0x20000068

0800538c <_strtol_l.constprop.0>:
 800538c:	2b24      	cmp	r3, #36	@ 0x24
 800538e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005392:	4686      	mov	lr, r0
 8005394:	4690      	mov	r8, r2
 8005396:	d801      	bhi.n	800539c <_strtol_l.constprop.0+0x10>
 8005398:	2b01      	cmp	r3, #1
 800539a:	d106      	bne.n	80053aa <_strtol_l.constprop.0+0x1e>
 800539c:	f7fd fdbe 	bl	8002f1c <__errno>
 80053a0:	2316      	movs	r3, #22
 80053a2:	6003      	str	r3, [r0, #0]
 80053a4:	2000      	movs	r0, #0
 80053a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053aa:	460d      	mov	r5, r1
 80053ac:	4833      	ldr	r0, [pc, #204]	@ (800547c <_strtol_l.constprop.0+0xf0>)
 80053ae:	462a      	mov	r2, r5
 80053b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80053b4:	5d06      	ldrb	r6, [r0, r4]
 80053b6:	f016 0608 	ands.w	r6, r6, #8
 80053ba:	d1f8      	bne.n	80053ae <_strtol_l.constprop.0+0x22>
 80053bc:	2c2d      	cmp	r4, #45	@ 0x2d
 80053be:	d12d      	bne.n	800541c <_strtol_l.constprop.0+0x90>
 80053c0:	2601      	movs	r6, #1
 80053c2:	782c      	ldrb	r4, [r5, #0]
 80053c4:	1c95      	adds	r5, r2, #2
 80053c6:	f033 0210 	bics.w	r2, r3, #16
 80053ca:	d109      	bne.n	80053e0 <_strtol_l.constprop.0+0x54>
 80053cc:	2c30      	cmp	r4, #48	@ 0x30
 80053ce:	d12a      	bne.n	8005426 <_strtol_l.constprop.0+0x9a>
 80053d0:	782a      	ldrb	r2, [r5, #0]
 80053d2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80053d6:	2a58      	cmp	r2, #88	@ 0x58
 80053d8:	d125      	bne.n	8005426 <_strtol_l.constprop.0+0x9a>
 80053da:	2310      	movs	r3, #16
 80053dc:	786c      	ldrb	r4, [r5, #1]
 80053de:	3502      	adds	r5, #2
 80053e0:	2200      	movs	r2, #0
 80053e2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80053e6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80053ea:	fbbc f9f3 	udiv	r9, ip, r3
 80053ee:	4610      	mov	r0, r2
 80053f0:	fb03 ca19 	mls	sl, r3, r9, ip
 80053f4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80053f8:	2f09      	cmp	r7, #9
 80053fa:	d81b      	bhi.n	8005434 <_strtol_l.constprop.0+0xa8>
 80053fc:	463c      	mov	r4, r7
 80053fe:	42a3      	cmp	r3, r4
 8005400:	dd27      	ble.n	8005452 <_strtol_l.constprop.0+0xc6>
 8005402:	1c57      	adds	r7, r2, #1
 8005404:	d007      	beq.n	8005416 <_strtol_l.constprop.0+0x8a>
 8005406:	4581      	cmp	r9, r0
 8005408:	d320      	bcc.n	800544c <_strtol_l.constprop.0+0xc0>
 800540a:	d101      	bne.n	8005410 <_strtol_l.constprop.0+0x84>
 800540c:	45a2      	cmp	sl, r4
 800540e:	db1d      	blt.n	800544c <_strtol_l.constprop.0+0xc0>
 8005410:	2201      	movs	r2, #1
 8005412:	fb00 4003 	mla	r0, r0, r3, r4
 8005416:	f815 4b01 	ldrb.w	r4, [r5], #1
 800541a:	e7eb      	b.n	80053f4 <_strtol_l.constprop.0+0x68>
 800541c:	2c2b      	cmp	r4, #43	@ 0x2b
 800541e:	bf04      	itt	eq
 8005420:	782c      	ldrbeq	r4, [r5, #0]
 8005422:	1c95      	addeq	r5, r2, #2
 8005424:	e7cf      	b.n	80053c6 <_strtol_l.constprop.0+0x3a>
 8005426:	2b00      	cmp	r3, #0
 8005428:	d1da      	bne.n	80053e0 <_strtol_l.constprop.0+0x54>
 800542a:	2c30      	cmp	r4, #48	@ 0x30
 800542c:	bf0c      	ite	eq
 800542e:	2308      	moveq	r3, #8
 8005430:	230a      	movne	r3, #10
 8005432:	e7d5      	b.n	80053e0 <_strtol_l.constprop.0+0x54>
 8005434:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005438:	2f19      	cmp	r7, #25
 800543a:	d801      	bhi.n	8005440 <_strtol_l.constprop.0+0xb4>
 800543c:	3c37      	subs	r4, #55	@ 0x37
 800543e:	e7de      	b.n	80053fe <_strtol_l.constprop.0+0x72>
 8005440:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005444:	2f19      	cmp	r7, #25
 8005446:	d804      	bhi.n	8005452 <_strtol_l.constprop.0+0xc6>
 8005448:	3c57      	subs	r4, #87	@ 0x57
 800544a:	e7d8      	b.n	80053fe <_strtol_l.constprop.0+0x72>
 800544c:	f04f 32ff 	mov.w	r2, #4294967295
 8005450:	e7e1      	b.n	8005416 <_strtol_l.constprop.0+0x8a>
 8005452:	1c53      	adds	r3, r2, #1
 8005454:	d108      	bne.n	8005468 <_strtol_l.constprop.0+0xdc>
 8005456:	2322      	movs	r3, #34	@ 0x22
 8005458:	4660      	mov	r0, ip
 800545a:	f8ce 3000 	str.w	r3, [lr]
 800545e:	f1b8 0f00 	cmp.w	r8, #0
 8005462:	d0a0      	beq.n	80053a6 <_strtol_l.constprop.0+0x1a>
 8005464:	1e69      	subs	r1, r5, #1
 8005466:	e006      	b.n	8005476 <_strtol_l.constprop.0+0xea>
 8005468:	b106      	cbz	r6, 800546c <_strtol_l.constprop.0+0xe0>
 800546a:	4240      	negs	r0, r0
 800546c:	f1b8 0f00 	cmp.w	r8, #0
 8005470:	d099      	beq.n	80053a6 <_strtol_l.constprop.0+0x1a>
 8005472:	2a00      	cmp	r2, #0
 8005474:	d1f6      	bne.n	8005464 <_strtol_l.constprop.0+0xd8>
 8005476:	f8c8 1000 	str.w	r1, [r8]
 800547a:	e794      	b.n	80053a6 <_strtol_l.constprop.0+0x1a>
 800547c:	080068c1 	.word	0x080068c1

08005480 <_strtol_r>:
 8005480:	f7ff bf84 	b.w	800538c <_strtol_l.constprop.0>

08005484 <__ssputs_r>:
 8005484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005488:	461f      	mov	r7, r3
 800548a:	688e      	ldr	r6, [r1, #8]
 800548c:	4682      	mov	sl, r0
 800548e:	42be      	cmp	r6, r7
 8005490:	460c      	mov	r4, r1
 8005492:	4690      	mov	r8, r2
 8005494:	680b      	ldr	r3, [r1, #0]
 8005496:	d82d      	bhi.n	80054f4 <__ssputs_r+0x70>
 8005498:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800549c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80054a0:	d026      	beq.n	80054f0 <__ssputs_r+0x6c>
 80054a2:	6965      	ldr	r5, [r4, #20]
 80054a4:	6909      	ldr	r1, [r1, #16]
 80054a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80054aa:	eba3 0901 	sub.w	r9, r3, r1
 80054ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80054b2:	1c7b      	adds	r3, r7, #1
 80054b4:	444b      	add	r3, r9
 80054b6:	106d      	asrs	r5, r5, #1
 80054b8:	429d      	cmp	r5, r3
 80054ba:	bf38      	it	cc
 80054bc:	461d      	movcc	r5, r3
 80054be:	0553      	lsls	r3, r2, #21
 80054c0:	d527      	bpl.n	8005512 <__ssputs_r+0x8e>
 80054c2:	4629      	mov	r1, r5
 80054c4:	f7fe fc2e 	bl	8003d24 <_malloc_r>
 80054c8:	4606      	mov	r6, r0
 80054ca:	b360      	cbz	r0, 8005526 <__ssputs_r+0xa2>
 80054cc:	464a      	mov	r2, r9
 80054ce:	6921      	ldr	r1, [r4, #16]
 80054d0:	f000 fa14 	bl	80058fc <memcpy>
 80054d4:	89a3      	ldrh	r3, [r4, #12]
 80054d6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80054da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054de:	81a3      	strh	r3, [r4, #12]
 80054e0:	6126      	str	r6, [r4, #16]
 80054e2:	444e      	add	r6, r9
 80054e4:	6026      	str	r6, [r4, #0]
 80054e6:	463e      	mov	r6, r7
 80054e8:	6165      	str	r5, [r4, #20]
 80054ea:	eba5 0509 	sub.w	r5, r5, r9
 80054ee:	60a5      	str	r5, [r4, #8]
 80054f0:	42be      	cmp	r6, r7
 80054f2:	d900      	bls.n	80054f6 <__ssputs_r+0x72>
 80054f4:	463e      	mov	r6, r7
 80054f6:	4632      	mov	r2, r6
 80054f8:	4641      	mov	r1, r8
 80054fa:	6820      	ldr	r0, [r4, #0]
 80054fc:	f000 f9c2 	bl	8005884 <memmove>
 8005500:	2000      	movs	r0, #0
 8005502:	68a3      	ldr	r3, [r4, #8]
 8005504:	1b9b      	subs	r3, r3, r6
 8005506:	60a3      	str	r3, [r4, #8]
 8005508:	6823      	ldr	r3, [r4, #0]
 800550a:	4433      	add	r3, r6
 800550c:	6023      	str	r3, [r4, #0]
 800550e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005512:	462a      	mov	r2, r5
 8005514:	f000 fd83 	bl	800601e <_realloc_r>
 8005518:	4606      	mov	r6, r0
 800551a:	2800      	cmp	r0, #0
 800551c:	d1e0      	bne.n	80054e0 <__ssputs_r+0x5c>
 800551e:	4650      	mov	r0, sl
 8005520:	6921      	ldr	r1, [r4, #16]
 8005522:	f7fe fb8d 	bl	8003c40 <_free_r>
 8005526:	230c      	movs	r3, #12
 8005528:	f8ca 3000 	str.w	r3, [sl]
 800552c:	89a3      	ldrh	r3, [r4, #12]
 800552e:	f04f 30ff 	mov.w	r0, #4294967295
 8005532:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005536:	81a3      	strh	r3, [r4, #12]
 8005538:	e7e9      	b.n	800550e <__ssputs_r+0x8a>
	...

0800553c <_svfiprintf_r>:
 800553c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005540:	4698      	mov	r8, r3
 8005542:	898b      	ldrh	r3, [r1, #12]
 8005544:	4607      	mov	r7, r0
 8005546:	061b      	lsls	r3, r3, #24
 8005548:	460d      	mov	r5, r1
 800554a:	4614      	mov	r4, r2
 800554c:	b09d      	sub	sp, #116	@ 0x74
 800554e:	d510      	bpl.n	8005572 <_svfiprintf_r+0x36>
 8005550:	690b      	ldr	r3, [r1, #16]
 8005552:	b973      	cbnz	r3, 8005572 <_svfiprintf_r+0x36>
 8005554:	2140      	movs	r1, #64	@ 0x40
 8005556:	f7fe fbe5 	bl	8003d24 <_malloc_r>
 800555a:	6028      	str	r0, [r5, #0]
 800555c:	6128      	str	r0, [r5, #16]
 800555e:	b930      	cbnz	r0, 800556e <_svfiprintf_r+0x32>
 8005560:	230c      	movs	r3, #12
 8005562:	603b      	str	r3, [r7, #0]
 8005564:	f04f 30ff 	mov.w	r0, #4294967295
 8005568:	b01d      	add	sp, #116	@ 0x74
 800556a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800556e:	2340      	movs	r3, #64	@ 0x40
 8005570:	616b      	str	r3, [r5, #20]
 8005572:	2300      	movs	r3, #0
 8005574:	9309      	str	r3, [sp, #36]	@ 0x24
 8005576:	2320      	movs	r3, #32
 8005578:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800557c:	2330      	movs	r3, #48	@ 0x30
 800557e:	f04f 0901 	mov.w	r9, #1
 8005582:	f8cd 800c 	str.w	r8, [sp, #12]
 8005586:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005720 <_svfiprintf_r+0x1e4>
 800558a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800558e:	4623      	mov	r3, r4
 8005590:	469a      	mov	sl, r3
 8005592:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005596:	b10a      	cbz	r2, 800559c <_svfiprintf_r+0x60>
 8005598:	2a25      	cmp	r2, #37	@ 0x25
 800559a:	d1f9      	bne.n	8005590 <_svfiprintf_r+0x54>
 800559c:	ebba 0b04 	subs.w	fp, sl, r4
 80055a0:	d00b      	beq.n	80055ba <_svfiprintf_r+0x7e>
 80055a2:	465b      	mov	r3, fp
 80055a4:	4622      	mov	r2, r4
 80055a6:	4629      	mov	r1, r5
 80055a8:	4638      	mov	r0, r7
 80055aa:	f7ff ff6b 	bl	8005484 <__ssputs_r>
 80055ae:	3001      	adds	r0, #1
 80055b0:	f000 80a7 	beq.w	8005702 <_svfiprintf_r+0x1c6>
 80055b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80055b6:	445a      	add	r2, fp
 80055b8:	9209      	str	r2, [sp, #36]	@ 0x24
 80055ba:	f89a 3000 	ldrb.w	r3, [sl]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	f000 809f 	beq.w	8005702 <_svfiprintf_r+0x1c6>
 80055c4:	2300      	movs	r3, #0
 80055c6:	f04f 32ff 	mov.w	r2, #4294967295
 80055ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055ce:	f10a 0a01 	add.w	sl, sl, #1
 80055d2:	9304      	str	r3, [sp, #16]
 80055d4:	9307      	str	r3, [sp, #28]
 80055d6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80055da:	931a      	str	r3, [sp, #104]	@ 0x68
 80055dc:	4654      	mov	r4, sl
 80055de:	2205      	movs	r2, #5
 80055e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055e4:	484e      	ldr	r0, [pc, #312]	@ (8005720 <_svfiprintf_r+0x1e4>)
 80055e6:	f7fd fcc6 	bl	8002f76 <memchr>
 80055ea:	9a04      	ldr	r2, [sp, #16]
 80055ec:	b9d8      	cbnz	r0, 8005626 <_svfiprintf_r+0xea>
 80055ee:	06d0      	lsls	r0, r2, #27
 80055f0:	bf44      	itt	mi
 80055f2:	2320      	movmi	r3, #32
 80055f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80055f8:	0711      	lsls	r1, r2, #28
 80055fa:	bf44      	itt	mi
 80055fc:	232b      	movmi	r3, #43	@ 0x2b
 80055fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005602:	f89a 3000 	ldrb.w	r3, [sl]
 8005606:	2b2a      	cmp	r3, #42	@ 0x2a
 8005608:	d015      	beq.n	8005636 <_svfiprintf_r+0xfa>
 800560a:	4654      	mov	r4, sl
 800560c:	2000      	movs	r0, #0
 800560e:	f04f 0c0a 	mov.w	ip, #10
 8005612:	9a07      	ldr	r2, [sp, #28]
 8005614:	4621      	mov	r1, r4
 8005616:	f811 3b01 	ldrb.w	r3, [r1], #1
 800561a:	3b30      	subs	r3, #48	@ 0x30
 800561c:	2b09      	cmp	r3, #9
 800561e:	d94b      	bls.n	80056b8 <_svfiprintf_r+0x17c>
 8005620:	b1b0      	cbz	r0, 8005650 <_svfiprintf_r+0x114>
 8005622:	9207      	str	r2, [sp, #28]
 8005624:	e014      	b.n	8005650 <_svfiprintf_r+0x114>
 8005626:	eba0 0308 	sub.w	r3, r0, r8
 800562a:	fa09 f303 	lsl.w	r3, r9, r3
 800562e:	4313      	orrs	r3, r2
 8005630:	46a2      	mov	sl, r4
 8005632:	9304      	str	r3, [sp, #16]
 8005634:	e7d2      	b.n	80055dc <_svfiprintf_r+0xa0>
 8005636:	9b03      	ldr	r3, [sp, #12]
 8005638:	1d19      	adds	r1, r3, #4
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	9103      	str	r1, [sp, #12]
 800563e:	2b00      	cmp	r3, #0
 8005640:	bfbb      	ittet	lt
 8005642:	425b      	neglt	r3, r3
 8005644:	f042 0202 	orrlt.w	r2, r2, #2
 8005648:	9307      	strge	r3, [sp, #28]
 800564a:	9307      	strlt	r3, [sp, #28]
 800564c:	bfb8      	it	lt
 800564e:	9204      	strlt	r2, [sp, #16]
 8005650:	7823      	ldrb	r3, [r4, #0]
 8005652:	2b2e      	cmp	r3, #46	@ 0x2e
 8005654:	d10a      	bne.n	800566c <_svfiprintf_r+0x130>
 8005656:	7863      	ldrb	r3, [r4, #1]
 8005658:	2b2a      	cmp	r3, #42	@ 0x2a
 800565a:	d132      	bne.n	80056c2 <_svfiprintf_r+0x186>
 800565c:	9b03      	ldr	r3, [sp, #12]
 800565e:	3402      	adds	r4, #2
 8005660:	1d1a      	adds	r2, r3, #4
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	9203      	str	r2, [sp, #12]
 8005666:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800566a:	9305      	str	r3, [sp, #20]
 800566c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005724 <_svfiprintf_r+0x1e8>
 8005670:	2203      	movs	r2, #3
 8005672:	4650      	mov	r0, sl
 8005674:	7821      	ldrb	r1, [r4, #0]
 8005676:	f7fd fc7e 	bl	8002f76 <memchr>
 800567a:	b138      	cbz	r0, 800568c <_svfiprintf_r+0x150>
 800567c:	2240      	movs	r2, #64	@ 0x40
 800567e:	9b04      	ldr	r3, [sp, #16]
 8005680:	eba0 000a 	sub.w	r0, r0, sl
 8005684:	4082      	lsls	r2, r0
 8005686:	4313      	orrs	r3, r2
 8005688:	3401      	adds	r4, #1
 800568a:	9304      	str	r3, [sp, #16]
 800568c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005690:	2206      	movs	r2, #6
 8005692:	4825      	ldr	r0, [pc, #148]	@ (8005728 <_svfiprintf_r+0x1ec>)
 8005694:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005698:	f7fd fc6d 	bl	8002f76 <memchr>
 800569c:	2800      	cmp	r0, #0
 800569e:	d036      	beq.n	800570e <_svfiprintf_r+0x1d2>
 80056a0:	4b22      	ldr	r3, [pc, #136]	@ (800572c <_svfiprintf_r+0x1f0>)
 80056a2:	bb1b      	cbnz	r3, 80056ec <_svfiprintf_r+0x1b0>
 80056a4:	9b03      	ldr	r3, [sp, #12]
 80056a6:	3307      	adds	r3, #7
 80056a8:	f023 0307 	bic.w	r3, r3, #7
 80056ac:	3308      	adds	r3, #8
 80056ae:	9303      	str	r3, [sp, #12]
 80056b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056b2:	4433      	add	r3, r6
 80056b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80056b6:	e76a      	b.n	800558e <_svfiprintf_r+0x52>
 80056b8:	460c      	mov	r4, r1
 80056ba:	2001      	movs	r0, #1
 80056bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80056c0:	e7a8      	b.n	8005614 <_svfiprintf_r+0xd8>
 80056c2:	2300      	movs	r3, #0
 80056c4:	f04f 0c0a 	mov.w	ip, #10
 80056c8:	4619      	mov	r1, r3
 80056ca:	3401      	adds	r4, #1
 80056cc:	9305      	str	r3, [sp, #20]
 80056ce:	4620      	mov	r0, r4
 80056d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056d4:	3a30      	subs	r2, #48	@ 0x30
 80056d6:	2a09      	cmp	r2, #9
 80056d8:	d903      	bls.n	80056e2 <_svfiprintf_r+0x1a6>
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d0c6      	beq.n	800566c <_svfiprintf_r+0x130>
 80056de:	9105      	str	r1, [sp, #20]
 80056e0:	e7c4      	b.n	800566c <_svfiprintf_r+0x130>
 80056e2:	4604      	mov	r4, r0
 80056e4:	2301      	movs	r3, #1
 80056e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80056ea:	e7f0      	b.n	80056ce <_svfiprintf_r+0x192>
 80056ec:	ab03      	add	r3, sp, #12
 80056ee:	9300      	str	r3, [sp, #0]
 80056f0:	462a      	mov	r2, r5
 80056f2:	4638      	mov	r0, r7
 80056f4:	4b0e      	ldr	r3, [pc, #56]	@ (8005730 <_svfiprintf_r+0x1f4>)
 80056f6:	a904      	add	r1, sp, #16
 80056f8:	f7fc fcca 	bl	8002090 <_printf_float>
 80056fc:	1c42      	adds	r2, r0, #1
 80056fe:	4606      	mov	r6, r0
 8005700:	d1d6      	bne.n	80056b0 <_svfiprintf_r+0x174>
 8005702:	89ab      	ldrh	r3, [r5, #12]
 8005704:	065b      	lsls	r3, r3, #25
 8005706:	f53f af2d 	bmi.w	8005564 <_svfiprintf_r+0x28>
 800570a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800570c:	e72c      	b.n	8005568 <_svfiprintf_r+0x2c>
 800570e:	ab03      	add	r3, sp, #12
 8005710:	9300      	str	r3, [sp, #0]
 8005712:	462a      	mov	r2, r5
 8005714:	4638      	mov	r0, r7
 8005716:	4b06      	ldr	r3, [pc, #24]	@ (8005730 <_svfiprintf_r+0x1f4>)
 8005718:	a904      	add	r1, sp, #16
 800571a:	f7fc ff57 	bl	80025cc <_printf_i>
 800571e:	e7ed      	b.n	80056fc <_svfiprintf_r+0x1c0>
 8005720:	080069c1 	.word	0x080069c1
 8005724:	080069c7 	.word	0x080069c7
 8005728:	080069cb 	.word	0x080069cb
 800572c:	08002091 	.word	0x08002091
 8005730:	08005485 	.word	0x08005485

08005734 <__sflush_r>:
 8005734:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800573a:	0716      	lsls	r6, r2, #28
 800573c:	4605      	mov	r5, r0
 800573e:	460c      	mov	r4, r1
 8005740:	d454      	bmi.n	80057ec <__sflush_r+0xb8>
 8005742:	684b      	ldr	r3, [r1, #4]
 8005744:	2b00      	cmp	r3, #0
 8005746:	dc02      	bgt.n	800574e <__sflush_r+0x1a>
 8005748:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800574a:	2b00      	cmp	r3, #0
 800574c:	dd48      	ble.n	80057e0 <__sflush_r+0xac>
 800574e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005750:	2e00      	cmp	r6, #0
 8005752:	d045      	beq.n	80057e0 <__sflush_r+0xac>
 8005754:	2300      	movs	r3, #0
 8005756:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800575a:	682f      	ldr	r7, [r5, #0]
 800575c:	6a21      	ldr	r1, [r4, #32]
 800575e:	602b      	str	r3, [r5, #0]
 8005760:	d030      	beq.n	80057c4 <__sflush_r+0x90>
 8005762:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005764:	89a3      	ldrh	r3, [r4, #12]
 8005766:	0759      	lsls	r1, r3, #29
 8005768:	d505      	bpl.n	8005776 <__sflush_r+0x42>
 800576a:	6863      	ldr	r3, [r4, #4]
 800576c:	1ad2      	subs	r2, r2, r3
 800576e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005770:	b10b      	cbz	r3, 8005776 <__sflush_r+0x42>
 8005772:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005774:	1ad2      	subs	r2, r2, r3
 8005776:	2300      	movs	r3, #0
 8005778:	4628      	mov	r0, r5
 800577a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800577c:	6a21      	ldr	r1, [r4, #32]
 800577e:	47b0      	blx	r6
 8005780:	1c43      	adds	r3, r0, #1
 8005782:	89a3      	ldrh	r3, [r4, #12]
 8005784:	d106      	bne.n	8005794 <__sflush_r+0x60>
 8005786:	6829      	ldr	r1, [r5, #0]
 8005788:	291d      	cmp	r1, #29
 800578a:	d82b      	bhi.n	80057e4 <__sflush_r+0xb0>
 800578c:	4a28      	ldr	r2, [pc, #160]	@ (8005830 <__sflush_r+0xfc>)
 800578e:	410a      	asrs	r2, r1
 8005790:	07d6      	lsls	r6, r2, #31
 8005792:	d427      	bmi.n	80057e4 <__sflush_r+0xb0>
 8005794:	2200      	movs	r2, #0
 8005796:	6062      	str	r2, [r4, #4]
 8005798:	6922      	ldr	r2, [r4, #16]
 800579a:	04d9      	lsls	r1, r3, #19
 800579c:	6022      	str	r2, [r4, #0]
 800579e:	d504      	bpl.n	80057aa <__sflush_r+0x76>
 80057a0:	1c42      	adds	r2, r0, #1
 80057a2:	d101      	bne.n	80057a8 <__sflush_r+0x74>
 80057a4:	682b      	ldr	r3, [r5, #0]
 80057a6:	b903      	cbnz	r3, 80057aa <__sflush_r+0x76>
 80057a8:	6560      	str	r0, [r4, #84]	@ 0x54
 80057aa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80057ac:	602f      	str	r7, [r5, #0]
 80057ae:	b1b9      	cbz	r1, 80057e0 <__sflush_r+0xac>
 80057b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80057b4:	4299      	cmp	r1, r3
 80057b6:	d002      	beq.n	80057be <__sflush_r+0x8a>
 80057b8:	4628      	mov	r0, r5
 80057ba:	f7fe fa41 	bl	8003c40 <_free_r>
 80057be:	2300      	movs	r3, #0
 80057c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80057c2:	e00d      	b.n	80057e0 <__sflush_r+0xac>
 80057c4:	2301      	movs	r3, #1
 80057c6:	4628      	mov	r0, r5
 80057c8:	47b0      	blx	r6
 80057ca:	4602      	mov	r2, r0
 80057cc:	1c50      	adds	r0, r2, #1
 80057ce:	d1c9      	bne.n	8005764 <__sflush_r+0x30>
 80057d0:	682b      	ldr	r3, [r5, #0]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d0c6      	beq.n	8005764 <__sflush_r+0x30>
 80057d6:	2b1d      	cmp	r3, #29
 80057d8:	d001      	beq.n	80057de <__sflush_r+0xaa>
 80057da:	2b16      	cmp	r3, #22
 80057dc:	d11d      	bne.n	800581a <__sflush_r+0xe6>
 80057de:	602f      	str	r7, [r5, #0]
 80057e0:	2000      	movs	r0, #0
 80057e2:	e021      	b.n	8005828 <__sflush_r+0xf4>
 80057e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057e8:	b21b      	sxth	r3, r3
 80057ea:	e01a      	b.n	8005822 <__sflush_r+0xee>
 80057ec:	690f      	ldr	r7, [r1, #16]
 80057ee:	2f00      	cmp	r7, #0
 80057f0:	d0f6      	beq.n	80057e0 <__sflush_r+0xac>
 80057f2:	0793      	lsls	r3, r2, #30
 80057f4:	bf18      	it	ne
 80057f6:	2300      	movne	r3, #0
 80057f8:	680e      	ldr	r6, [r1, #0]
 80057fa:	bf08      	it	eq
 80057fc:	694b      	ldreq	r3, [r1, #20]
 80057fe:	1bf6      	subs	r6, r6, r7
 8005800:	600f      	str	r7, [r1, #0]
 8005802:	608b      	str	r3, [r1, #8]
 8005804:	2e00      	cmp	r6, #0
 8005806:	ddeb      	ble.n	80057e0 <__sflush_r+0xac>
 8005808:	4633      	mov	r3, r6
 800580a:	463a      	mov	r2, r7
 800580c:	4628      	mov	r0, r5
 800580e:	6a21      	ldr	r1, [r4, #32]
 8005810:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005814:	47e0      	blx	ip
 8005816:	2800      	cmp	r0, #0
 8005818:	dc07      	bgt.n	800582a <__sflush_r+0xf6>
 800581a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800581e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005822:	f04f 30ff 	mov.w	r0, #4294967295
 8005826:	81a3      	strh	r3, [r4, #12]
 8005828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800582a:	4407      	add	r7, r0
 800582c:	1a36      	subs	r6, r6, r0
 800582e:	e7e9      	b.n	8005804 <__sflush_r+0xd0>
 8005830:	dfbffffe 	.word	0xdfbffffe

08005834 <_fflush_r>:
 8005834:	b538      	push	{r3, r4, r5, lr}
 8005836:	690b      	ldr	r3, [r1, #16]
 8005838:	4605      	mov	r5, r0
 800583a:	460c      	mov	r4, r1
 800583c:	b913      	cbnz	r3, 8005844 <_fflush_r+0x10>
 800583e:	2500      	movs	r5, #0
 8005840:	4628      	mov	r0, r5
 8005842:	bd38      	pop	{r3, r4, r5, pc}
 8005844:	b118      	cbz	r0, 800584e <_fflush_r+0x1a>
 8005846:	6a03      	ldr	r3, [r0, #32]
 8005848:	b90b      	cbnz	r3, 800584e <_fflush_r+0x1a>
 800584a:	f7fd fa7b 	bl	8002d44 <__sinit>
 800584e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d0f3      	beq.n	800583e <_fflush_r+0xa>
 8005856:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005858:	07d0      	lsls	r0, r2, #31
 800585a:	d404      	bmi.n	8005866 <_fflush_r+0x32>
 800585c:	0599      	lsls	r1, r3, #22
 800585e:	d402      	bmi.n	8005866 <_fflush_r+0x32>
 8005860:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005862:	f7fd fb86 	bl	8002f72 <__retarget_lock_acquire_recursive>
 8005866:	4628      	mov	r0, r5
 8005868:	4621      	mov	r1, r4
 800586a:	f7ff ff63 	bl	8005734 <__sflush_r>
 800586e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005870:	4605      	mov	r5, r0
 8005872:	07da      	lsls	r2, r3, #31
 8005874:	d4e4      	bmi.n	8005840 <_fflush_r+0xc>
 8005876:	89a3      	ldrh	r3, [r4, #12]
 8005878:	059b      	lsls	r3, r3, #22
 800587a:	d4e1      	bmi.n	8005840 <_fflush_r+0xc>
 800587c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800587e:	f7fd fb79 	bl	8002f74 <__retarget_lock_release_recursive>
 8005882:	e7dd      	b.n	8005840 <_fflush_r+0xc>

08005884 <memmove>:
 8005884:	4288      	cmp	r0, r1
 8005886:	b510      	push	{r4, lr}
 8005888:	eb01 0402 	add.w	r4, r1, r2
 800588c:	d902      	bls.n	8005894 <memmove+0x10>
 800588e:	4284      	cmp	r4, r0
 8005890:	4623      	mov	r3, r4
 8005892:	d807      	bhi.n	80058a4 <memmove+0x20>
 8005894:	1e43      	subs	r3, r0, #1
 8005896:	42a1      	cmp	r1, r4
 8005898:	d008      	beq.n	80058ac <memmove+0x28>
 800589a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800589e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80058a2:	e7f8      	b.n	8005896 <memmove+0x12>
 80058a4:	4601      	mov	r1, r0
 80058a6:	4402      	add	r2, r0
 80058a8:	428a      	cmp	r2, r1
 80058aa:	d100      	bne.n	80058ae <memmove+0x2a>
 80058ac:	bd10      	pop	{r4, pc}
 80058ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80058b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80058b6:	e7f7      	b.n	80058a8 <memmove+0x24>

080058b8 <strncmp>:
 80058b8:	b510      	push	{r4, lr}
 80058ba:	b16a      	cbz	r2, 80058d8 <strncmp+0x20>
 80058bc:	3901      	subs	r1, #1
 80058be:	1884      	adds	r4, r0, r2
 80058c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058c4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d103      	bne.n	80058d4 <strncmp+0x1c>
 80058cc:	42a0      	cmp	r0, r4
 80058ce:	d001      	beq.n	80058d4 <strncmp+0x1c>
 80058d0:	2a00      	cmp	r2, #0
 80058d2:	d1f5      	bne.n	80058c0 <strncmp+0x8>
 80058d4:	1ad0      	subs	r0, r2, r3
 80058d6:	bd10      	pop	{r4, pc}
 80058d8:	4610      	mov	r0, r2
 80058da:	e7fc      	b.n	80058d6 <strncmp+0x1e>

080058dc <_sbrk_r>:
 80058dc:	b538      	push	{r3, r4, r5, lr}
 80058de:	2300      	movs	r3, #0
 80058e0:	4d05      	ldr	r5, [pc, #20]	@ (80058f8 <_sbrk_r+0x1c>)
 80058e2:	4604      	mov	r4, r0
 80058e4:	4608      	mov	r0, r1
 80058e6:	602b      	str	r3, [r5, #0]
 80058e8:	f7fb fc02 	bl	80010f0 <_sbrk>
 80058ec:	1c43      	adds	r3, r0, #1
 80058ee:	d102      	bne.n	80058f6 <_sbrk_r+0x1a>
 80058f0:	682b      	ldr	r3, [r5, #0]
 80058f2:	b103      	cbz	r3, 80058f6 <_sbrk_r+0x1a>
 80058f4:	6023      	str	r3, [r4, #0]
 80058f6:	bd38      	pop	{r3, r4, r5, pc}
 80058f8:	20000334 	.word	0x20000334

080058fc <memcpy>:
 80058fc:	440a      	add	r2, r1
 80058fe:	4291      	cmp	r1, r2
 8005900:	f100 33ff 	add.w	r3, r0, #4294967295
 8005904:	d100      	bne.n	8005908 <memcpy+0xc>
 8005906:	4770      	bx	lr
 8005908:	b510      	push	{r4, lr}
 800590a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800590e:	4291      	cmp	r1, r2
 8005910:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005914:	d1f9      	bne.n	800590a <memcpy+0xe>
 8005916:	bd10      	pop	{r4, pc}

08005918 <nan>:
 8005918:	2000      	movs	r0, #0
 800591a:	4901      	ldr	r1, [pc, #4]	@ (8005920 <nan+0x8>)
 800591c:	4770      	bx	lr
 800591e:	bf00      	nop
 8005920:	7ff80000 	.word	0x7ff80000

08005924 <__assert_func>:
 8005924:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005926:	4614      	mov	r4, r2
 8005928:	461a      	mov	r2, r3
 800592a:	4b09      	ldr	r3, [pc, #36]	@ (8005950 <__assert_func+0x2c>)
 800592c:	4605      	mov	r5, r0
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	68d8      	ldr	r0, [r3, #12]
 8005932:	b954      	cbnz	r4, 800594a <__assert_func+0x26>
 8005934:	4b07      	ldr	r3, [pc, #28]	@ (8005954 <__assert_func+0x30>)
 8005936:	461c      	mov	r4, r3
 8005938:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800593c:	9100      	str	r1, [sp, #0]
 800593e:	462b      	mov	r3, r5
 8005940:	4905      	ldr	r1, [pc, #20]	@ (8005958 <__assert_func+0x34>)
 8005942:	f000 fba7 	bl	8006094 <fiprintf>
 8005946:	f000 fbb7 	bl	80060b8 <abort>
 800594a:	4b04      	ldr	r3, [pc, #16]	@ (800595c <__assert_func+0x38>)
 800594c:	e7f4      	b.n	8005938 <__assert_func+0x14>
 800594e:	bf00      	nop
 8005950:	20000018 	.word	0x20000018
 8005954:	08006a15 	.word	0x08006a15
 8005958:	080069e7 	.word	0x080069e7
 800595c:	080069da 	.word	0x080069da

08005960 <_calloc_r>:
 8005960:	b570      	push	{r4, r5, r6, lr}
 8005962:	fba1 5402 	umull	r5, r4, r1, r2
 8005966:	b93c      	cbnz	r4, 8005978 <_calloc_r+0x18>
 8005968:	4629      	mov	r1, r5
 800596a:	f7fe f9db 	bl	8003d24 <_malloc_r>
 800596e:	4606      	mov	r6, r0
 8005970:	b928      	cbnz	r0, 800597e <_calloc_r+0x1e>
 8005972:	2600      	movs	r6, #0
 8005974:	4630      	mov	r0, r6
 8005976:	bd70      	pop	{r4, r5, r6, pc}
 8005978:	220c      	movs	r2, #12
 800597a:	6002      	str	r2, [r0, #0]
 800597c:	e7f9      	b.n	8005972 <_calloc_r+0x12>
 800597e:	462a      	mov	r2, r5
 8005980:	4621      	mov	r1, r4
 8005982:	f7fd fa78 	bl	8002e76 <memset>
 8005986:	e7f5      	b.n	8005974 <_calloc_r+0x14>

08005988 <rshift>:
 8005988:	6903      	ldr	r3, [r0, #16]
 800598a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800598e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8005992:	f100 0414 	add.w	r4, r0, #20
 8005996:	ea4f 1261 	mov.w	r2, r1, asr #5
 800599a:	dd46      	ble.n	8005a2a <rshift+0xa2>
 800599c:	f011 011f 	ands.w	r1, r1, #31
 80059a0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80059a4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80059a8:	d10c      	bne.n	80059c4 <rshift+0x3c>
 80059aa:	4629      	mov	r1, r5
 80059ac:	f100 0710 	add.w	r7, r0, #16
 80059b0:	42b1      	cmp	r1, r6
 80059b2:	d335      	bcc.n	8005a20 <rshift+0x98>
 80059b4:	1a9b      	subs	r3, r3, r2
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	1eea      	subs	r2, r5, #3
 80059ba:	4296      	cmp	r6, r2
 80059bc:	bf38      	it	cc
 80059be:	2300      	movcc	r3, #0
 80059c0:	4423      	add	r3, r4
 80059c2:	e015      	b.n	80059f0 <rshift+0x68>
 80059c4:	46a1      	mov	r9, r4
 80059c6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80059ca:	f1c1 0820 	rsb	r8, r1, #32
 80059ce:	40cf      	lsrs	r7, r1
 80059d0:	f105 0e04 	add.w	lr, r5, #4
 80059d4:	4576      	cmp	r6, lr
 80059d6:	46f4      	mov	ip, lr
 80059d8:	d816      	bhi.n	8005a08 <rshift+0x80>
 80059da:	1a9a      	subs	r2, r3, r2
 80059dc:	0092      	lsls	r2, r2, #2
 80059de:	3a04      	subs	r2, #4
 80059e0:	3501      	adds	r5, #1
 80059e2:	42ae      	cmp	r6, r5
 80059e4:	bf38      	it	cc
 80059e6:	2200      	movcc	r2, #0
 80059e8:	18a3      	adds	r3, r4, r2
 80059ea:	50a7      	str	r7, [r4, r2]
 80059ec:	b107      	cbz	r7, 80059f0 <rshift+0x68>
 80059ee:	3304      	adds	r3, #4
 80059f0:	42a3      	cmp	r3, r4
 80059f2:	eba3 0204 	sub.w	r2, r3, r4
 80059f6:	bf08      	it	eq
 80059f8:	2300      	moveq	r3, #0
 80059fa:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80059fe:	6102      	str	r2, [r0, #16]
 8005a00:	bf08      	it	eq
 8005a02:	6143      	streq	r3, [r0, #20]
 8005a04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005a08:	f8dc c000 	ldr.w	ip, [ip]
 8005a0c:	fa0c fc08 	lsl.w	ip, ip, r8
 8005a10:	ea4c 0707 	orr.w	r7, ip, r7
 8005a14:	f849 7b04 	str.w	r7, [r9], #4
 8005a18:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005a1c:	40cf      	lsrs	r7, r1
 8005a1e:	e7d9      	b.n	80059d4 <rshift+0x4c>
 8005a20:	f851 cb04 	ldr.w	ip, [r1], #4
 8005a24:	f847 cf04 	str.w	ip, [r7, #4]!
 8005a28:	e7c2      	b.n	80059b0 <rshift+0x28>
 8005a2a:	4623      	mov	r3, r4
 8005a2c:	e7e0      	b.n	80059f0 <rshift+0x68>

08005a2e <__hexdig_fun>:
 8005a2e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8005a32:	2b09      	cmp	r3, #9
 8005a34:	d802      	bhi.n	8005a3c <__hexdig_fun+0xe>
 8005a36:	3820      	subs	r0, #32
 8005a38:	b2c0      	uxtb	r0, r0
 8005a3a:	4770      	bx	lr
 8005a3c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8005a40:	2b05      	cmp	r3, #5
 8005a42:	d801      	bhi.n	8005a48 <__hexdig_fun+0x1a>
 8005a44:	3847      	subs	r0, #71	@ 0x47
 8005a46:	e7f7      	b.n	8005a38 <__hexdig_fun+0xa>
 8005a48:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8005a4c:	2b05      	cmp	r3, #5
 8005a4e:	d801      	bhi.n	8005a54 <__hexdig_fun+0x26>
 8005a50:	3827      	subs	r0, #39	@ 0x27
 8005a52:	e7f1      	b.n	8005a38 <__hexdig_fun+0xa>
 8005a54:	2000      	movs	r0, #0
 8005a56:	4770      	bx	lr

08005a58 <__gethex>:
 8005a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a5c:	468a      	mov	sl, r1
 8005a5e:	4690      	mov	r8, r2
 8005a60:	b085      	sub	sp, #20
 8005a62:	9302      	str	r3, [sp, #8]
 8005a64:	680b      	ldr	r3, [r1, #0]
 8005a66:	9001      	str	r0, [sp, #4]
 8005a68:	1c9c      	adds	r4, r3, #2
 8005a6a:	46a1      	mov	r9, r4
 8005a6c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8005a70:	2830      	cmp	r0, #48	@ 0x30
 8005a72:	d0fa      	beq.n	8005a6a <__gethex+0x12>
 8005a74:	eba9 0303 	sub.w	r3, r9, r3
 8005a78:	f1a3 0b02 	sub.w	fp, r3, #2
 8005a7c:	f7ff ffd7 	bl	8005a2e <__hexdig_fun>
 8005a80:	4605      	mov	r5, r0
 8005a82:	2800      	cmp	r0, #0
 8005a84:	d168      	bne.n	8005b58 <__gethex+0x100>
 8005a86:	2201      	movs	r2, #1
 8005a88:	4648      	mov	r0, r9
 8005a8a:	499f      	ldr	r1, [pc, #636]	@ (8005d08 <__gethex+0x2b0>)
 8005a8c:	f7ff ff14 	bl	80058b8 <strncmp>
 8005a90:	4607      	mov	r7, r0
 8005a92:	2800      	cmp	r0, #0
 8005a94:	d167      	bne.n	8005b66 <__gethex+0x10e>
 8005a96:	f899 0001 	ldrb.w	r0, [r9, #1]
 8005a9a:	4626      	mov	r6, r4
 8005a9c:	f7ff ffc7 	bl	8005a2e <__hexdig_fun>
 8005aa0:	2800      	cmp	r0, #0
 8005aa2:	d062      	beq.n	8005b6a <__gethex+0x112>
 8005aa4:	4623      	mov	r3, r4
 8005aa6:	7818      	ldrb	r0, [r3, #0]
 8005aa8:	4699      	mov	r9, r3
 8005aaa:	2830      	cmp	r0, #48	@ 0x30
 8005aac:	f103 0301 	add.w	r3, r3, #1
 8005ab0:	d0f9      	beq.n	8005aa6 <__gethex+0x4e>
 8005ab2:	f7ff ffbc 	bl	8005a2e <__hexdig_fun>
 8005ab6:	fab0 f580 	clz	r5, r0
 8005aba:	f04f 0b01 	mov.w	fp, #1
 8005abe:	096d      	lsrs	r5, r5, #5
 8005ac0:	464a      	mov	r2, r9
 8005ac2:	4616      	mov	r6, r2
 8005ac4:	7830      	ldrb	r0, [r6, #0]
 8005ac6:	3201      	adds	r2, #1
 8005ac8:	f7ff ffb1 	bl	8005a2e <__hexdig_fun>
 8005acc:	2800      	cmp	r0, #0
 8005ace:	d1f8      	bne.n	8005ac2 <__gethex+0x6a>
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	4630      	mov	r0, r6
 8005ad4:	498c      	ldr	r1, [pc, #560]	@ (8005d08 <__gethex+0x2b0>)
 8005ad6:	f7ff feef 	bl	80058b8 <strncmp>
 8005ada:	2800      	cmp	r0, #0
 8005adc:	d13f      	bne.n	8005b5e <__gethex+0x106>
 8005ade:	b944      	cbnz	r4, 8005af2 <__gethex+0x9a>
 8005ae0:	1c74      	adds	r4, r6, #1
 8005ae2:	4622      	mov	r2, r4
 8005ae4:	4616      	mov	r6, r2
 8005ae6:	7830      	ldrb	r0, [r6, #0]
 8005ae8:	3201      	adds	r2, #1
 8005aea:	f7ff ffa0 	bl	8005a2e <__hexdig_fun>
 8005aee:	2800      	cmp	r0, #0
 8005af0:	d1f8      	bne.n	8005ae4 <__gethex+0x8c>
 8005af2:	1ba4      	subs	r4, r4, r6
 8005af4:	00a7      	lsls	r7, r4, #2
 8005af6:	7833      	ldrb	r3, [r6, #0]
 8005af8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8005afc:	2b50      	cmp	r3, #80	@ 0x50
 8005afe:	d13e      	bne.n	8005b7e <__gethex+0x126>
 8005b00:	7873      	ldrb	r3, [r6, #1]
 8005b02:	2b2b      	cmp	r3, #43	@ 0x2b
 8005b04:	d033      	beq.n	8005b6e <__gethex+0x116>
 8005b06:	2b2d      	cmp	r3, #45	@ 0x2d
 8005b08:	d034      	beq.n	8005b74 <__gethex+0x11c>
 8005b0a:	2400      	movs	r4, #0
 8005b0c:	1c71      	adds	r1, r6, #1
 8005b0e:	7808      	ldrb	r0, [r1, #0]
 8005b10:	f7ff ff8d 	bl	8005a2e <__hexdig_fun>
 8005b14:	1e43      	subs	r3, r0, #1
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	2b18      	cmp	r3, #24
 8005b1a:	d830      	bhi.n	8005b7e <__gethex+0x126>
 8005b1c:	f1a0 0210 	sub.w	r2, r0, #16
 8005b20:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005b24:	f7ff ff83 	bl	8005a2e <__hexdig_fun>
 8005b28:	f100 3cff 	add.w	ip, r0, #4294967295
 8005b2c:	fa5f fc8c 	uxtb.w	ip, ip
 8005b30:	f1bc 0f18 	cmp.w	ip, #24
 8005b34:	f04f 030a 	mov.w	r3, #10
 8005b38:	d91e      	bls.n	8005b78 <__gethex+0x120>
 8005b3a:	b104      	cbz	r4, 8005b3e <__gethex+0xe6>
 8005b3c:	4252      	negs	r2, r2
 8005b3e:	4417      	add	r7, r2
 8005b40:	f8ca 1000 	str.w	r1, [sl]
 8005b44:	b1ed      	cbz	r5, 8005b82 <__gethex+0x12a>
 8005b46:	f1bb 0f00 	cmp.w	fp, #0
 8005b4a:	bf0c      	ite	eq
 8005b4c:	2506      	moveq	r5, #6
 8005b4e:	2500      	movne	r5, #0
 8005b50:	4628      	mov	r0, r5
 8005b52:	b005      	add	sp, #20
 8005b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b58:	2500      	movs	r5, #0
 8005b5a:	462c      	mov	r4, r5
 8005b5c:	e7b0      	b.n	8005ac0 <__gethex+0x68>
 8005b5e:	2c00      	cmp	r4, #0
 8005b60:	d1c7      	bne.n	8005af2 <__gethex+0x9a>
 8005b62:	4627      	mov	r7, r4
 8005b64:	e7c7      	b.n	8005af6 <__gethex+0x9e>
 8005b66:	464e      	mov	r6, r9
 8005b68:	462f      	mov	r7, r5
 8005b6a:	2501      	movs	r5, #1
 8005b6c:	e7c3      	b.n	8005af6 <__gethex+0x9e>
 8005b6e:	2400      	movs	r4, #0
 8005b70:	1cb1      	adds	r1, r6, #2
 8005b72:	e7cc      	b.n	8005b0e <__gethex+0xb6>
 8005b74:	2401      	movs	r4, #1
 8005b76:	e7fb      	b.n	8005b70 <__gethex+0x118>
 8005b78:	fb03 0002 	mla	r0, r3, r2, r0
 8005b7c:	e7ce      	b.n	8005b1c <__gethex+0xc4>
 8005b7e:	4631      	mov	r1, r6
 8005b80:	e7de      	b.n	8005b40 <__gethex+0xe8>
 8005b82:	4629      	mov	r1, r5
 8005b84:	eba6 0309 	sub.w	r3, r6, r9
 8005b88:	3b01      	subs	r3, #1
 8005b8a:	2b07      	cmp	r3, #7
 8005b8c:	dc0a      	bgt.n	8005ba4 <__gethex+0x14c>
 8005b8e:	9801      	ldr	r0, [sp, #4]
 8005b90:	f7fe f954 	bl	8003e3c <_Balloc>
 8005b94:	4604      	mov	r4, r0
 8005b96:	b940      	cbnz	r0, 8005baa <__gethex+0x152>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	21e4      	movs	r1, #228	@ 0xe4
 8005b9c:	4b5b      	ldr	r3, [pc, #364]	@ (8005d0c <__gethex+0x2b4>)
 8005b9e:	485c      	ldr	r0, [pc, #368]	@ (8005d10 <__gethex+0x2b8>)
 8005ba0:	f7ff fec0 	bl	8005924 <__assert_func>
 8005ba4:	3101      	adds	r1, #1
 8005ba6:	105b      	asrs	r3, r3, #1
 8005ba8:	e7ef      	b.n	8005b8a <__gethex+0x132>
 8005baa:	2300      	movs	r3, #0
 8005bac:	f100 0a14 	add.w	sl, r0, #20
 8005bb0:	4655      	mov	r5, sl
 8005bb2:	469b      	mov	fp, r3
 8005bb4:	45b1      	cmp	r9, r6
 8005bb6:	d337      	bcc.n	8005c28 <__gethex+0x1d0>
 8005bb8:	f845 bb04 	str.w	fp, [r5], #4
 8005bbc:	eba5 050a 	sub.w	r5, r5, sl
 8005bc0:	10ad      	asrs	r5, r5, #2
 8005bc2:	6125      	str	r5, [r4, #16]
 8005bc4:	4658      	mov	r0, fp
 8005bc6:	f7fe fa2b 	bl	8004020 <__hi0bits>
 8005bca:	016d      	lsls	r5, r5, #5
 8005bcc:	f8d8 6000 	ldr.w	r6, [r8]
 8005bd0:	1a2d      	subs	r5, r5, r0
 8005bd2:	42b5      	cmp	r5, r6
 8005bd4:	dd54      	ble.n	8005c80 <__gethex+0x228>
 8005bd6:	1bad      	subs	r5, r5, r6
 8005bd8:	4629      	mov	r1, r5
 8005bda:	4620      	mov	r0, r4
 8005bdc:	f7fe fdb3 	bl	8004746 <__any_on>
 8005be0:	4681      	mov	r9, r0
 8005be2:	b178      	cbz	r0, 8005c04 <__gethex+0x1ac>
 8005be4:	f04f 0901 	mov.w	r9, #1
 8005be8:	1e6b      	subs	r3, r5, #1
 8005bea:	1159      	asrs	r1, r3, #5
 8005bec:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8005bf0:	f003 021f 	and.w	r2, r3, #31
 8005bf4:	fa09 f202 	lsl.w	r2, r9, r2
 8005bf8:	420a      	tst	r2, r1
 8005bfa:	d003      	beq.n	8005c04 <__gethex+0x1ac>
 8005bfc:	454b      	cmp	r3, r9
 8005bfe:	dc36      	bgt.n	8005c6e <__gethex+0x216>
 8005c00:	f04f 0902 	mov.w	r9, #2
 8005c04:	4629      	mov	r1, r5
 8005c06:	4620      	mov	r0, r4
 8005c08:	f7ff febe 	bl	8005988 <rshift>
 8005c0c:	442f      	add	r7, r5
 8005c0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005c12:	42bb      	cmp	r3, r7
 8005c14:	da42      	bge.n	8005c9c <__gethex+0x244>
 8005c16:	4621      	mov	r1, r4
 8005c18:	9801      	ldr	r0, [sp, #4]
 8005c1a:	f7fe f94f 	bl	8003ebc <_Bfree>
 8005c1e:	2300      	movs	r3, #0
 8005c20:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005c22:	25a3      	movs	r5, #163	@ 0xa3
 8005c24:	6013      	str	r3, [r2, #0]
 8005c26:	e793      	b.n	8005b50 <__gethex+0xf8>
 8005c28:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8005c2c:	2a2e      	cmp	r2, #46	@ 0x2e
 8005c2e:	d012      	beq.n	8005c56 <__gethex+0x1fe>
 8005c30:	2b20      	cmp	r3, #32
 8005c32:	d104      	bne.n	8005c3e <__gethex+0x1e6>
 8005c34:	f845 bb04 	str.w	fp, [r5], #4
 8005c38:	f04f 0b00 	mov.w	fp, #0
 8005c3c:	465b      	mov	r3, fp
 8005c3e:	7830      	ldrb	r0, [r6, #0]
 8005c40:	9303      	str	r3, [sp, #12]
 8005c42:	f7ff fef4 	bl	8005a2e <__hexdig_fun>
 8005c46:	9b03      	ldr	r3, [sp, #12]
 8005c48:	f000 000f 	and.w	r0, r0, #15
 8005c4c:	4098      	lsls	r0, r3
 8005c4e:	ea4b 0b00 	orr.w	fp, fp, r0
 8005c52:	3304      	adds	r3, #4
 8005c54:	e7ae      	b.n	8005bb4 <__gethex+0x15c>
 8005c56:	45b1      	cmp	r9, r6
 8005c58:	d8ea      	bhi.n	8005c30 <__gethex+0x1d8>
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	4630      	mov	r0, r6
 8005c5e:	492a      	ldr	r1, [pc, #168]	@ (8005d08 <__gethex+0x2b0>)
 8005c60:	9303      	str	r3, [sp, #12]
 8005c62:	f7ff fe29 	bl	80058b8 <strncmp>
 8005c66:	9b03      	ldr	r3, [sp, #12]
 8005c68:	2800      	cmp	r0, #0
 8005c6a:	d1e1      	bne.n	8005c30 <__gethex+0x1d8>
 8005c6c:	e7a2      	b.n	8005bb4 <__gethex+0x15c>
 8005c6e:	4620      	mov	r0, r4
 8005c70:	1ea9      	subs	r1, r5, #2
 8005c72:	f7fe fd68 	bl	8004746 <__any_on>
 8005c76:	2800      	cmp	r0, #0
 8005c78:	d0c2      	beq.n	8005c00 <__gethex+0x1a8>
 8005c7a:	f04f 0903 	mov.w	r9, #3
 8005c7e:	e7c1      	b.n	8005c04 <__gethex+0x1ac>
 8005c80:	da09      	bge.n	8005c96 <__gethex+0x23e>
 8005c82:	1b75      	subs	r5, r6, r5
 8005c84:	4621      	mov	r1, r4
 8005c86:	462a      	mov	r2, r5
 8005c88:	9801      	ldr	r0, [sp, #4]
 8005c8a:	f7fe fb2d 	bl	80042e8 <__lshift>
 8005c8e:	4604      	mov	r4, r0
 8005c90:	1b7f      	subs	r7, r7, r5
 8005c92:	f100 0a14 	add.w	sl, r0, #20
 8005c96:	f04f 0900 	mov.w	r9, #0
 8005c9a:	e7b8      	b.n	8005c0e <__gethex+0x1b6>
 8005c9c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8005ca0:	42bd      	cmp	r5, r7
 8005ca2:	dd6f      	ble.n	8005d84 <__gethex+0x32c>
 8005ca4:	1bed      	subs	r5, r5, r7
 8005ca6:	42ae      	cmp	r6, r5
 8005ca8:	dc34      	bgt.n	8005d14 <__gethex+0x2bc>
 8005caa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005cae:	2b02      	cmp	r3, #2
 8005cb0:	d022      	beq.n	8005cf8 <__gethex+0x2a0>
 8005cb2:	2b03      	cmp	r3, #3
 8005cb4:	d024      	beq.n	8005d00 <__gethex+0x2a8>
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d115      	bne.n	8005ce6 <__gethex+0x28e>
 8005cba:	42ae      	cmp	r6, r5
 8005cbc:	d113      	bne.n	8005ce6 <__gethex+0x28e>
 8005cbe:	2e01      	cmp	r6, #1
 8005cc0:	d10b      	bne.n	8005cda <__gethex+0x282>
 8005cc2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005cc6:	9a02      	ldr	r2, [sp, #8]
 8005cc8:	2562      	movs	r5, #98	@ 0x62
 8005cca:	6013      	str	r3, [r2, #0]
 8005ccc:	2301      	movs	r3, #1
 8005cce:	6123      	str	r3, [r4, #16]
 8005cd0:	f8ca 3000 	str.w	r3, [sl]
 8005cd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005cd6:	601c      	str	r4, [r3, #0]
 8005cd8:	e73a      	b.n	8005b50 <__gethex+0xf8>
 8005cda:	4620      	mov	r0, r4
 8005cdc:	1e71      	subs	r1, r6, #1
 8005cde:	f7fe fd32 	bl	8004746 <__any_on>
 8005ce2:	2800      	cmp	r0, #0
 8005ce4:	d1ed      	bne.n	8005cc2 <__gethex+0x26a>
 8005ce6:	4621      	mov	r1, r4
 8005ce8:	9801      	ldr	r0, [sp, #4]
 8005cea:	f7fe f8e7 	bl	8003ebc <_Bfree>
 8005cee:	2300      	movs	r3, #0
 8005cf0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005cf2:	2550      	movs	r5, #80	@ 0x50
 8005cf4:	6013      	str	r3, [r2, #0]
 8005cf6:	e72b      	b.n	8005b50 <__gethex+0xf8>
 8005cf8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d1f3      	bne.n	8005ce6 <__gethex+0x28e>
 8005cfe:	e7e0      	b.n	8005cc2 <__gethex+0x26a>
 8005d00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d1dd      	bne.n	8005cc2 <__gethex+0x26a>
 8005d06:	e7ee      	b.n	8005ce6 <__gethex+0x28e>
 8005d08:	08006868 	.word	0x08006868
 8005d0c:	080066ff 	.word	0x080066ff
 8005d10:	08006a16 	.word	0x08006a16
 8005d14:	1e6f      	subs	r7, r5, #1
 8005d16:	f1b9 0f00 	cmp.w	r9, #0
 8005d1a:	d130      	bne.n	8005d7e <__gethex+0x326>
 8005d1c:	b127      	cbz	r7, 8005d28 <__gethex+0x2d0>
 8005d1e:	4639      	mov	r1, r7
 8005d20:	4620      	mov	r0, r4
 8005d22:	f7fe fd10 	bl	8004746 <__any_on>
 8005d26:	4681      	mov	r9, r0
 8005d28:	2301      	movs	r3, #1
 8005d2a:	4629      	mov	r1, r5
 8005d2c:	1b76      	subs	r6, r6, r5
 8005d2e:	2502      	movs	r5, #2
 8005d30:	117a      	asrs	r2, r7, #5
 8005d32:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8005d36:	f007 071f 	and.w	r7, r7, #31
 8005d3a:	40bb      	lsls	r3, r7
 8005d3c:	4213      	tst	r3, r2
 8005d3e:	4620      	mov	r0, r4
 8005d40:	bf18      	it	ne
 8005d42:	f049 0902 	orrne.w	r9, r9, #2
 8005d46:	f7ff fe1f 	bl	8005988 <rshift>
 8005d4a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8005d4e:	f1b9 0f00 	cmp.w	r9, #0
 8005d52:	d047      	beq.n	8005de4 <__gethex+0x38c>
 8005d54:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005d58:	2b02      	cmp	r3, #2
 8005d5a:	d015      	beq.n	8005d88 <__gethex+0x330>
 8005d5c:	2b03      	cmp	r3, #3
 8005d5e:	d017      	beq.n	8005d90 <__gethex+0x338>
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d109      	bne.n	8005d78 <__gethex+0x320>
 8005d64:	f019 0f02 	tst.w	r9, #2
 8005d68:	d006      	beq.n	8005d78 <__gethex+0x320>
 8005d6a:	f8da 3000 	ldr.w	r3, [sl]
 8005d6e:	ea49 0903 	orr.w	r9, r9, r3
 8005d72:	f019 0f01 	tst.w	r9, #1
 8005d76:	d10e      	bne.n	8005d96 <__gethex+0x33e>
 8005d78:	f045 0510 	orr.w	r5, r5, #16
 8005d7c:	e032      	b.n	8005de4 <__gethex+0x38c>
 8005d7e:	f04f 0901 	mov.w	r9, #1
 8005d82:	e7d1      	b.n	8005d28 <__gethex+0x2d0>
 8005d84:	2501      	movs	r5, #1
 8005d86:	e7e2      	b.n	8005d4e <__gethex+0x2f6>
 8005d88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005d8a:	f1c3 0301 	rsb	r3, r3, #1
 8005d8e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005d90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d0f0      	beq.n	8005d78 <__gethex+0x320>
 8005d96:	f04f 0c00 	mov.w	ip, #0
 8005d9a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8005d9e:	f104 0314 	add.w	r3, r4, #20
 8005da2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8005da6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8005daa:	4618      	mov	r0, r3
 8005dac:	f853 2b04 	ldr.w	r2, [r3], #4
 8005db0:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005db4:	d01b      	beq.n	8005dee <__gethex+0x396>
 8005db6:	3201      	adds	r2, #1
 8005db8:	6002      	str	r2, [r0, #0]
 8005dba:	2d02      	cmp	r5, #2
 8005dbc:	f104 0314 	add.w	r3, r4, #20
 8005dc0:	d13c      	bne.n	8005e3c <__gethex+0x3e4>
 8005dc2:	f8d8 2000 	ldr.w	r2, [r8]
 8005dc6:	3a01      	subs	r2, #1
 8005dc8:	42b2      	cmp	r2, r6
 8005dca:	d109      	bne.n	8005de0 <__gethex+0x388>
 8005dcc:	2201      	movs	r2, #1
 8005dce:	1171      	asrs	r1, r6, #5
 8005dd0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005dd4:	f006 061f 	and.w	r6, r6, #31
 8005dd8:	fa02 f606 	lsl.w	r6, r2, r6
 8005ddc:	421e      	tst	r6, r3
 8005dde:	d13a      	bne.n	8005e56 <__gethex+0x3fe>
 8005de0:	f045 0520 	orr.w	r5, r5, #32
 8005de4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005de6:	601c      	str	r4, [r3, #0]
 8005de8:	9b02      	ldr	r3, [sp, #8]
 8005dea:	601f      	str	r7, [r3, #0]
 8005dec:	e6b0      	b.n	8005b50 <__gethex+0xf8>
 8005dee:	4299      	cmp	r1, r3
 8005df0:	f843 cc04 	str.w	ip, [r3, #-4]
 8005df4:	d8d9      	bhi.n	8005daa <__gethex+0x352>
 8005df6:	68a3      	ldr	r3, [r4, #8]
 8005df8:	459b      	cmp	fp, r3
 8005dfa:	db17      	blt.n	8005e2c <__gethex+0x3d4>
 8005dfc:	6861      	ldr	r1, [r4, #4]
 8005dfe:	9801      	ldr	r0, [sp, #4]
 8005e00:	3101      	adds	r1, #1
 8005e02:	f7fe f81b 	bl	8003e3c <_Balloc>
 8005e06:	4681      	mov	r9, r0
 8005e08:	b918      	cbnz	r0, 8005e12 <__gethex+0x3ba>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	2184      	movs	r1, #132	@ 0x84
 8005e0e:	4b19      	ldr	r3, [pc, #100]	@ (8005e74 <__gethex+0x41c>)
 8005e10:	e6c5      	b.n	8005b9e <__gethex+0x146>
 8005e12:	6922      	ldr	r2, [r4, #16]
 8005e14:	f104 010c 	add.w	r1, r4, #12
 8005e18:	3202      	adds	r2, #2
 8005e1a:	0092      	lsls	r2, r2, #2
 8005e1c:	300c      	adds	r0, #12
 8005e1e:	f7ff fd6d 	bl	80058fc <memcpy>
 8005e22:	4621      	mov	r1, r4
 8005e24:	9801      	ldr	r0, [sp, #4]
 8005e26:	f7fe f849 	bl	8003ebc <_Bfree>
 8005e2a:	464c      	mov	r4, r9
 8005e2c:	6923      	ldr	r3, [r4, #16]
 8005e2e:	1c5a      	adds	r2, r3, #1
 8005e30:	6122      	str	r2, [r4, #16]
 8005e32:	2201      	movs	r2, #1
 8005e34:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005e38:	615a      	str	r2, [r3, #20]
 8005e3a:	e7be      	b.n	8005dba <__gethex+0x362>
 8005e3c:	6922      	ldr	r2, [r4, #16]
 8005e3e:	455a      	cmp	r2, fp
 8005e40:	dd0b      	ble.n	8005e5a <__gethex+0x402>
 8005e42:	2101      	movs	r1, #1
 8005e44:	4620      	mov	r0, r4
 8005e46:	f7ff fd9f 	bl	8005988 <rshift>
 8005e4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005e4e:	3701      	adds	r7, #1
 8005e50:	42bb      	cmp	r3, r7
 8005e52:	f6ff aee0 	blt.w	8005c16 <__gethex+0x1be>
 8005e56:	2501      	movs	r5, #1
 8005e58:	e7c2      	b.n	8005de0 <__gethex+0x388>
 8005e5a:	f016 061f 	ands.w	r6, r6, #31
 8005e5e:	d0fa      	beq.n	8005e56 <__gethex+0x3fe>
 8005e60:	4453      	add	r3, sl
 8005e62:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8005e66:	f7fe f8db 	bl	8004020 <__hi0bits>
 8005e6a:	f1c6 0620 	rsb	r6, r6, #32
 8005e6e:	42b0      	cmp	r0, r6
 8005e70:	dbe7      	blt.n	8005e42 <__gethex+0x3ea>
 8005e72:	e7f0      	b.n	8005e56 <__gethex+0x3fe>
 8005e74:	080066ff 	.word	0x080066ff

08005e78 <L_shift>:
 8005e78:	f1c2 0208 	rsb	r2, r2, #8
 8005e7c:	0092      	lsls	r2, r2, #2
 8005e7e:	b570      	push	{r4, r5, r6, lr}
 8005e80:	f1c2 0620 	rsb	r6, r2, #32
 8005e84:	6843      	ldr	r3, [r0, #4]
 8005e86:	6804      	ldr	r4, [r0, #0]
 8005e88:	fa03 f506 	lsl.w	r5, r3, r6
 8005e8c:	432c      	orrs	r4, r5
 8005e8e:	40d3      	lsrs	r3, r2
 8005e90:	6004      	str	r4, [r0, #0]
 8005e92:	f840 3f04 	str.w	r3, [r0, #4]!
 8005e96:	4288      	cmp	r0, r1
 8005e98:	d3f4      	bcc.n	8005e84 <L_shift+0xc>
 8005e9a:	bd70      	pop	{r4, r5, r6, pc}

08005e9c <__match>:
 8005e9c:	b530      	push	{r4, r5, lr}
 8005e9e:	6803      	ldr	r3, [r0, #0]
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ea6:	b914      	cbnz	r4, 8005eae <__match+0x12>
 8005ea8:	6003      	str	r3, [r0, #0]
 8005eaa:	2001      	movs	r0, #1
 8005eac:	bd30      	pop	{r4, r5, pc}
 8005eae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005eb2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8005eb6:	2d19      	cmp	r5, #25
 8005eb8:	bf98      	it	ls
 8005eba:	3220      	addls	r2, #32
 8005ebc:	42a2      	cmp	r2, r4
 8005ebe:	d0f0      	beq.n	8005ea2 <__match+0x6>
 8005ec0:	2000      	movs	r0, #0
 8005ec2:	e7f3      	b.n	8005eac <__match+0x10>

08005ec4 <__hexnan>:
 8005ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ec8:	2500      	movs	r5, #0
 8005eca:	680b      	ldr	r3, [r1, #0]
 8005ecc:	4682      	mov	sl, r0
 8005ece:	115e      	asrs	r6, r3, #5
 8005ed0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005ed4:	f013 031f 	ands.w	r3, r3, #31
 8005ed8:	bf18      	it	ne
 8005eda:	3604      	addne	r6, #4
 8005edc:	1f37      	subs	r7, r6, #4
 8005ede:	4690      	mov	r8, r2
 8005ee0:	46b9      	mov	r9, r7
 8005ee2:	463c      	mov	r4, r7
 8005ee4:	46ab      	mov	fp, r5
 8005ee6:	b087      	sub	sp, #28
 8005ee8:	6801      	ldr	r1, [r0, #0]
 8005eea:	9301      	str	r3, [sp, #4]
 8005eec:	f846 5c04 	str.w	r5, [r6, #-4]
 8005ef0:	9502      	str	r5, [sp, #8]
 8005ef2:	784a      	ldrb	r2, [r1, #1]
 8005ef4:	1c4b      	adds	r3, r1, #1
 8005ef6:	9303      	str	r3, [sp, #12]
 8005ef8:	b342      	cbz	r2, 8005f4c <__hexnan+0x88>
 8005efa:	4610      	mov	r0, r2
 8005efc:	9105      	str	r1, [sp, #20]
 8005efe:	9204      	str	r2, [sp, #16]
 8005f00:	f7ff fd95 	bl	8005a2e <__hexdig_fun>
 8005f04:	2800      	cmp	r0, #0
 8005f06:	d151      	bne.n	8005fac <__hexnan+0xe8>
 8005f08:	9a04      	ldr	r2, [sp, #16]
 8005f0a:	9905      	ldr	r1, [sp, #20]
 8005f0c:	2a20      	cmp	r2, #32
 8005f0e:	d818      	bhi.n	8005f42 <__hexnan+0x7e>
 8005f10:	9b02      	ldr	r3, [sp, #8]
 8005f12:	459b      	cmp	fp, r3
 8005f14:	dd13      	ble.n	8005f3e <__hexnan+0x7a>
 8005f16:	454c      	cmp	r4, r9
 8005f18:	d206      	bcs.n	8005f28 <__hexnan+0x64>
 8005f1a:	2d07      	cmp	r5, #7
 8005f1c:	dc04      	bgt.n	8005f28 <__hexnan+0x64>
 8005f1e:	462a      	mov	r2, r5
 8005f20:	4649      	mov	r1, r9
 8005f22:	4620      	mov	r0, r4
 8005f24:	f7ff ffa8 	bl	8005e78 <L_shift>
 8005f28:	4544      	cmp	r4, r8
 8005f2a:	d952      	bls.n	8005fd2 <__hexnan+0x10e>
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	f1a4 0904 	sub.w	r9, r4, #4
 8005f32:	f844 3c04 	str.w	r3, [r4, #-4]
 8005f36:	461d      	mov	r5, r3
 8005f38:	464c      	mov	r4, r9
 8005f3a:	f8cd b008 	str.w	fp, [sp, #8]
 8005f3e:	9903      	ldr	r1, [sp, #12]
 8005f40:	e7d7      	b.n	8005ef2 <__hexnan+0x2e>
 8005f42:	2a29      	cmp	r2, #41	@ 0x29
 8005f44:	d157      	bne.n	8005ff6 <__hexnan+0x132>
 8005f46:	3102      	adds	r1, #2
 8005f48:	f8ca 1000 	str.w	r1, [sl]
 8005f4c:	f1bb 0f00 	cmp.w	fp, #0
 8005f50:	d051      	beq.n	8005ff6 <__hexnan+0x132>
 8005f52:	454c      	cmp	r4, r9
 8005f54:	d206      	bcs.n	8005f64 <__hexnan+0xa0>
 8005f56:	2d07      	cmp	r5, #7
 8005f58:	dc04      	bgt.n	8005f64 <__hexnan+0xa0>
 8005f5a:	462a      	mov	r2, r5
 8005f5c:	4649      	mov	r1, r9
 8005f5e:	4620      	mov	r0, r4
 8005f60:	f7ff ff8a 	bl	8005e78 <L_shift>
 8005f64:	4544      	cmp	r4, r8
 8005f66:	d936      	bls.n	8005fd6 <__hexnan+0x112>
 8005f68:	4623      	mov	r3, r4
 8005f6a:	f1a8 0204 	sub.w	r2, r8, #4
 8005f6e:	f853 1b04 	ldr.w	r1, [r3], #4
 8005f72:	429f      	cmp	r7, r3
 8005f74:	f842 1f04 	str.w	r1, [r2, #4]!
 8005f78:	d2f9      	bcs.n	8005f6e <__hexnan+0xaa>
 8005f7a:	1b3b      	subs	r3, r7, r4
 8005f7c:	f023 0303 	bic.w	r3, r3, #3
 8005f80:	3304      	adds	r3, #4
 8005f82:	3401      	adds	r4, #1
 8005f84:	3e03      	subs	r6, #3
 8005f86:	42b4      	cmp	r4, r6
 8005f88:	bf88      	it	hi
 8005f8a:	2304      	movhi	r3, #4
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	4443      	add	r3, r8
 8005f90:	f843 2b04 	str.w	r2, [r3], #4
 8005f94:	429f      	cmp	r7, r3
 8005f96:	d2fb      	bcs.n	8005f90 <__hexnan+0xcc>
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	b91b      	cbnz	r3, 8005fa4 <__hexnan+0xe0>
 8005f9c:	4547      	cmp	r7, r8
 8005f9e:	d128      	bne.n	8005ff2 <__hexnan+0x12e>
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	603b      	str	r3, [r7, #0]
 8005fa4:	2005      	movs	r0, #5
 8005fa6:	b007      	add	sp, #28
 8005fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fac:	3501      	adds	r5, #1
 8005fae:	2d08      	cmp	r5, #8
 8005fb0:	f10b 0b01 	add.w	fp, fp, #1
 8005fb4:	dd06      	ble.n	8005fc4 <__hexnan+0x100>
 8005fb6:	4544      	cmp	r4, r8
 8005fb8:	d9c1      	bls.n	8005f3e <__hexnan+0x7a>
 8005fba:	2300      	movs	r3, #0
 8005fbc:	2501      	movs	r5, #1
 8005fbe:	f844 3c04 	str.w	r3, [r4, #-4]
 8005fc2:	3c04      	subs	r4, #4
 8005fc4:	6822      	ldr	r2, [r4, #0]
 8005fc6:	f000 000f 	and.w	r0, r0, #15
 8005fca:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8005fce:	6020      	str	r0, [r4, #0]
 8005fd0:	e7b5      	b.n	8005f3e <__hexnan+0x7a>
 8005fd2:	2508      	movs	r5, #8
 8005fd4:	e7b3      	b.n	8005f3e <__hexnan+0x7a>
 8005fd6:	9b01      	ldr	r3, [sp, #4]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d0dd      	beq.n	8005f98 <__hexnan+0xd4>
 8005fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8005fe0:	f1c3 0320 	rsb	r3, r3, #32
 8005fe4:	40da      	lsrs	r2, r3
 8005fe6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8005fea:	4013      	ands	r3, r2
 8005fec:	f846 3c04 	str.w	r3, [r6, #-4]
 8005ff0:	e7d2      	b.n	8005f98 <__hexnan+0xd4>
 8005ff2:	3f04      	subs	r7, #4
 8005ff4:	e7d0      	b.n	8005f98 <__hexnan+0xd4>
 8005ff6:	2004      	movs	r0, #4
 8005ff8:	e7d5      	b.n	8005fa6 <__hexnan+0xe2>

08005ffa <__ascii_mbtowc>:
 8005ffa:	b082      	sub	sp, #8
 8005ffc:	b901      	cbnz	r1, 8006000 <__ascii_mbtowc+0x6>
 8005ffe:	a901      	add	r1, sp, #4
 8006000:	b142      	cbz	r2, 8006014 <__ascii_mbtowc+0x1a>
 8006002:	b14b      	cbz	r3, 8006018 <__ascii_mbtowc+0x1e>
 8006004:	7813      	ldrb	r3, [r2, #0]
 8006006:	600b      	str	r3, [r1, #0]
 8006008:	7812      	ldrb	r2, [r2, #0]
 800600a:	1e10      	subs	r0, r2, #0
 800600c:	bf18      	it	ne
 800600e:	2001      	movne	r0, #1
 8006010:	b002      	add	sp, #8
 8006012:	4770      	bx	lr
 8006014:	4610      	mov	r0, r2
 8006016:	e7fb      	b.n	8006010 <__ascii_mbtowc+0x16>
 8006018:	f06f 0001 	mvn.w	r0, #1
 800601c:	e7f8      	b.n	8006010 <__ascii_mbtowc+0x16>

0800601e <_realloc_r>:
 800601e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006022:	4680      	mov	r8, r0
 8006024:	4615      	mov	r5, r2
 8006026:	460c      	mov	r4, r1
 8006028:	b921      	cbnz	r1, 8006034 <_realloc_r+0x16>
 800602a:	4611      	mov	r1, r2
 800602c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006030:	f7fd be78 	b.w	8003d24 <_malloc_r>
 8006034:	b92a      	cbnz	r2, 8006042 <_realloc_r+0x24>
 8006036:	f7fd fe03 	bl	8003c40 <_free_r>
 800603a:	2400      	movs	r4, #0
 800603c:	4620      	mov	r0, r4
 800603e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006042:	f000 f840 	bl	80060c6 <_malloc_usable_size_r>
 8006046:	4285      	cmp	r5, r0
 8006048:	4606      	mov	r6, r0
 800604a:	d802      	bhi.n	8006052 <_realloc_r+0x34>
 800604c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006050:	d8f4      	bhi.n	800603c <_realloc_r+0x1e>
 8006052:	4629      	mov	r1, r5
 8006054:	4640      	mov	r0, r8
 8006056:	f7fd fe65 	bl	8003d24 <_malloc_r>
 800605a:	4607      	mov	r7, r0
 800605c:	2800      	cmp	r0, #0
 800605e:	d0ec      	beq.n	800603a <_realloc_r+0x1c>
 8006060:	42b5      	cmp	r5, r6
 8006062:	462a      	mov	r2, r5
 8006064:	4621      	mov	r1, r4
 8006066:	bf28      	it	cs
 8006068:	4632      	movcs	r2, r6
 800606a:	f7ff fc47 	bl	80058fc <memcpy>
 800606e:	4621      	mov	r1, r4
 8006070:	4640      	mov	r0, r8
 8006072:	f7fd fde5 	bl	8003c40 <_free_r>
 8006076:	463c      	mov	r4, r7
 8006078:	e7e0      	b.n	800603c <_realloc_r+0x1e>

0800607a <__ascii_wctomb>:
 800607a:	4603      	mov	r3, r0
 800607c:	4608      	mov	r0, r1
 800607e:	b141      	cbz	r1, 8006092 <__ascii_wctomb+0x18>
 8006080:	2aff      	cmp	r2, #255	@ 0xff
 8006082:	d904      	bls.n	800608e <__ascii_wctomb+0x14>
 8006084:	228a      	movs	r2, #138	@ 0x8a
 8006086:	f04f 30ff 	mov.w	r0, #4294967295
 800608a:	601a      	str	r2, [r3, #0]
 800608c:	4770      	bx	lr
 800608e:	2001      	movs	r0, #1
 8006090:	700a      	strb	r2, [r1, #0]
 8006092:	4770      	bx	lr

08006094 <fiprintf>:
 8006094:	b40e      	push	{r1, r2, r3}
 8006096:	b503      	push	{r0, r1, lr}
 8006098:	4601      	mov	r1, r0
 800609a:	ab03      	add	r3, sp, #12
 800609c:	4805      	ldr	r0, [pc, #20]	@ (80060b4 <fiprintf+0x20>)
 800609e:	f853 2b04 	ldr.w	r2, [r3], #4
 80060a2:	6800      	ldr	r0, [r0, #0]
 80060a4:	9301      	str	r3, [sp, #4]
 80060a6:	f000 f83d 	bl	8006124 <_vfiprintf_r>
 80060aa:	b002      	add	sp, #8
 80060ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80060b0:	b003      	add	sp, #12
 80060b2:	4770      	bx	lr
 80060b4:	20000018 	.word	0x20000018

080060b8 <abort>:
 80060b8:	2006      	movs	r0, #6
 80060ba:	b508      	push	{r3, lr}
 80060bc:	f000 fa06 	bl	80064cc <raise>
 80060c0:	2001      	movs	r0, #1
 80060c2:	f7fa ffa0 	bl	8001006 <_exit>

080060c6 <_malloc_usable_size_r>:
 80060c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060ca:	1f18      	subs	r0, r3, #4
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	bfbc      	itt	lt
 80060d0:	580b      	ldrlt	r3, [r1, r0]
 80060d2:	18c0      	addlt	r0, r0, r3
 80060d4:	4770      	bx	lr

080060d6 <__sfputc_r>:
 80060d6:	6893      	ldr	r3, [r2, #8]
 80060d8:	b410      	push	{r4}
 80060da:	3b01      	subs	r3, #1
 80060dc:	2b00      	cmp	r3, #0
 80060de:	6093      	str	r3, [r2, #8]
 80060e0:	da07      	bge.n	80060f2 <__sfputc_r+0x1c>
 80060e2:	6994      	ldr	r4, [r2, #24]
 80060e4:	42a3      	cmp	r3, r4
 80060e6:	db01      	blt.n	80060ec <__sfputc_r+0x16>
 80060e8:	290a      	cmp	r1, #10
 80060ea:	d102      	bne.n	80060f2 <__sfputc_r+0x1c>
 80060ec:	bc10      	pop	{r4}
 80060ee:	f000 b931 	b.w	8006354 <__swbuf_r>
 80060f2:	6813      	ldr	r3, [r2, #0]
 80060f4:	1c58      	adds	r0, r3, #1
 80060f6:	6010      	str	r0, [r2, #0]
 80060f8:	7019      	strb	r1, [r3, #0]
 80060fa:	4608      	mov	r0, r1
 80060fc:	bc10      	pop	{r4}
 80060fe:	4770      	bx	lr

08006100 <__sfputs_r>:
 8006100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006102:	4606      	mov	r6, r0
 8006104:	460f      	mov	r7, r1
 8006106:	4614      	mov	r4, r2
 8006108:	18d5      	adds	r5, r2, r3
 800610a:	42ac      	cmp	r4, r5
 800610c:	d101      	bne.n	8006112 <__sfputs_r+0x12>
 800610e:	2000      	movs	r0, #0
 8006110:	e007      	b.n	8006122 <__sfputs_r+0x22>
 8006112:	463a      	mov	r2, r7
 8006114:	4630      	mov	r0, r6
 8006116:	f814 1b01 	ldrb.w	r1, [r4], #1
 800611a:	f7ff ffdc 	bl	80060d6 <__sfputc_r>
 800611e:	1c43      	adds	r3, r0, #1
 8006120:	d1f3      	bne.n	800610a <__sfputs_r+0xa>
 8006122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006124 <_vfiprintf_r>:
 8006124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006128:	460d      	mov	r5, r1
 800612a:	4614      	mov	r4, r2
 800612c:	4698      	mov	r8, r3
 800612e:	4606      	mov	r6, r0
 8006130:	b09d      	sub	sp, #116	@ 0x74
 8006132:	b118      	cbz	r0, 800613c <_vfiprintf_r+0x18>
 8006134:	6a03      	ldr	r3, [r0, #32]
 8006136:	b90b      	cbnz	r3, 800613c <_vfiprintf_r+0x18>
 8006138:	f7fc fe04 	bl	8002d44 <__sinit>
 800613c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800613e:	07d9      	lsls	r1, r3, #31
 8006140:	d405      	bmi.n	800614e <_vfiprintf_r+0x2a>
 8006142:	89ab      	ldrh	r3, [r5, #12]
 8006144:	059a      	lsls	r2, r3, #22
 8006146:	d402      	bmi.n	800614e <_vfiprintf_r+0x2a>
 8006148:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800614a:	f7fc ff12 	bl	8002f72 <__retarget_lock_acquire_recursive>
 800614e:	89ab      	ldrh	r3, [r5, #12]
 8006150:	071b      	lsls	r3, r3, #28
 8006152:	d501      	bpl.n	8006158 <_vfiprintf_r+0x34>
 8006154:	692b      	ldr	r3, [r5, #16]
 8006156:	b99b      	cbnz	r3, 8006180 <_vfiprintf_r+0x5c>
 8006158:	4629      	mov	r1, r5
 800615a:	4630      	mov	r0, r6
 800615c:	f000 f938 	bl	80063d0 <__swsetup_r>
 8006160:	b170      	cbz	r0, 8006180 <_vfiprintf_r+0x5c>
 8006162:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006164:	07dc      	lsls	r4, r3, #31
 8006166:	d504      	bpl.n	8006172 <_vfiprintf_r+0x4e>
 8006168:	f04f 30ff 	mov.w	r0, #4294967295
 800616c:	b01d      	add	sp, #116	@ 0x74
 800616e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006172:	89ab      	ldrh	r3, [r5, #12]
 8006174:	0598      	lsls	r0, r3, #22
 8006176:	d4f7      	bmi.n	8006168 <_vfiprintf_r+0x44>
 8006178:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800617a:	f7fc fefb 	bl	8002f74 <__retarget_lock_release_recursive>
 800617e:	e7f3      	b.n	8006168 <_vfiprintf_r+0x44>
 8006180:	2300      	movs	r3, #0
 8006182:	9309      	str	r3, [sp, #36]	@ 0x24
 8006184:	2320      	movs	r3, #32
 8006186:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800618a:	2330      	movs	r3, #48	@ 0x30
 800618c:	f04f 0901 	mov.w	r9, #1
 8006190:	f8cd 800c 	str.w	r8, [sp, #12]
 8006194:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006340 <_vfiprintf_r+0x21c>
 8006198:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800619c:	4623      	mov	r3, r4
 800619e:	469a      	mov	sl, r3
 80061a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061a4:	b10a      	cbz	r2, 80061aa <_vfiprintf_r+0x86>
 80061a6:	2a25      	cmp	r2, #37	@ 0x25
 80061a8:	d1f9      	bne.n	800619e <_vfiprintf_r+0x7a>
 80061aa:	ebba 0b04 	subs.w	fp, sl, r4
 80061ae:	d00b      	beq.n	80061c8 <_vfiprintf_r+0xa4>
 80061b0:	465b      	mov	r3, fp
 80061b2:	4622      	mov	r2, r4
 80061b4:	4629      	mov	r1, r5
 80061b6:	4630      	mov	r0, r6
 80061b8:	f7ff ffa2 	bl	8006100 <__sfputs_r>
 80061bc:	3001      	adds	r0, #1
 80061be:	f000 80a7 	beq.w	8006310 <_vfiprintf_r+0x1ec>
 80061c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80061c4:	445a      	add	r2, fp
 80061c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80061c8:	f89a 3000 	ldrb.w	r3, [sl]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	f000 809f 	beq.w	8006310 <_vfiprintf_r+0x1ec>
 80061d2:	2300      	movs	r3, #0
 80061d4:	f04f 32ff 	mov.w	r2, #4294967295
 80061d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061dc:	f10a 0a01 	add.w	sl, sl, #1
 80061e0:	9304      	str	r3, [sp, #16]
 80061e2:	9307      	str	r3, [sp, #28]
 80061e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80061e8:	931a      	str	r3, [sp, #104]	@ 0x68
 80061ea:	4654      	mov	r4, sl
 80061ec:	2205      	movs	r2, #5
 80061ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061f2:	4853      	ldr	r0, [pc, #332]	@ (8006340 <_vfiprintf_r+0x21c>)
 80061f4:	f7fc febf 	bl	8002f76 <memchr>
 80061f8:	9a04      	ldr	r2, [sp, #16]
 80061fa:	b9d8      	cbnz	r0, 8006234 <_vfiprintf_r+0x110>
 80061fc:	06d1      	lsls	r1, r2, #27
 80061fe:	bf44      	itt	mi
 8006200:	2320      	movmi	r3, #32
 8006202:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006206:	0713      	lsls	r3, r2, #28
 8006208:	bf44      	itt	mi
 800620a:	232b      	movmi	r3, #43	@ 0x2b
 800620c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006210:	f89a 3000 	ldrb.w	r3, [sl]
 8006214:	2b2a      	cmp	r3, #42	@ 0x2a
 8006216:	d015      	beq.n	8006244 <_vfiprintf_r+0x120>
 8006218:	4654      	mov	r4, sl
 800621a:	2000      	movs	r0, #0
 800621c:	f04f 0c0a 	mov.w	ip, #10
 8006220:	9a07      	ldr	r2, [sp, #28]
 8006222:	4621      	mov	r1, r4
 8006224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006228:	3b30      	subs	r3, #48	@ 0x30
 800622a:	2b09      	cmp	r3, #9
 800622c:	d94b      	bls.n	80062c6 <_vfiprintf_r+0x1a2>
 800622e:	b1b0      	cbz	r0, 800625e <_vfiprintf_r+0x13a>
 8006230:	9207      	str	r2, [sp, #28]
 8006232:	e014      	b.n	800625e <_vfiprintf_r+0x13a>
 8006234:	eba0 0308 	sub.w	r3, r0, r8
 8006238:	fa09 f303 	lsl.w	r3, r9, r3
 800623c:	4313      	orrs	r3, r2
 800623e:	46a2      	mov	sl, r4
 8006240:	9304      	str	r3, [sp, #16]
 8006242:	e7d2      	b.n	80061ea <_vfiprintf_r+0xc6>
 8006244:	9b03      	ldr	r3, [sp, #12]
 8006246:	1d19      	adds	r1, r3, #4
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	9103      	str	r1, [sp, #12]
 800624c:	2b00      	cmp	r3, #0
 800624e:	bfbb      	ittet	lt
 8006250:	425b      	neglt	r3, r3
 8006252:	f042 0202 	orrlt.w	r2, r2, #2
 8006256:	9307      	strge	r3, [sp, #28]
 8006258:	9307      	strlt	r3, [sp, #28]
 800625a:	bfb8      	it	lt
 800625c:	9204      	strlt	r2, [sp, #16]
 800625e:	7823      	ldrb	r3, [r4, #0]
 8006260:	2b2e      	cmp	r3, #46	@ 0x2e
 8006262:	d10a      	bne.n	800627a <_vfiprintf_r+0x156>
 8006264:	7863      	ldrb	r3, [r4, #1]
 8006266:	2b2a      	cmp	r3, #42	@ 0x2a
 8006268:	d132      	bne.n	80062d0 <_vfiprintf_r+0x1ac>
 800626a:	9b03      	ldr	r3, [sp, #12]
 800626c:	3402      	adds	r4, #2
 800626e:	1d1a      	adds	r2, r3, #4
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	9203      	str	r2, [sp, #12]
 8006274:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006278:	9305      	str	r3, [sp, #20]
 800627a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006344 <_vfiprintf_r+0x220>
 800627e:	2203      	movs	r2, #3
 8006280:	4650      	mov	r0, sl
 8006282:	7821      	ldrb	r1, [r4, #0]
 8006284:	f7fc fe77 	bl	8002f76 <memchr>
 8006288:	b138      	cbz	r0, 800629a <_vfiprintf_r+0x176>
 800628a:	2240      	movs	r2, #64	@ 0x40
 800628c:	9b04      	ldr	r3, [sp, #16]
 800628e:	eba0 000a 	sub.w	r0, r0, sl
 8006292:	4082      	lsls	r2, r0
 8006294:	4313      	orrs	r3, r2
 8006296:	3401      	adds	r4, #1
 8006298:	9304      	str	r3, [sp, #16]
 800629a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800629e:	2206      	movs	r2, #6
 80062a0:	4829      	ldr	r0, [pc, #164]	@ (8006348 <_vfiprintf_r+0x224>)
 80062a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80062a6:	f7fc fe66 	bl	8002f76 <memchr>
 80062aa:	2800      	cmp	r0, #0
 80062ac:	d03f      	beq.n	800632e <_vfiprintf_r+0x20a>
 80062ae:	4b27      	ldr	r3, [pc, #156]	@ (800634c <_vfiprintf_r+0x228>)
 80062b0:	bb1b      	cbnz	r3, 80062fa <_vfiprintf_r+0x1d6>
 80062b2:	9b03      	ldr	r3, [sp, #12]
 80062b4:	3307      	adds	r3, #7
 80062b6:	f023 0307 	bic.w	r3, r3, #7
 80062ba:	3308      	adds	r3, #8
 80062bc:	9303      	str	r3, [sp, #12]
 80062be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062c0:	443b      	add	r3, r7
 80062c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80062c4:	e76a      	b.n	800619c <_vfiprintf_r+0x78>
 80062c6:	460c      	mov	r4, r1
 80062c8:	2001      	movs	r0, #1
 80062ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80062ce:	e7a8      	b.n	8006222 <_vfiprintf_r+0xfe>
 80062d0:	2300      	movs	r3, #0
 80062d2:	f04f 0c0a 	mov.w	ip, #10
 80062d6:	4619      	mov	r1, r3
 80062d8:	3401      	adds	r4, #1
 80062da:	9305      	str	r3, [sp, #20]
 80062dc:	4620      	mov	r0, r4
 80062de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062e2:	3a30      	subs	r2, #48	@ 0x30
 80062e4:	2a09      	cmp	r2, #9
 80062e6:	d903      	bls.n	80062f0 <_vfiprintf_r+0x1cc>
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d0c6      	beq.n	800627a <_vfiprintf_r+0x156>
 80062ec:	9105      	str	r1, [sp, #20]
 80062ee:	e7c4      	b.n	800627a <_vfiprintf_r+0x156>
 80062f0:	4604      	mov	r4, r0
 80062f2:	2301      	movs	r3, #1
 80062f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80062f8:	e7f0      	b.n	80062dc <_vfiprintf_r+0x1b8>
 80062fa:	ab03      	add	r3, sp, #12
 80062fc:	9300      	str	r3, [sp, #0]
 80062fe:	462a      	mov	r2, r5
 8006300:	4630      	mov	r0, r6
 8006302:	4b13      	ldr	r3, [pc, #76]	@ (8006350 <_vfiprintf_r+0x22c>)
 8006304:	a904      	add	r1, sp, #16
 8006306:	f7fb fec3 	bl	8002090 <_printf_float>
 800630a:	4607      	mov	r7, r0
 800630c:	1c78      	adds	r0, r7, #1
 800630e:	d1d6      	bne.n	80062be <_vfiprintf_r+0x19a>
 8006310:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006312:	07d9      	lsls	r1, r3, #31
 8006314:	d405      	bmi.n	8006322 <_vfiprintf_r+0x1fe>
 8006316:	89ab      	ldrh	r3, [r5, #12]
 8006318:	059a      	lsls	r2, r3, #22
 800631a:	d402      	bmi.n	8006322 <_vfiprintf_r+0x1fe>
 800631c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800631e:	f7fc fe29 	bl	8002f74 <__retarget_lock_release_recursive>
 8006322:	89ab      	ldrh	r3, [r5, #12]
 8006324:	065b      	lsls	r3, r3, #25
 8006326:	f53f af1f 	bmi.w	8006168 <_vfiprintf_r+0x44>
 800632a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800632c:	e71e      	b.n	800616c <_vfiprintf_r+0x48>
 800632e:	ab03      	add	r3, sp, #12
 8006330:	9300      	str	r3, [sp, #0]
 8006332:	462a      	mov	r2, r5
 8006334:	4630      	mov	r0, r6
 8006336:	4b06      	ldr	r3, [pc, #24]	@ (8006350 <_vfiprintf_r+0x22c>)
 8006338:	a904      	add	r1, sp, #16
 800633a:	f7fc f947 	bl	80025cc <_printf_i>
 800633e:	e7e4      	b.n	800630a <_vfiprintf_r+0x1e6>
 8006340:	080069c1 	.word	0x080069c1
 8006344:	080069c7 	.word	0x080069c7
 8006348:	080069cb 	.word	0x080069cb
 800634c:	08002091 	.word	0x08002091
 8006350:	08006101 	.word	0x08006101

08006354 <__swbuf_r>:
 8006354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006356:	460e      	mov	r6, r1
 8006358:	4614      	mov	r4, r2
 800635a:	4605      	mov	r5, r0
 800635c:	b118      	cbz	r0, 8006366 <__swbuf_r+0x12>
 800635e:	6a03      	ldr	r3, [r0, #32]
 8006360:	b90b      	cbnz	r3, 8006366 <__swbuf_r+0x12>
 8006362:	f7fc fcef 	bl	8002d44 <__sinit>
 8006366:	69a3      	ldr	r3, [r4, #24]
 8006368:	60a3      	str	r3, [r4, #8]
 800636a:	89a3      	ldrh	r3, [r4, #12]
 800636c:	071a      	lsls	r2, r3, #28
 800636e:	d501      	bpl.n	8006374 <__swbuf_r+0x20>
 8006370:	6923      	ldr	r3, [r4, #16]
 8006372:	b943      	cbnz	r3, 8006386 <__swbuf_r+0x32>
 8006374:	4621      	mov	r1, r4
 8006376:	4628      	mov	r0, r5
 8006378:	f000 f82a 	bl	80063d0 <__swsetup_r>
 800637c:	b118      	cbz	r0, 8006386 <__swbuf_r+0x32>
 800637e:	f04f 37ff 	mov.w	r7, #4294967295
 8006382:	4638      	mov	r0, r7
 8006384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006386:	6823      	ldr	r3, [r4, #0]
 8006388:	6922      	ldr	r2, [r4, #16]
 800638a:	b2f6      	uxtb	r6, r6
 800638c:	1a98      	subs	r0, r3, r2
 800638e:	6963      	ldr	r3, [r4, #20]
 8006390:	4637      	mov	r7, r6
 8006392:	4283      	cmp	r3, r0
 8006394:	dc05      	bgt.n	80063a2 <__swbuf_r+0x4e>
 8006396:	4621      	mov	r1, r4
 8006398:	4628      	mov	r0, r5
 800639a:	f7ff fa4b 	bl	8005834 <_fflush_r>
 800639e:	2800      	cmp	r0, #0
 80063a0:	d1ed      	bne.n	800637e <__swbuf_r+0x2a>
 80063a2:	68a3      	ldr	r3, [r4, #8]
 80063a4:	3b01      	subs	r3, #1
 80063a6:	60a3      	str	r3, [r4, #8]
 80063a8:	6823      	ldr	r3, [r4, #0]
 80063aa:	1c5a      	adds	r2, r3, #1
 80063ac:	6022      	str	r2, [r4, #0]
 80063ae:	701e      	strb	r6, [r3, #0]
 80063b0:	6962      	ldr	r2, [r4, #20]
 80063b2:	1c43      	adds	r3, r0, #1
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d004      	beq.n	80063c2 <__swbuf_r+0x6e>
 80063b8:	89a3      	ldrh	r3, [r4, #12]
 80063ba:	07db      	lsls	r3, r3, #31
 80063bc:	d5e1      	bpl.n	8006382 <__swbuf_r+0x2e>
 80063be:	2e0a      	cmp	r6, #10
 80063c0:	d1df      	bne.n	8006382 <__swbuf_r+0x2e>
 80063c2:	4621      	mov	r1, r4
 80063c4:	4628      	mov	r0, r5
 80063c6:	f7ff fa35 	bl	8005834 <_fflush_r>
 80063ca:	2800      	cmp	r0, #0
 80063cc:	d0d9      	beq.n	8006382 <__swbuf_r+0x2e>
 80063ce:	e7d6      	b.n	800637e <__swbuf_r+0x2a>

080063d0 <__swsetup_r>:
 80063d0:	b538      	push	{r3, r4, r5, lr}
 80063d2:	4b29      	ldr	r3, [pc, #164]	@ (8006478 <__swsetup_r+0xa8>)
 80063d4:	4605      	mov	r5, r0
 80063d6:	6818      	ldr	r0, [r3, #0]
 80063d8:	460c      	mov	r4, r1
 80063da:	b118      	cbz	r0, 80063e4 <__swsetup_r+0x14>
 80063dc:	6a03      	ldr	r3, [r0, #32]
 80063de:	b90b      	cbnz	r3, 80063e4 <__swsetup_r+0x14>
 80063e0:	f7fc fcb0 	bl	8002d44 <__sinit>
 80063e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063e8:	0719      	lsls	r1, r3, #28
 80063ea:	d422      	bmi.n	8006432 <__swsetup_r+0x62>
 80063ec:	06da      	lsls	r2, r3, #27
 80063ee:	d407      	bmi.n	8006400 <__swsetup_r+0x30>
 80063f0:	2209      	movs	r2, #9
 80063f2:	602a      	str	r2, [r5, #0]
 80063f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063f8:	f04f 30ff 	mov.w	r0, #4294967295
 80063fc:	81a3      	strh	r3, [r4, #12]
 80063fe:	e033      	b.n	8006468 <__swsetup_r+0x98>
 8006400:	0758      	lsls	r0, r3, #29
 8006402:	d512      	bpl.n	800642a <__swsetup_r+0x5a>
 8006404:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006406:	b141      	cbz	r1, 800641a <__swsetup_r+0x4a>
 8006408:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800640c:	4299      	cmp	r1, r3
 800640e:	d002      	beq.n	8006416 <__swsetup_r+0x46>
 8006410:	4628      	mov	r0, r5
 8006412:	f7fd fc15 	bl	8003c40 <_free_r>
 8006416:	2300      	movs	r3, #0
 8006418:	6363      	str	r3, [r4, #52]	@ 0x34
 800641a:	89a3      	ldrh	r3, [r4, #12]
 800641c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006420:	81a3      	strh	r3, [r4, #12]
 8006422:	2300      	movs	r3, #0
 8006424:	6063      	str	r3, [r4, #4]
 8006426:	6923      	ldr	r3, [r4, #16]
 8006428:	6023      	str	r3, [r4, #0]
 800642a:	89a3      	ldrh	r3, [r4, #12]
 800642c:	f043 0308 	orr.w	r3, r3, #8
 8006430:	81a3      	strh	r3, [r4, #12]
 8006432:	6923      	ldr	r3, [r4, #16]
 8006434:	b94b      	cbnz	r3, 800644a <__swsetup_r+0x7a>
 8006436:	89a3      	ldrh	r3, [r4, #12]
 8006438:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800643c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006440:	d003      	beq.n	800644a <__swsetup_r+0x7a>
 8006442:	4621      	mov	r1, r4
 8006444:	4628      	mov	r0, r5
 8006446:	f000 f882 	bl	800654e <__smakebuf_r>
 800644a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800644e:	f013 0201 	ands.w	r2, r3, #1
 8006452:	d00a      	beq.n	800646a <__swsetup_r+0x9a>
 8006454:	2200      	movs	r2, #0
 8006456:	60a2      	str	r2, [r4, #8]
 8006458:	6962      	ldr	r2, [r4, #20]
 800645a:	4252      	negs	r2, r2
 800645c:	61a2      	str	r2, [r4, #24]
 800645e:	6922      	ldr	r2, [r4, #16]
 8006460:	b942      	cbnz	r2, 8006474 <__swsetup_r+0xa4>
 8006462:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006466:	d1c5      	bne.n	80063f4 <__swsetup_r+0x24>
 8006468:	bd38      	pop	{r3, r4, r5, pc}
 800646a:	0799      	lsls	r1, r3, #30
 800646c:	bf58      	it	pl
 800646e:	6962      	ldrpl	r2, [r4, #20]
 8006470:	60a2      	str	r2, [r4, #8]
 8006472:	e7f4      	b.n	800645e <__swsetup_r+0x8e>
 8006474:	2000      	movs	r0, #0
 8006476:	e7f7      	b.n	8006468 <__swsetup_r+0x98>
 8006478:	20000018 	.word	0x20000018

0800647c <_raise_r>:
 800647c:	291f      	cmp	r1, #31
 800647e:	b538      	push	{r3, r4, r5, lr}
 8006480:	4605      	mov	r5, r0
 8006482:	460c      	mov	r4, r1
 8006484:	d904      	bls.n	8006490 <_raise_r+0x14>
 8006486:	2316      	movs	r3, #22
 8006488:	6003      	str	r3, [r0, #0]
 800648a:	f04f 30ff 	mov.w	r0, #4294967295
 800648e:	bd38      	pop	{r3, r4, r5, pc}
 8006490:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006492:	b112      	cbz	r2, 800649a <_raise_r+0x1e>
 8006494:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006498:	b94b      	cbnz	r3, 80064ae <_raise_r+0x32>
 800649a:	4628      	mov	r0, r5
 800649c:	f000 f830 	bl	8006500 <_getpid_r>
 80064a0:	4622      	mov	r2, r4
 80064a2:	4601      	mov	r1, r0
 80064a4:	4628      	mov	r0, r5
 80064a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064aa:	f000 b817 	b.w	80064dc <_kill_r>
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d00a      	beq.n	80064c8 <_raise_r+0x4c>
 80064b2:	1c59      	adds	r1, r3, #1
 80064b4:	d103      	bne.n	80064be <_raise_r+0x42>
 80064b6:	2316      	movs	r3, #22
 80064b8:	6003      	str	r3, [r0, #0]
 80064ba:	2001      	movs	r0, #1
 80064bc:	e7e7      	b.n	800648e <_raise_r+0x12>
 80064be:	2100      	movs	r1, #0
 80064c0:	4620      	mov	r0, r4
 80064c2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80064c6:	4798      	blx	r3
 80064c8:	2000      	movs	r0, #0
 80064ca:	e7e0      	b.n	800648e <_raise_r+0x12>

080064cc <raise>:
 80064cc:	4b02      	ldr	r3, [pc, #8]	@ (80064d8 <raise+0xc>)
 80064ce:	4601      	mov	r1, r0
 80064d0:	6818      	ldr	r0, [r3, #0]
 80064d2:	f7ff bfd3 	b.w	800647c <_raise_r>
 80064d6:	bf00      	nop
 80064d8:	20000018 	.word	0x20000018

080064dc <_kill_r>:
 80064dc:	b538      	push	{r3, r4, r5, lr}
 80064de:	2300      	movs	r3, #0
 80064e0:	4d06      	ldr	r5, [pc, #24]	@ (80064fc <_kill_r+0x20>)
 80064e2:	4604      	mov	r4, r0
 80064e4:	4608      	mov	r0, r1
 80064e6:	4611      	mov	r1, r2
 80064e8:	602b      	str	r3, [r5, #0]
 80064ea:	f7fa fd7c 	bl	8000fe6 <_kill>
 80064ee:	1c43      	adds	r3, r0, #1
 80064f0:	d102      	bne.n	80064f8 <_kill_r+0x1c>
 80064f2:	682b      	ldr	r3, [r5, #0]
 80064f4:	b103      	cbz	r3, 80064f8 <_kill_r+0x1c>
 80064f6:	6023      	str	r3, [r4, #0]
 80064f8:	bd38      	pop	{r3, r4, r5, pc}
 80064fa:	bf00      	nop
 80064fc:	20000334 	.word	0x20000334

08006500 <_getpid_r>:
 8006500:	f7fa bd6a 	b.w	8000fd8 <_getpid>

08006504 <__swhatbuf_r>:
 8006504:	b570      	push	{r4, r5, r6, lr}
 8006506:	460c      	mov	r4, r1
 8006508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800650c:	4615      	mov	r5, r2
 800650e:	2900      	cmp	r1, #0
 8006510:	461e      	mov	r6, r3
 8006512:	b096      	sub	sp, #88	@ 0x58
 8006514:	da0c      	bge.n	8006530 <__swhatbuf_r+0x2c>
 8006516:	89a3      	ldrh	r3, [r4, #12]
 8006518:	2100      	movs	r1, #0
 800651a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800651e:	bf14      	ite	ne
 8006520:	2340      	movne	r3, #64	@ 0x40
 8006522:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006526:	2000      	movs	r0, #0
 8006528:	6031      	str	r1, [r6, #0]
 800652a:	602b      	str	r3, [r5, #0]
 800652c:	b016      	add	sp, #88	@ 0x58
 800652e:	bd70      	pop	{r4, r5, r6, pc}
 8006530:	466a      	mov	r2, sp
 8006532:	f000 f849 	bl	80065c8 <_fstat_r>
 8006536:	2800      	cmp	r0, #0
 8006538:	dbed      	blt.n	8006516 <__swhatbuf_r+0x12>
 800653a:	9901      	ldr	r1, [sp, #4]
 800653c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006540:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006544:	4259      	negs	r1, r3
 8006546:	4159      	adcs	r1, r3
 8006548:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800654c:	e7eb      	b.n	8006526 <__swhatbuf_r+0x22>

0800654e <__smakebuf_r>:
 800654e:	898b      	ldrh	r3, [r1, #12]
 8006550:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006552:	079d      	lsls	r5, r3, #30
 8006554:	4606      	mov	r6, r0
 8006556:	460c      	mov	r4, r1
 8006558:	d507      	bpl.n	800656a <__smakebuf_r+0x1c>
 800655a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800655e:	6023      	str	r3, [r4, #0]
 8006560:	6123      	str	r3, [r4, #16]
 8006562:	2301      	movs	r3, #1
 8006564:	6163      	str	r3, [r4, #20]
 8006566:	b003      	add	sp, #12
 8006568:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800656a:	466a      	mov	r2, sp
 800656c:	ab01      	add	r3, sp, #4
 800656e:	f7ff ffc9 	bl	8006504 <__swhatbuf_r>
 8006572:	9f00      	ldr	r7, [sp, #0]
 8006574:	4605      	mov	r5, r0
 8006576:	4639      	mov	r1, r7
 8006578:	4630      	mov	r0, r6
 800657a:	f7fd fbd3 	bl	8003d24 <_malloc_r>
 800657e:	b948      	cbnz	r0, 8006594 <__smakebuf_r+0x46>
 8006580:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006584:	059a      	lsls	r2, r3, #22
 8006586:	d4ee      	bmi.n	8006566 <__smakebuf_r+0x18>
 8006588:	f023 0303 	bic.w	r3, r3, #3
 800658c:	f043 0302 	orr.w	r3, r3, #2
 8006590:	81a3      	strh	r3, [r4, #12]
 8006592:	e7e2      	b.n	800655a <__smakebuf_r+0xc>
 8006594:	89a3      	ldrh	r3, [r4, #12]
 8006596:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800659a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800659e:	81a3      	strh	r3, [r4, #12]
 80065a0:	9b01      	ldr	r3, [sp, #4]
 80065a2:	6020      	str	r0, [r4, #0]
 80065a4:	b15b      	cbz	r3, 80065be <__smakebuf_r+0x70>
 80065a6:	4630      	mov	r0, r6
 80065a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065ac:	f000 f81e 	bl	80065ec <_isatty_r>
 80065b0:	b128      	cbz	r0, 80065be <__smakebuf_r+0x70>
 80065b2:	89a3      	ldrh	r3, [r4, #12]
 80065b4:	f023 0303 	bic.w	r3, r3, #3
 80065b8:	f043 0301 	orr.w	r3, r3, #1
 80065bc:	81a3      	strh	r3, [r4, #12]
 80065be:	89a3      	ldrh	r3, [r4, #12]
 80065c0:	431d      	orrs	r5, r3
 80065c2:	81a5      	strh	r5, [r4, #12]
 80065c4:	e7cf      	b.n	8006566 <__smakebuf_r+0x18>
	...

080065c8 <_fstat_r>:
 80065c8:	b538      	push	{r3, r4, r5, lr}
 80065ca:	2300      	movs	r3, #0
 80065cc:	4d06      	ldr	r5, [pc, #24]	@ (80065e8 <_fstat_r+0x20>)
 80065ce:	4604      	mov	r4, r0
 80065d0:	4608      	mov	r0, r1
 80065d2:	4611      	mov	r1, r2
 80065d4:	602b      	str	r3, [r5, #0]
 80065d6:	f7fa fd65 	bl	80010a4 <_fstat>
 80065da:	1c43      	adds	r3, r0, #1
 80065dc:	d102      	bne.n	80065e4 <_fstat_r+0x1c>
 80065de:	682b      	ldr	r3, [r5, #0]
 80065e0:	b103      	cbz	r3, 80065e4 <_fstat_r+0x1c>
 80065e2:	6023      	str	r3, [r4, #0]
 80065e4:	bd38      	pop	{r3, r4, r5, pc}
 80065e6:	bf00      	nop
 80065e8:	20000334 	.word	0x20000334

080065ec <_isatty_r>:
 80065ec:	b538      	push	{r3, r4, r5, lr}
 80065ee:	2300      	movs	r3, #0
 80065f0:	4d05      	ldr	r5, [pc, #20]	@ (8006608 <_isatty_r+0x1c>)
 80065f2:	4604      	mov	r4, r0
 80065f4:	4608      	mov	r0, r1
 80065f6:	602b      	str	r3, [r5, #0]
 80065f8:	f7fa fd63 	bl	80010c2 <_isatty>
 80065fc:	1c43      	adds	r3, r0, #1
 80065fe:	d102      	bne.n	8006606 <_isatty_r+0x1a>
 8006600:	682b      	ldr	r3, [r5, #0]
 8006602:	b103      	cbz	r3, 8006606 <_isatty_r+0x1a>
 8006604:	6023      	str	r3, [r4, #0]
 8006606:	bd38      	pop	{r3, r4, r5, pc}
 8006608:	20000334 	.word	0x20000334

0800660c <_init>:
 800660c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800660e:	bf00      	nop
 8006610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006612:	bc08      	pop	{r3}
 8006614:	469e      	mov	lr, r3
 8006616:	4770      	bx	lr

08006618 <_fini>:
 8006618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800661a:	bf00      	nop
 800661c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800661e:	bc08      	pop	{r3}
 8006620:	469e      	mov	lr, r3
 8006622:	4770      	bx	lr
