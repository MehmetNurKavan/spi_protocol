
spi_protocol_kvn_ucdr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064dc  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  080065f0  080065f0  000075f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a40  08006a40  000081d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006a40  08006a40  00007a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a48  08006a48  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a48  08006a48  00007a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006a4c  08006a4c  00007a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08006a50  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  200001d4  08006c24  000081d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000344  08006c24  00008344  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000031ed  00000000  00000000  000081fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000010d4  00000000  00000000  0000b3ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004b8  00000000  00000000  0000c4c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000035c  00000000  00000000  0000c978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016df0  00000000  00000000  0000ccd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000058bb  00000000  00000000  00023ac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f0ad  00000000  00000000  0002937f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a842c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025b8  00000000  00000000  000a8470  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  000aaa28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	080065d4 	.word	0x080065d4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	080065d4 	.word	0x080065d4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	4604      	mov	r4, r0
 8000b70:	460d      	mov	r5, r1
 8000b72:	f7ff ff23 	bl	80009bc <__aeabi_dcmplt>
 8000b76:	b928      	cbnz	r0, 8000b84 <__aeabi_d2lz+0x1c>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	4629      	mov	r1, r5
 8000b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b80:	f000 b80a 	b.w	8000b98 <__aeabi_d2ulz>
 8000b84:	4620      	mov	r0, r4
 8000b86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b8a:	f000 f805 	bl	8000b98 <__aeabi_d2ulz>
 8000b8e:	4240      	negs	r0, r0
 8000b90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b94:	bd38      	pop	{r3, r4, r5, pc}
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2ulz>:
 8000b98:	b5d0      	push	{r4, r6, r7, lr}
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <__aeabi_d2ulz+0x34>)
 8000b9e:	4606      	mov	r6, r0
 8000ba0:	460f      	mov	r7, r1
 8000ba2:	f7ff fc99 	bl	80004d8 <__aeabi_dmul>
 8000ba6:	f7ff ff6f 	bl	8000a88 <__aeabi_d2uiz>
 8000baa:	4604      	mov	r4, r0
 8000bac:	f7ff fc1a 	bl	80003e4 <__aeabi_ui2d>
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <__aeabi_d2ulz+0x38>)
 8000bb4:	f7ff fc90 	bl	80004d8 <__aeabi_dmul>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	460b      	mov	r3, r1
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	4639      	mov	r1, r7
 8000bc0:	f7ff fad2 	bl	8000168 <__aeabi_dsub>
 8000bc4:	f7ff ff60 	bl	8000a88 <__aeabi_d2uiz>
 8000bc8:	4621      	mov	r1, r4
 8000bca:	bdd0      	pop	{r4, r6, r7, pc}
 8000bcc:	3df00000 	.word	0x3df00000
 8000bd0:	41f00000 	.word	0x41f00000

08000bd4 <SPI_GPIO_Init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Pinleri doğru yönlerde yapılandırıyoruz
void SPI_GPIO_Init(void) {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b086      	sub	sp, #24
 8000bd8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bda:	f107 0308 	add.w	r3, r7, #8
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]
 8000be4:	609a      	str	r2, [r3, #8]
 8000be6:	60da      	str	r2, [r3, #12]

    // GPIOA saatini aktif et (SPI pinlerinin olduğu port)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be8:	4b13      	ldr	r3, [pc, #76]	@ (8000c38 <SPI_GPIO_Init+0x64>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	4a12      	ldr	r2, [pc, #72]	@ (8000c38 <SPI_GPIO_Init+0x64>)
 8000bee:	f043 0304 	orr.w	r3, r3, #4
 8000bf2:	6193      	str	r3, [r2, #24]
 8000bf4:	4b10      	ldr	r3, [pc, #64]	@ (8000c38 <SPI_GPIO_Init+0x64>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	f003 0304 	and.w	r3, r3, #4
 8000bfc:	607b      	str	r3, [r7, #4]
 8000bfe:	687b      	ldr	r3, [r7, #4]

    // SCK (PA5), MOSI (PA7) ve SS (PA4) pinlerini Input olarak ayarlıyoruz
    GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_7;
 8000c00:	23b0      	movs	r3, #176	@ 0xb0
 8000c02:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;  // Input
 8000c04:	2300      	movs	r3, #0
 8000c06:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;      // Floating veya Pull-up/Pull-down gereksinimine göre
 8000c08:	2300      	movs	r3, #0
 8000c0a:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0c:	f107 0308 	add.w	r3, r7, #8
 8000c10:	4619      	mov	r1, r3
 8000c12:	480a      	ldr	r0, [pc, #40]	@ (8000c3c <SPI_GPIO_Init+0x68>)
 8000c14:	f000 fbfa 	bl	800140c <HAL_GPIO_Init>

    // MISO (PA6) pinini Output olarak ayarlıyoruz
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c18:	2340      	movs	r3, #64	@ 0x40
 8000c1a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;  // Output, Push-Pull
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c20:	2303      	movs	r3, #3
 8000c22:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c24:	f107 0308 	add.w	r3, r7, #8
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4804      	ldr	r0, [pc, #16]	@ (8000c3c <SPI_GPIO_Init+0x68>)
 8000c2c:	f000 fbee 	bl	800140c <HAL_GPIO_Init>
}
 8000c30:	bf00      	nop
 8000c32:	3718      	adds	r7, #24
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	40010800 	.word	0x40010800

08000c40 <SPI_Receive>:

// Slave olarak veri alma (MOSI üzerinden)
uint8_t SPI_Receive(void) {
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
    uint8_t receivedData = 0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	71fb      	strb	r3, [r7, #7]
    
    for (int i = 7; i >= 0; i--) {
 8000c4a:	2307      	movs	r3, #7
 8000c4c:	603b      	str	r3, [r7, #0]
 8000c4e:	e023      	b.n	8000c98 <SPI_Receive+0x58>
        // Saat sinyali yükselene kadar bekle
        while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_RESET);
 8000c50:	bf00      	nop
 8000c52:	2120      	movs	r1, #32
 8000c54:	4814      	ldr	r0, [pc, #80]	@ (8000ca8 <SPI_Receive+0x68>)
 8000c56:	f000 fd55 	bl	8001704 <HAL_GPIO_ReadPin>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d0f8      	beq.n	8000c52 <SPI_Receive+0x12>
        
        // MOSI'den veriyi oku ve kaydet
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7)) {
 8000c60:	2180      	movs	r1, #128	@ 0x80
 8000c62:	4811      	ldr	r0, [pc, #68]	@ (8000ca8 <SPI_Receive+0x68>)
 8000c64:	f000 fd4e 	bl	8001704 <HAL_GPIO_ReadPin>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d009      	beq.n	8000c82 <SPI_Receive+0x42>
            receivedData |= (1 << i);
 8000c6e:	2201      	movs	r2, #1
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	b25a      	sxtb	r2, r3
 8000c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	b25b      	sxtb	r3, r3
 8000c80:	71fb      	strb	r3, [r7, #7]
        }
        
        // Saat sinyali düşene kadar bekle
        while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_SET);
 8000c82:	bf00      	nop
 8000c84:	2120      	movs	r1, #32
 8000c86:	4808      	ldr	r0, [pc, #32]	@ (8000ca8 <SPI_Receive+0x68>)
 8000c88:	f000 fd3c 	bl	8001704 <HAL_GPIO_ReadPin>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d0f8      	beq.n	8000c84 <SPI_Receive+0x44>
    for (int i = 7; i >= 0; i--) {
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	3b01      	subs	r3, #1
 8000c96:	603b      	str	r3, [r7, #0]
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	dad8      	bge.n	8000c50 <SPI_Receive+0x10>
    }
    return receivedData;
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40010800 	.word	0x40010800

08000cac <SPI_Send>:

// Slave olarak veri gönderme (MISO üzerinden)
void SPI_Send(uint8_t data) {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	71fb      	strb	r3, [r7, #7]
    // MISO'yu veri bitine göre ayarla ve bekle
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, data & 0x01);
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	f003 0301 	and.w	r3, r3, #1
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	2140      	movs	r1, #64	@ 0x40
 8000cc2:	480c      	ldr	r0, [pc, #48]	@ (8000cf4 <SPI_Send+0x48>)
 8000cc4:	f000 fd35 	bl	8001732 <HAL_GPIO_WritePin>
    
    // Saat yükselene kadar bekle
    while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_RESET);
 8000cc8:	bf00      	nop
 8000cca:	2120      	movs	r1, #32
 8000ccc:	4809      	ldr	r0, [pc, #36]	@ (8000cf4 <SPI_Send+0x48>)
 8000cce:	f000 fd19 	bl	8001704 <HAL_GPIO_ReadPin>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d0f8      	beq.n	8000cca <SPI_Send+0x1e>
    
    // Saat düşene kadar bekle
    while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_SET);
 8000cd8:	bf00      	nop
 8000cda:	2120      	movs	r1, #32
 8000cdc:	4805      	ldr	r0, [pc, #20]	@ (8000cf4 <SPI_Send+0x48>)
 8000cde:	f000 fd11 	bl	8001704 <HAL_GPIO_ReadPin>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d0f8      	beq.n	8000cda <SPI_Send+0x2e>
}
 8000ce8:	bf00      	nop
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40010800 	.word	0x40010800

08000cf8 <SPI_CheckSlaveSelect>:
// Slave Select pinini kontrol etme
uint8_t SPI_CheckSlaveSelect(void) {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);  // SS pininin durumunu oku
 8000cfc:	2110      	movs	r1, #16
 8000cfe:	4803      	ldr	r0, [pc, #12]	@ (8000d0c <SPI_CheckSlaveSelect+0x14>)
 8000d00:	f000 fd00 	bl	8001704 <HAL_GPIO_ReadPin>
 8000d04:	4603      	mov	r3, r0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40010800 	.word	0x40010800

08000d10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d16:	f000 fa33 	bl	8001180 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d1a:	f000 f837 	bl	8000d8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d1e:	f000 f871 	bl	8000e04 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  SPI_GPIO_Init();
 8000d22:	f7ff ff57 	bl	8000bd4 <SPI_GPIO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

	// SS pininin LOW olmasını bekle (slave seçildi)
	while (SPI_CheckSlaveSelect() == GPIO_PIN_SET);
 8000d26:	bf00      	nop
 8000d28:	f7ff ffe6 	bl	8000cf8 <SPI_CheckSlaveSelect>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d0fa      	beq.n	8000d28 <main+0x18>

	// Veriyi al
	uint8_t receivedData = SPI_Receive();
 8000d32:	f7ff ff85 	bl	8000c40 <SPI_Receive>
 8000d36:	4603      	mov	r3, r0
 8000d38:	71fb      	strb	r3, [r7, #7]
	
	// Tek/çift kontrolü
	uint8_t isOdd = (receivedData % 2);  // 1 ise tek, 0 ise çift
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	f003 0301 	and.w	r3, r3, #1
 8000d40:	71bb      	strb	r3, [r7, #6]

	// LED'leri ayarla
	if (isOdd) {  // Tek sayı
 8000d42:	79bb      	ldrb	r3, [r7, #6]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d00a      	beq.n	8000d5e <main+0x4e>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET); // PA0 söndür
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2101      	movs	r1, #1
 8000d4c:	480e      	ldr	r0, [pc, #56]	@ (8000d88 <main+0x78>)
 8000d4e:	f000 fcf0 	bl	8001732 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);   // PA1 yak
 8000d52:	2201      	movs	r2, #1
 8000d54:	2102      	movs	r1, #2
 8000d56:	480c      	ldr	r0, [pc, #48]	@ (8000d88 <main+0x78>)
 8000d58:	f000 fceb 	bl	8001732 <HAL_GPIO_WritePin>
 8000d5c:	e009      	b.n	8000d72 <main+0x62>
	} else {      // Çift sayı
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);   // PA0 yak
 8000d5e:	2201      	movs	r2, #1
 8000d60:	2101      	movs	r1, #1
 8000d62:	4809      	ldr	r0, [pc, #36]	@ (8000d88 <main+0x78>)
 8000d64:	f000 fce5 	bl	8001732 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET); // PA1 söndür
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2102      	movs	r1, #2
 8000d6c:	4806      	ldr	r0, [pc, #24]	@ (8000d88 <main+0x78>)
 8000d6e:	f000 fce0 	bl	8001732 <HAL_GPIO_WritePin>
	}

	// Yanıt olarak tek (1) veya çift (0) durumunu gönder
	SPI_Send(isOdd);
 8000d72:	79bb      	ldrb	r3, [r7, #6]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff ff99 	bl	8000cac <SPI_Send>

	// SS pininin tekrar HIGH olmasını bekle
	while (SPI_CheckSlaveSelect() == GPIO_PIN_RESET);
 8000d7a:	bf00      	nop
 8000d7c:	f7ff ffbc 	bl	8000cf8 <SPI_CheckSlaveSelect>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d0fa      	beq.n	8000d7c <main+0x6c>
  {
 8000d86:	e7ce      	b.n	8000d26 <main+0x16>
 8000d88:	40010800 	.word	0x40010800

08000d8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b090      	sub	sp, #64	@ 0x40
 8000d90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d92:	f107 0318 	add.w	r3, r7, #24
 8000d96:	2228      	movs	r2, #40	@ 0x28
 8000d98:	2100      	movs	r1, #0
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f002 f851 	bl	8002e42 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da0:	1d3b      	adds	r3, r7, #4
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]
 8000daa:	60da      	str	r2, [r3, #12]
 8000dac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dae:	2302      	movs	r3, #2
 8000db0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000db2:	2301      	movs	r3, #1
 8000db4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000db6:	2310      	movs	r3, #16
 8000db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dbe:	f107 0318 	add.w	r3, r7, #24
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f000 fcce 	bl	8001764 <HAL_RCC_OscConfig>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000dce:	f000 f885 	bl	8000edc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dd2:	230f      	movs	r3, #15
 8000dd4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dde:	2300      	movs	r3, #0
 8000de0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000de2:	2300      	movs	r3, #0
 8000de4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000de6:	1d3b      	adds	r3, r7, #4
 8000de8:	2100      	movs	r1, #0
 8000dea:	4618      	mov	r0, r3
 8000dec:	f000 ff3c 	bl	8001c68 <HAL_RCC_ClockConfig>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000df6:	f000 f871 	bl	8000edc <Error_Handler>
  }
}
 8000dfa:	bf00      	nop
 8000dfc:	3740      	adds	r7, #64	@ 0x40
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
	...

08000e04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b088      	sub	sp, #32
 8000e08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0a:	f107 0310 	add.w	r3, r7, #16
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	605a      	str	r2, [r3, #4]
 8000e14:	609a      	str	r2, [r3, #8]
 8000e16:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e18:	4b2d      	ldr	r3, [pc, #180]	@ (8000ed0 <MX_GPIO_Init+0xcc>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	4a2c      	ldr	r2, [pc, #176]	@ (8000ed0 <MX_GPIO_Init+0xcc>)
 8000e1e:	f043 0310 	orr.w	r3, r3, #16
 8000e22:	6193      	str	r3, [r2, #24]
 8000e24:	4b2a      	ldr	r3, [pc, #168]	@ (8000ed0 <MX_GPIO_Init+0xcc>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	f003 0310 	and.w	r3, r3, #16
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e30:	4b27      	ldr	r3, [pc, #156]	@ (8000ed0 <MX_GPIO_Init+0xcc>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	4a26      	ldr	r2, [pc, #152]	@ (8000ed0 <MX_GPIO_Init+0xcc>)
 8000e36:	f043 0320 	orr.w	r3, r3, #32
 8000e3a:	6193      	str	r3, [r2, #24]
 8000e3c:	4b24      	ldr	r3, [pc, #144]	@ (8000ed0 <MX_GPIO_Init+0xcc>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	f003 0320 	and.w	r3, r3, #32
 8000e44:	60bb      	str	r3, [r7, #8]
 8000e46:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e48:	4b21      	ldr	r3, [pc, #132]	@ (8000ed0 <MX_GPIO_Init+0xcc>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	4a20      	ldr	r2, [pc, #128]	@ (8000ed0 <MX_GPIO_Init+0xcc>)
 8000e4e:	f043 0304 	orr.w	r3, r3, #4
 8000e52:	6193      	str	r3, [r2, #24]
 8000e54:	4b1e      	ldr	r3, [pc, #120]	@ (8000ed0 <MX_GPIO_Init+0xcc>)
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	f003 0304 	and.w	r3, r3, #4
 8000e5c:	607b      	str	r3, [r7, #4]
 8000e5e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000e60:	2200      	movs	r2, #0
 8000e62:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e66:	481b      	ldr	r0, [pc, #108]	@ (8000ed4 <MX_GPIO_Init+0xd0>)
 8000e68:	f000 fc63 	bl	8001732 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6, GPIO_PIN_RESET);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2143      	movs	r1, #67	@ 0x43
 8000e70:	4819      	ldr	r0, [pc, #100]	@ (8000ed8 <MX_GPIO_Init+0xd4>)
 8000e72:	f000 fc5e 	bl	8001732 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e76:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e84:	2302      	movs	r3, #2
 8000e86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e88:	f107 0310 	add.w	r3, r7, #16
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4811      	ldr	r0, [pc, #68]	@ (8000ed4 <MX_GPIO_Init+0xd0>)
 8000e90:	f000 fabc 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6;
 8000e94:	2343      	movs	r3, #67	@ 0x43
 8000e96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea4:	f107 0310 	add.w	r3, r7, #16
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	480b      	ldr	r0, [pc, #44]	@ (8000ed8 <MX_GPIO_Init+0xd4>)
 8000eac:	f000 faae 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000eb0:	23b0      	movs	r3, #176	@ 0xb0
 8000eb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebc:	f107 0310 	add.w	r3, r7, #16
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4805      	ldr	r0, [pc, #20]	@ (8000ed8 <MX_GPIO_Init+0xd4>)
 8000ec4:	f000 faa2 	bl	800140c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ec8:	bf00      	nop
 8000eca:	3720      	adds	r7, #32
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	40011000 	.word	0x40011000
 8000ed8:	40010800 	.word	0x40010800

08000edc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee0:	b672      	cpsid	i
}
 8000ee2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ee4:	bf00      	nop
 8000ee6:	e7fd      	b.n	8000ee4 <Error_Handler+0x8>

08000ee8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000eee:	4b15      	ldr	r3, [pc, #84]	@ (8000f44 <HAL_MspInit+0x5c>)
 8000ef0:	699b      	ldr	r3, [r3, #24]
 8000ef2:	4a14      	ldr	r2, [pc, #80]	@ (8000f44 <HAL_MspInit+0x5c>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	6193      	str	r3, [r2, #24]
 8000efa:	4b12      	ldr	r3, [pc, #72]	@ (8000f44 <HAL_MspInit+0x5c>)
 8000efc:	699b      	ldr	r3, [r3, #24]
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	60bb      	str	r3, [r7, #8]
 8000f04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f06:	4b0f      	ldr	r3, [pc, #60]	@ (8000f44 <HAL_MspInit+0x5c>)
 8000f08:	69db      	ldr	r3, [r3, #28]
 8000f0a:	4a0e      	ldr	r2, [pc, #56]	@ (8000f44 <HAL_MspInit+0x5c>)
 8000f0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f10:	61d3      	str	r3, [r2, #28]
 8000f12:	4b0c      	ldr	r3, [pc, #48]	@ (8000f44 <HAL_MspInit+0x5c>)
 8000f14:	69db      	ldr	r3, [r3, #28]
 8000f16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f1a:	607b      	str	r3, [r7, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f48 <HAL_MspInit+0x60>)
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	4a04      	ldr	r2, [pc, #16]	@ (8000f48 <HAL_MspInit+0x60>)
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	3714      	adds	r7, #20
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr
 8000f44:	40021000 	.word	0x40021000
 8000f48:	40010000 	.word	0x40010000

08000f4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f50:	bf00      	nop
 8000f52:	e7fd      	b.n	8000f50 <NMI_Handler+0x4>

08000f54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f58:	bf00      	nop
 8000f5a:	e7fd      	b.n	8000f58 <HardFault_Handler+0x4>

08000f5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <MemManage_Handler+0x4>

08000f64 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f68:	bf00      	nop
 8000f6a:	e7fd      	b.n	8000f68 <BusFault_Handler+0x4>

08000f6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <UsageFault_Handler+0x4>

08000f74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr

08000f80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bc80      	pop	{r7}
 8000f8a:	4770      	bx	lr

08000f8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bc80      	pop	{r7}
 8000f96:	4770      	bx	lr

08000f98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f9c:	f000 f936 	bl	800120c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  return 1;
 8000fa8:	2301      	movs	r3, #1
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bc80      	pop	{r7}
 8000fb0:	4770      	bx	lr

08000fb2 <_kill>:

int _kill(int pid, int sig)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b082      	sub	sp, #8
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
 8000fba:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000fbc:	f001 ff94 	bl	8002ee8 <__errno>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2216      	movs	r2, #22
 8000fc4:	601a      	str	r2, [r3, #0]
  return -1;
 8000fc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <_exit>:

void _exit (int status)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b082      	sub	sp, #8
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000fda:	f04f 31ff 	mov.w	r1, #4294967295
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f7ff ffe7 	bl	8000fb2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000fe4:	bf00      	nop
 8000fe6:	e7fd      	b.n	8000fe4 <_exit+0x12>

08000fe8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]
 8000ff8:	e00a      	b.n	8001010 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ffa:	f3af 8000 	nop.w
 8000ffe:	4601      	mov	r1, r0
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	1c5a      	adds	r2, r3, #1
 8001004:	60ba      	str	r2, [r7, #8]
 8001006:	b2ca      	uxtb	r2, r1
 8001008:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	3301      	adds	r3, #1
 800100e:	617b      	str	r3, [r7, #20]
 8001010:	697a      	ldr	r2, [r7, #20]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	429a      	cmp	r2, r3
 8001016:	dbf0      	blt.n	8000ffa <_read+0x12>
  }

  return len;
 8001018:	687b      	ldr	r3, [r7, #4]
}
 800101a:	4618      	mov	r0, r3
 800101c:	3718      	adds	r7, #24
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b086      	sub	sp, #24
 8001026:	af00      	add	r7, sp, #0
 8001028:	60f8      	str	r0, [r7, #12]
 800102a:	60b9      	str	r1, [r7, #8]
 800102c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]
 8001032:	e009      	b.n	8001048 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	1c5a      	adds	r2, r3, #1
 8001038:	60ba      	str	r2, [r7, #8]
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	4618      	mov	r0, r3
 800103e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	3301      	adds	r3, #1
 8001046:	617b      	str	r3, [r7, #20]
 8001048:	697a      	ldr	r2, [r7, #20]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	429a      	cmp	r2, r3
 800104e:	dbf1      	blt.n	8001034 <_write+0x12>
  }
  return len;
 8001050:	687b      	ldr	r3, [r7, #4]
}
 8001052:	4618      	mov	r0, r3
 8001054:	3718      	adds	r7, #24
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <_close>:

int _close(int file)
{
 800105a:	b480      	push	{r7}
 800105c:	b083      	sub	sp, #12
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001062:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001066:	4618      	mov	r0, r3
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	bc80      	pop	{r7}
 800106e:	4770      	bx	lr

08001070 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001080:	605a      	str	r2, [r3, #4]
  return 0;
 8001082:	2300      	movs	r3, #0
}
 8001084:	4618      	mov	r0, r3
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	bc80      	pop	{r7}
 800108c:	4770      	bx	lr

0800108e <_isatty>:

int _isatty(int file)
{
 800108e:	b480      	push	{r7}
 8001090:	b083      	sub	sp, #12
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001096:	2301      	movs	r3, #1
}
 8001098:	4618      	mov	r0, r3
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	bc80      	pop	{r7}
 80010a0:	4770      	bx	lr

080010a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010a2:	b480      	push	{r7}
 80010a4:	b085      	sub	sp, #20
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	60f8      	str	r0, [r7, #12]
 80010aa:	60b9      	str	r1, [r7, #8]
 80010ac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010ae:	2300      	movs	r3, #0
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3714      	adds	r7, #20
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bc80      	pop	{r7}
 80010b8:	4770      	bx	lr
	...

080010bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010c4:	4a14      	ldr	r2, [pc, #80]	@ (8001118 <_sbrk+0x5c>)
 80010c6:	4b15      	ldr	r3, [pc, #84]	@ (800111c <_sbrk+0x60>)
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010d0:	4b13      	ldr	r3, [pc, #76]	@ (8001120 <_sbrk+0x64>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d102      	bne.n	80010de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010d8:	4b11      	ldr	r3, [pc, #68]	@ (8001120 <_sbrk+0x64>)
 80010da:	4a12      	ldr	r2, [pc, #72]	@ (8001124 <_sbrk+0x68>)
 80010dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010de:	4b10      	ldr	r3, [pc, #64]	@ (8001120 <_sbrk+0x64>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4413      	add	r3, r2
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d207      	bcs.n	80010fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010ec:	f001 fefc 	bl	8002ee8 <__errno>
 80010f0:	4603      	mov	r3, r0
 80010f2:	220c      	movs	r2, #12
 80010f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010f6:	f04f 33ff 	mov.w	r3, #4294967295
 80010fa:	e009      	b.n	8001110 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010fc:	4b08      	ldr	r3, [pc, #32]	@ (8001120 <_sbrk+0x64>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001102:	4b07      	ldr	r3, [pc, #28]	@ (8001120 <_sbrk+0x64>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4413      	add	r3, r2
 800110a:	4a05      	ldr	r2, [pc, #20]	@ (8001120 <_sbrk+0x64>)
 800110c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800110e:	68fb      	ldr	r3, [r7, #12]
}
 8001110:	4618      	mov	r0, r3
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20002800 	.word	0x20002800
 800111c:	00000400 	.word	0x00000400
 8001120:	200001f0 	.word	0x200001f0
 8001124:	20000348 	.word	0x20000348

08001128 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	bc80      	pop	{r7}
 8001132:	4770      	bx	lr

08001134 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001134:	f7ff fff8 	bl	8001128 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001138:	480b      	ldr	r0, [pc, #44]	@ (8001168 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800113a:	490c      	ldr	r1, [pc, #48]	@ (800116c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800113c:	4a0c      	ldr	r2, [pc, #48]	@ (8001170 <LoopFillZerobss+0x16>)
  movs r3, #0
 800113e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001140:	e002      	b.n	8001148 <LoopCopyDataInit>

08001142 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001142:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001144:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001146:	3304      	adds	r3, #4

08001148 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001148:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800114a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800114c:	d3f9      	bcc.n	8001142 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800114e:	4a09      	ldr	r2, [pc, #36]	@ (8001174 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001150:	4c09      	ldr	r4, [pc, #36]	@ (8001178 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001152:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001154:	e001      	b.n	800115a <LoopFillZerobss>

08001156 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001156:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001158:	3204      	adds	r2, #4

0800115a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800115a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800115c:	d3fb      	bcc.n	8001156 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800115e:	f001 fec9 	bl	8002ef4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001162:	f7ff fdd5 	bl	8000d10 <main>
  bx lr
 8001166:	4770      	bx	lr
  ldr r0, =_sdata
 8001168:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800116c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001170:	08006a50 	.word	0x08006a50
  ldr r2, =_sbss
 8001174:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001178:	20000344 	.word	0x20000344

0800117c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800117c:	e7fe      	b.n	800117c <ADC1_2_IRQHandler>
	...

08001180 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001184:	4b08      	ldr	r3, [pc, #32]	@ (80011a8 <HAL_Init+0x28>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a07      	ldr	r2, [pc, #28]	@ (80011a8 <HAL_Init+0x28>)
 800118a:	f043 0310 	orr.w	r3, r3, #16
 800118e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001190:	2003      	movs	r0, #3
 8001192:	f000 f907 	bl	80013a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001196:	200f      	movs	r0, #15
 8001198:	f000 f808 	bl	80011ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800119c:	f7ff fea4 	bl	8000ee8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40022000 	.word	0x40022000

080011ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011b4:	4b12      	ldr	r3, [pc, #72]	@ (8001200 <HAL_InitTick+0x54>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4b12      	ldr	r3, [pc, #72]	@ (8001204 <HAL_InitTick+0x58>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	4619      	mov	r1, r3
 80011be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ca:	4618      	mov	r0, r3
 80011cc:	f000 f911 	bl	80013f2 <HAL_SYSTICK_Config>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e00e      	b.n	80011f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2b0f      	cmp	r3, #15
 80011de:	d80a      	bhi.n	80011f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011e0:	2200      	movs	r2, #0
 80011e2:	6879      	ldr	r1, [r7, #4]
 80011e4:	f04f 30ff 	mov.w	r0, #4294967295
 80011e8:	f000 f8e7 	bl	80013ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011ec:	4a06      	ldr	r2, [pc, #24]	@ (8001208 <HAL_InitTick+0x5c>)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011f2:	2300      	movs	r3, #0
 80011f4:	e000      	b.n	80011f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000000 	.word	0x20000000
 8001204:	20000008 	.word	0x20000008
 8001208:	20000004 	.word	0x20000004

0800120c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001210:	4b05      	ldr	r3, [pc, #20]	@ (8001228 <HAL_IncTick+0x1c>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	461a      	mov	r2, r3
 8001216:	4b05      	ldr	r3, [pc, #20]	@ (800122c <HAL_IncTick+0x20>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4413      	add	r3, r2
 800121c:	4a03      	ldr	r2, [pc, #12]	@ (800122c <HAL_IncTick+0x20>)
 800121e:	6013      	str	r3, [r2, #0]
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr
 8001228:	20000008 	.word	0x20000008
 800122c:	200001f4 	.word	0x200001f4

08001230 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  return uwTick;
 8001234:	4b02      	ldr	r3, [pc, #8]	@ (8001240 <HAL_GetTick+0x10>)
 8001236:	681b      	ldr	r3, [r3, #0]
}
 8001238:	4618      	mov	r0, r3
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr
 8001240:	200001f4 	.word	0x200001f4

08001244 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f003 0307 	and.w	r3, r3, #7
 8001252:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001254:	4b0c      	ldr	r3, [pc, #48]	@ (8001288 <__NVIC_SetPriorityGrouping+0x44>)
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800125a:	68ba      	ldr	r2, [r7, #8]
 800125c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001260:	4013      	ands	r3, r2
 8001262:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800126c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001270:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001274:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001276:	4a04      	ldr	r2, [pc, #16]	@ (8001288 <__NVIC_SetPriorityGrouping+0x44>)
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	60d3      	str	r3, [r2, #12]
}
 800127c:	bf00      	nop
 800127e:	3714      	adds	r7, #20
 8001280:	46bd      	mov	sp, r7
 8001282:	bc80      	pop	{r7}
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001290:	4b04      	ldr	r3, [pc, #16]	@ (80012a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	0a1b      	lsrs	r3, r3, #8
 8001296:	f003 0307 	and.w	r3, r3, #7
}
 800129a:	4618      	mov	r0, r3
 800129c:	46bd      	mov	sp, r7
 800129e:	bc80      	pop	{r7}
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	e000ed00 	.word	0xe000ed00

080012a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	6039      	str	r1, [r7, #0]
 80012b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	db0a      	blt.n	80012d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	b2da      	uxtb	r2, r3
 80012c0:	490c      	ldr	r1, [pc, #48]	@ (80012f4 <__NVIC_SetPriority+0x4c>)
 80012c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c6:	0112      	lsls	r2, r2, #4
 80012c8:	b2d2      	uxtb	r2, r2
 80012ca:	440b      	add	r3, r1
 80012cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012d0:	e00a      	b.n	80012e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	4908      	ldr	r1, [pc, #32]	@ (80012f8 <__NVIC_SetPriority+0x50>)
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	f003 030f 	and.w	r3, r3, #15
 80012de:	3b04      	subs	r3, #4
 80012e0:	0112      	lsls	r2, r2, #4
 80012e2:	b2d2      	uxtb	r2, r2
 80012e4:	440b      	add	r3, r1
 80012e6:	761a      	strb	r2, [r3, #24]
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bc80      	pop	{r7}
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	e000e100 	.word	0xe000e100
 80012f8:	e000ed00 	.word	0xe000ed00

080012fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b089      	sub	sp, #36	@ 0x24
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	f1c3 0307 	rsb	r3, r3, #7
 8001316:	2b04      	cmp	r3, #4
 8001318:	bf28      	it	cs
 800131a:	2304      	movcs	r3, #4
 800131c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	3304      	adds	r3, #4
 8001322:	2b06      	cmp	r3, #6
 8001324:	d902      	bls.n	800132c <NVIC_EncodePriority+0x30>
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	3b03      	subs	r3, #3
 800132a:	e000      	b.n	800132e <NVIC_EncodePriority+0x32>
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001330:	f04f 32ff 	mov.w	r2, #4294967295
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	43da      	mvns	r2, r3
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	401a      	ands	r2, r3
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001344:	f04f 31ff 	mov.w	r1, #4294967295
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	fa01 f303 	lsl.w	r3, r1, r3
 800134e:	43d9      	mvns	r1, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001354:	4313      	orrs	r3, r2
         );
}
 8001356:	4618      	mov	r0, r3
 8001358:	3724      	adds	r7, #36	@ 0x24
 800135a:	46bd      	mov	sp, r7
 800135c:	bc80      	pop	{r7}
 800135e:	4770      	bx	lr

08001360 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3b01      	subs	r3, #1
 800136c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001370:	d301      	bcc.n	8001376 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001372:	2301      	movs	r3, #1
 8001374:	e00f      	b.n	8001396 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001376:	4a0a      	ldr	r2, [pc, #40]	@ (80013a0 <SysTick_Config+0x40>)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3b01      	subs	r3, #1
 800137c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800137e:	210f      	movs	r1, #15
 8001380:	f04f 30ff 	mov.w	r0, #4294967295
 8001384:	f7ff ff90 	bl	80012a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001388:	4b05      	ldr	r3, [pc, #20]	@ (80013a0 <SysTick_Config+0x40>)
 800138a:	2200      	movs	r2, #0
 800138c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800138e:	4b04      	ldr	r3, [pc, #16]	@ (80013a0 <SysTick_Config+0x40>)
 8001390:	2207      	movs	r2, #7
 8001392:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	e000e010 	.word	0xe000e010

080013a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f7ff ff49 	bl	8001244 <__NVIC_SetPriorityGrouping>
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b086      	sub	sp, #24
 80013be:	af00      	add	r7, sp, #0
 80013c0:	4603      	mov	r3, r0
 80013c2:	60b9      	str	r1, [r7, #8]
 80013c4:	607a      	str	r2, [r7, #4]
 80013c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013cc:	f7ff ff5e 	bl	800128c <__NVIC_GetPriorityGrouping>
 80013d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	68b9      	ldr	r1, [r7, #8]
 80013d6:	6978      	ldr	r0, [r7, #20]
 80013d8:	f7ff ff90 	bl	80012fc <NVIC_EncodePriority>
 80013dc:	4602      	mov	r2, r0
 80013de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013e2:	4611      	mov	r1, r2
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff ff5f 	bl	80012a8 <__NVIC_SetPriority>
}
 80013ea:	bf00      	nop
 80013ec:	3718      	adds	r7, #24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b082      	sub	sp, #8
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f7ff ffb0 	bl	8001360 <SysTick_Config>
 8001400:	4603      	mov	r3, r0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
	...

0800140c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800140c:	b480      	push	{r7}
 800140e:	b08b      	sub	sp, #44	@ 0x2c
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001416:	2300      	movs	r3, #0
 8001418:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800141a:	2300      	movs	r3, #0
 800141c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800141e:	e161      	b.n	80016e4 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001420:	2201      	movs	r2, #1
 8001422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	69fa      	ldr	r2, [r7, #28]
 8001430:	4013      	ands	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	429a      	cmp	r2, r3
 800143a:	f040 8150 	bne.w	80016de <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	4a97      	ldr	r2, [pc, #604]	@ (80016a0 <HAL_GPIO_Init+0x294>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d05e      	beq.n	8001506 <HAL_GPIO_Init+0xfa>
 8001448:	4a95      	ldr	r2, [pc, #596]	@ (80016a0 <HAL_GPIO_Init+0x294>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d875      	bhi.n	800153a <HAL_GPIO_Init+0x12e>
 800144e:	4a95      	ldr	r2, [pc, #596]	@ (80016a4 <HAL_GPIO_Init+0x298>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d058      	beq.n	8001506 <HAL_GPIO_Init+0xfa>
 8001454:	4a93      	ldr	r2, [pc, #588]	@ (80016a4 <HAL_GPIO_Init+0x298>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d86f      	bhi.n	800153a <HAL_GPIO_Init+0x12e>
 800145a:	4a93      	ldr	r2, [pc, #588]	@ (80016a8 <HAL_GPIO_Init+0x29c>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d052      	beq.n	8001506 <HAL_GPIO_Init+0xfa>
 8001460:	4a91      	ldr	r2, [pc, #580]	@ (80016a8 <HAL_GPIO_Init+0x29c>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d869      	bhi.n	800153a <HAL_GPIO_Init+0x12e>
 8001466:	4a91      	ldr	r2, [pc, #580]	@ (80016ac <HAL_GPIO_Init+0x2a0>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d04c      	beq.n	8001506 <HAL_GPIO_Init+0xfa>
 800146c:	4a8f      	ldr	r2, [pc, #572]	@ (80016ac <HAL_GPIO_Init+0x2a0>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d863      	bhi.n	800153a <HAL_GPIO_Init+0x12e>
 8001472:	4a8f      	ldr	r2, [pc, #572]	@ (80016b0 <HAL_GPIO_Init+0x2a4>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d046      	beq.n	8001506 <HAL_GPIO_Init+0xfa>
 8001478:	4a8d      	ldr	r2, [pc, #564]	@ (80016b0 <HAL_GPIO_Init+0x2a4>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d85d      	bhi.n	800153a <HAL_GPIO_Init+0x12e>
 800147e:	2b12      	cmp	r3, #18
 8001480:	d82a      	bhi.n	80014d8 <HAL_GPIO_Init+0xcc>
 8001482:	2b12      	cmp	r3, #18
 8001484:	d859      	bhi.n	800153a <HAL_GPIO_Init+0x12e>
 8001486:	a201      	add	r2, pc, #4	@ (adr r2, 800148c <HAL_GPIO_Init+0x80>)
 8001488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800148c:	08001507 	.word	0x08001507
 8001490:	080014e1 	.word	0x080014e1
 8001494:	080014f3 	.word	0x080014f3
 8001498:	08001535 	.word	0x08001535
 800149c:	0800153b 	.word	0x0800153b
 80014a0:	0800153b 	.word	0x0800153b
 80014a4:	0800153b 	.word	0x0800153b
 80014a8:	0800153b 	.word	0x0800153b
 80014ac:	0800153b 	.word	0x0800153b
 80014b0:	0800153b 	.word	0x0800153b
 80014b4:	0800153b 	.word	0x0800153b
 80014b8:	0800153b 	.word	0x0800153b
 80014bc:	0800153b 	.word	0x0800153b
 80014c0:	0800153b 	.word	0x0800153b
 80014c4:	0800153b 	.word	0x0800153b
 80014c8:	0800153b 	.word	0x0800153b
 80014cc:	0800153b 	.word	0x0800153b
 80014d0:	080014e9 	.word	0x080014e9
 80014d4:	080014fd 	.word	0x080014fd
 80014d8:	4a76      	ldr	r2, [pc, #472]	@ (80016b4 <HAL_GPIO_Init+0x2a8>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d013      	beq.n	8001506 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014de:	e02c      	b.n	800153a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	623b      	str	r3, [r7, #32]
          break;
 80014e6:	e029      	b.n	800153c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	3304      	adds	r3, #4
 80014ee:	623b      	str	r3, [r7, #32]
          break;
 80014f0:	e024      	b.n	800153c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	3308      	adds	r3, #8
 80014f8:	623b      	str	r3, [r7, #32]
          break;
 80014fa:	e01f      	b.n	800153c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	330c      	adds	r3, #12
 8001502:	623b      	str	r3, [r7, #32]
          break;
 8001504:	e01a      	b.n	800153c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d102      	bne.n	8001514 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800150e:	2304      	movs	r3, #4
 8001510:	623b      	str	r3, [r7, #32]
          break;
 8001512:	e013      	b.n	800153c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d105      	bne.n	8001528 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800151c:	2308      	movs	r3, #8
 800151e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	69fa      	ldr	r2, [r7, #28]
 8001524:	611a      	str	r2, [r3, #16]
          break;
 8001526:	e009      	b.n	800153c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001528:	2308      	movs	r3, #8
 800152a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	69fa      	ldr	r2, [r7, #28]
 8001530:	615a      	str	r2, [r3, #20]
          break;
 8001532:	e003      	b.n	800153c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001534:	2300      	movs	r3, #0
 8001536:	623b      	str	r3, [r7, #32]
          break;
 8001538:	e000      	b.n	800153c <HAL_GPIO_Init+0x130>
          break;
 800153a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	2bff      	cmp	r3, #255	@ 0xff
 8001540:	d801      	bhi.n	8001546 <HAL_GPIO_Init+0x13a>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	e001      	b.n	800154a <HAL_GPIO_Init+0x13e>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	3304      	adds	r3, #4
 800154a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	2bff      	cmp	r3, #255	@ 0xff
 8001550:	d802      	bhi.n	8001558 <HAL_GPIO_Init+0x14c>
 8001552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	e002      	b.n	800155e <HAL_GPIO_Init+0x152>
 8001558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800155a:	3b08      	subs	r3, #8
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	210f      	movs	r1, #15
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	fa01 f303 	lsl.w	r3, r1, r3
 800156c:	43db      	mvns	r3, r3
 800156e:	401a      	ands	r2, r3
 8001570:	6a39      	ldr	r1, [r7, #32]
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	fa01 f303 	lsl.w	r3, r1, r3
 8001578:	431a      	orrs	r2, r3
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001586:	2b00      	cmp	r3, #0
 8001588:	f000 80a9 	beq.w	80016de <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800158c:	4b4a      	ldr	r3, [pc, #296]	@ (80016b8 <HAL_GPIO_Init+0x2ac>)
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	4a49      	ldr	r2, [pc, #292]	@ (80016b8 <HAL_GPIO_Init+0x2ac>)
 8001592:	f043 0301 	orr.w	r3, r3, #1
 8001596:	6193      	str	r3, [r2, #24]
 8001598:	4b47      	ldr	r3, [pc, #284]	@ (80016b8 <HAL_GPIO_Init+0x2ac>)
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	f003 0301 	and.w	r3, r3, #1
 80015a0:	60bb      	str	r3, [r7, #8]
 80015a2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015a4:	4a45      	ldr	r2, [pc, #276]	@ (80016bc <HAL_GPIO_Init+0x2b0>)
 80015a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a8:	089b      	lsrs	r3, r3, #2
 80015aa:	3302      	adds	r3, #2
 80015ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015b0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b4:	f003 0303 	and.w	r3, r3, #3
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	220f      	movs	r2, #15
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	43db      	mvns	r3, r3
 80015c2:	68fa      	ldr	r2, [r7, #12]
 80015c4:	4013      	ands	r3, r2
 80015c6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	4a3d      	ldr	r2, [pc, #244]	@ (80016c0 <HAL_GPIO_Init+0x2b4>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d00d      	beq.n	80015ec <HAL_GPIO_Init+0x1e0>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4a3c      	ldr	r2, [pc, #240]	@ (80016c4 <HAL_GPIO_Init+0x2b8>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d007      	beq.n	80015e8 <HAL_GPIO_Init+0x1dc>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	4a3b      	ldr	r2, [pc, #236]	@ (80016c8 <HAL_GPIO_Init+0x2bc>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d101      	bne.n	80015e4 <HAL_GPIO_Init+0x1d8>
 80015e0:	2302      	movs	r3, #2
 80015e2:	e004      	b.n	80015ee <HAL_GPIO_Init+0x1e2>
 80015e4:	2303      	movs	r3, #3
 80015e6:	e002      	b.n	80015ee <HAL_GPIO_Init+0x1e2>
 80015e8:	2301      	movs	r3, #1
 80015ea:	e000      	b.n	80015ee <HAL_GPIO_Init+0x1e2>
 80015ec:	2300      	movs	r3, #0
 80015ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015f0:	f002 0203 	and.w	r2, r2, #3
 80015f4:	0092      	lsls	r2, r2, #2
 80015f6:	4093      	lsls	r3, r2
 80015f8:	68fa      	ldr	r2, [r7, #12]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015fe:	492f      	ldr	r1, [pc, #188]	@ (80016bc <HAL_GPIO_Init+0x2b0>)
 8001600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001602:	089b      	lsrs	r3, r3, #2
 8001604:	3302      	adds	r3, #2
 8001606:	68fa      	ldr	r2, [r7, #12]
 8001608:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d006      	beq.n	8001626 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001618:	4b2c      	ldr	r3, [pc, #176]	@ (80016cc <HAL_GPIO_Init+0x2c0>)
 800161a:	689a      	ldr	r2, [r3, #8]
 800161c:	492b      	ldr	r1, [pc, #172]	@ (80016cc <HAL_GPIO_Init+0x2c0>)
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	4313      	orrs	r3, r2
 8001622:	608b      	str	r3, [r1, #8]
 8001624:	e006      	b.n	8001634 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001626:	4b29      	ldr	r3, [pc, #164]	@ (80016cc <HAL_GPIO_Init+0x2c0>)
 8001628:	689a      	ldr	r2, [r3, #8]
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	43db      	mvns	r3, r3
 800162e:	4927      	ldr	r1, [pc, #156]	@ (80016cc <HAL_GPIO_Init+0x2c0>)
 8001630:	4013      	ands	r3, r2
 8001632:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d006      	beq.n	800164e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001640:	4b22      	ldr	r3, [pc, #136]	@ (80016cc <HAL_GPIO_Init+0x2c0>)
 8001642:	68da      	ldr	r2, [r3, #12]
 8001644:	4921      	ldr	r1, [pc, #132]	@ (80016cc <HAL_GPIO_Init+0x2c0>)
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	4313      	orrs	r3, r2
 800164a:	60cb      	str	r3, [r1, #12]
 800164c:	e006      	b.n	800165c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800164e:	4b1f      	ldr	r3, [pc, #124]	@ (80016cc <HAL_GPIO_Init+0x2c0>)
 8001650:	68da      	ldr	r2, [r3, #12]
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	43db      	mvns	r3, r3
 8001656:	491d      	ldr	r1, [pc, #116]	@ (80016cc <HAL_GPIO_Init+0x2c0>)
 8001658:	4013      	ands	r3, r2
 800165a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d006      	beq.n	8001676 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001668:	4b18      	ldr	r3, [pc, #96]	@ (80016cc <HAL_GPIO_Init+0x2c0>)
 800166a:	685a      	ldr	r2, [r3, #4]
 800166c:	4917      	ldr	r1, [pc, #92]	@ (80016cc <HAL_GPIO_Init+0x2c0>)
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	4313      	orrs	r3, r2
 8001672:	604b      	str	r3, [r1, #4]
 8001674:	e006      	b.n	8001684 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001676:	4b15      	ldr	r3, [pc, #84]	@ (80016cc <HAL_GPIO_Init+0x2c0>)
 8001678:	685a      	ldr	r2, [r3, #4]
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	43db      	mvns	r3, r3
 800167e:	4913      	ldr	r1, [pc, #76]	@ (80016cc <HAL_GPIO_Init+0x2c0>)
 8001680:	4013      	ands	r3, r2
 8001682:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d01f      	beq.n	80016d0 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001690:	4b0e      	ldr	r3, [pc, #56]	@ (80016cc <HAL_GPIO_Init+0x2c0>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	490d      	ldr	r1, [pc, #52]	@ (80016cc <HAL_GPIO_Init+0x2c0>)
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	4313      	orrs	r3, r2
 800169a:	600b      	str	r3, [r1, #0]
 800169c:	e01f      	b.n	80016de <HAL_GPIO_Init+0x2d2>
 800169e:	bf00      	nop
 80016a0:	10320000 	.word	0x10320000
 80016a4:	10310000 	.word	0x10310000
 80016a8:	10220000 	.word	0x10220000
 80016ac:	10210000 	.word	0x10210000
 80016b0:	10120000 	.word	0x10120000
 80016b4:	10110000 	.word	0x10110000
 80016b8:	40021000 	.word	0x40021000
 80016bc:	40010000 	.word	0x40010000
 80016c0:	40010800 	.word	0x40010800
 80016c4:	40010c00 	.word	0x40010c00
 80016c8:	40011000 	.word	0x40011000
 80016cc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001700 <HAL_GPIO_Init+0x2f4>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	43db      	mvns	r3, r3
 80016d8:	4909      	ldr	r1, [pc, #36]	@ (8001700 <HAL_GPIO_Init+0x2f4>)
 80016da:	4013      	ands	r3, r2
 80016dc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80016de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e0:	3301      	adds	r3, #1
 80016e2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ea:	fa22 f303 	lsr.w	r3, r2, r3
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	f47f ae96 	bne.w	8001420 <HAL_GPIO_Init+0x14>
  }
}
 80016f4:	bf00      	nop
 80016f6:	bf00      	nop
 80016f8:	372c      	adds	r7, #44	@ 0x2c
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bc80      	pop	{r7}
 80016fe:	4770      	bx	lr
 8001700:	40010400 	.word	0x40010400

08001704 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	460b      	mov	r3, r1
 800170e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689a      	ldr	r2, [r3, #8]
 8001714:	887b      	ldrh	r3, [r7, #2]
 8001716:	4013      	ands	r3, r2
 8001718:	2b00      	cmp	r3, #0
 800171a:	d002      	beq.n	8001722 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800171c:	2301      	movs	r3, #1
 800171e:	73fb      	strb	r3, [r7, #15]
 8001720:	e001      	b.n	8001726 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001722:	2300      	movs	r3, #0
 8001724:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001726:	7bfb      	ldrb	r3, [r7, #15]
}
 8001728:	4618      	mov	r0, r3
 800172a:	3714      	adds	r7, #20
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr

08001732 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001732:	b480      	push	{r7}
 8001734:	b083      	sub	sp, #12
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
 800173a:	460b      	mov	r3, r1
 800173c:	807b      	strh	r3, [r7, #2]
 800173e:	4613      	mov	r3, r2
 8001740:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001742:	787b      	ldrb	r3, [r7, #1]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d003      	beq.n	8001750 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001748:	887a      	ldrh	r2, [r7, #2]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800174e:	e003      	b.n	8001758 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001750:	887b      	ldrh	r3, [r7, #2]
 8001752:	041a      	lsls	r2, r3, #16
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	611a      	str	r2, [r3, #16]
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr
	...

08001764 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d101      	bne.n	8001776 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e272      	b.n	8001c5c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	2b00      	cmp	r3, #0
 8001780:	f000 8087 	beq.w	8001892 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001784:	4b92      	ldr	r3, [pc, #584]	@ (80019d0 <HAL_RCC_OscConfig+0x26c>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f003 030c 	and.w	r3, r3, #12
 800178c:	2b04      	cmp	r3, #4
 800178e:	d00c      	beq.n	80017aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001790:	4b8f      	ldr	r3, [pc, #572]	@ (80019d0 <HAL_RCC_OscConfig+0x26c>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f003 030c 	and.w	r3, r3, #12
 8001798:	2b08      	cmp	r3, #8
 800179a:	d112      	bne.n	80017c2 <HAL_RCC_OscConfig+0x5e>
 800179c:	4b8c      	ldr	r3, [pc, #560]	@ (80019d0 <HAL_RCC_OscConfig+0x26c>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017a8:	d10b      	bne.n	80017c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017aa:	4b89      	ldr	r3, [pc, #548]	@ (80019d0 <HAL_RCC_OscConfig+0x26c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d06c      	beq.n	8001890 <HAL_RCC_OscConfig+0x12c>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d168      	bne.n	8001890 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e24c      	b.n	8001c5c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017ca:	d106      	bne.n	80017da <HAL_RCC_OscConfig+0x76>
 80017cc:	4b80      	ldr	r3, [pc, #512]	@ (80019d0 <HAL_RCC_OscConfig+0x26c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a7f      	ldr	r2, [pc, #508]	@ (80019d0 <HAL_RCC_OscConfig+0x26c>)
 80017d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017d6:	6013      	str	r3, [r2, #0]
 80017d8:	e02e      	b.n	8001838 <HAL_RCC_OscConfig+0xd4>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d10c      	bne.n	80017fc <HAL_RCC_OscConfig+0x98>
 80017e2:	4b7b      	ldr	r3, [pc, #492]	@ (80019d0 <HAL_RCC_OscConfig+0x26c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a7a      	ldr	r2, [pc, #488]	@ (80019d0 <HAL_RCC_OscConfig+0x26c>)
 80017e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017ec:	6013      	str	r3, [r2, #0]
 80017ee:	4b78      	ldr	r3, [pc, #480]	@ (80019d0 <HAL_RCC_OscConfig+0x26c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a77      	ldr	r2, [pc, #476]	@ (80019d0 <HAL_RCC_OscConfig+0x26c>)
 80017f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017f8:	6013      	str	r3, [r2, #0]
 80017fa:	e01d      	b.n	8001838 <HAL_RCC_OscConfig+0xd4>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001804:	d10c      	bne.n	8001820 <HAL_RCC_OscConfig+0xbc>
 8001806:	4b72      	ldr	r3, [pc, #456]	@ (80019d0 <HAL_RCC_OscConfig+0x26c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a71      	ldr	r2, [pc, #452]	@ (80019d0 <HAL_RCC_OscConfig+0x26c>)
 800180c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001810:	6013      	str	r3, [r2, #0]
 8001812:	4b6f      	ldr	r3, [pc, #444]	@ (80019d0 <HAL_RCC_OscConfig+0x26c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a6e      	ldr	r2, [pc, #440]	@ (80019d0 <HAL_RCC_OscConfig+0x26c>)
 8001818:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800181c:	6013      	str	r3, [r2, #0]
 800181e:	e00b      	b.n	8001838 <HAL_RCC_OscConfig+0xd4>
 8001820:	4b6b      	ldr	r3, [pc, #428]	@ (80019d0 <HAL_RCC_OscConfig+0x26c>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a6a      	ldr	r2, [pc, #424]	@ (80019d0 <HAL_RCC_OscConfig+0x26c>)
 8001826:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800182a:	6013      	str	r3, [r2, #0]
 800182c:	4b68      	ldr	r3, [pc, #416]	@ (80019d0 <HAL_RCC_OscConfig+0x26c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a67      	ldr	r2, [pc, #412]	@ (80019d0 <HAL_RCC_OscConfig+0x26c>)
 8001832:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001836:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d013      	beq.n	8001868 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001840:	f7ff fcf6 	bl	8001230 <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001848:	f7ff fcf2 	bl	8001230 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b64      	cmp	r3, #100	@ 0x64
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e200      	b.n	8001c5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800185a:	4b5d      	ldr	r3, [pc, #372]	@ (80019d0 <HAL_RCC_OscConfig+0x26c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d0f0      	beq.n	8001848 <HAL_RCC_OscConfig+0xe4>
 8001866:	e014      	b.n	8001892 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001868:	f7ff fce2 	bl	8001230 <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001870:	f7ff fcde 	bl	8001230 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b64      	cmp	r3, #100	@ 0x64
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e1ec      	b.n	8001c5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001882:	4b53      	ldr	r3, [pc, #332]	@ (80019d0 <HAL_RCC_OscConfig+0x26c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d1f0      	bne.n	8001870 <HAL_RCC_OscConfig+0x10c>
 800188e:	e000      	b.n	8001892 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001890:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d063      	beq.n	8001966 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800189e:	4b4c      	ldr	r3, [pc, #304]	@ (80019d0 <HAL_RCC_OscConfig+0x26c>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f003 030c 	and.w	r3, r3, #12
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d00b      	beq.n	80018c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018aa:	4b49      	ldr	r3, [pc, #292]	@ (80019d0 <HAL_RCC_OscConfig+0x26c>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f003 030c 	and.w	r3, r3, #12
 80018b2:	2b08      	cmp	r3, #8
 80018b4:	d11c      	bne.n	80018f0 <HAL_RCC_OscConfig+0x18c>
 80018b6:	4b46      	ldr	r3, [pc, #280]	@ (80019d0 <HAL_RCC_OscConfig+0x26c>)
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d116      	bne.n	80018f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018c2:	4b43      	ldr	r3, [pc, #268]	@ (80019d0 <HAL_RCC_OscConfig+0x26c>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d005      	beq.n	80018da <HAL_RCC_OscConfig+0x176>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	691b      	ldr	r3, [r3, #16]
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d001      	beq.n	80018da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e1c0      	b.n	8001c5c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018da:	4b3d      	ldr	r3, [pc, #244]	@ (80019d0 <HAL_RCC_OscConfig+0x26c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	695b      	ldr	r3, [r3, #20]
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	4939      	ldr	r1, [pc, #228]	@ (80019d0 <HAL_RCC_OscConfig+0x26c>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ee:	e03a      	b.n	8001966 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	691b      	ldr	r3, [r3, #16]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d020      	beq.n	800193a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018f8:	4b36      	ldr	r3, [pc, #216]	@ (80019d4 <HAL_RCC_OscConfig+0x270>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fe:	f7ff fc97 	bl	8001230 <HAL_GetTick>
 8001902:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001904:	e008      	b.n	8001918 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001906:	f7ff fc93 	bl	8001230 <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b02      	cmp	r3, #2
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e1a1      	b.n	8001c5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001918:	4b2d      	ldr	r3, [pc, #180]	@ (80019d0 <HAL_RCC_OscConfig+0x26c>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d0f0      	beq.n	8001906 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001924:	4b2a      	ldr	r3, [pc, #168]	@ (80019d0 <HAL_RCC_OscConfig+0x26c>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	695b      	ldr	r3, [r3, #20]
 8001930:	00db      	lsls	r3, r3, #3
 8001932:	4927      	ldr	r1, [pc, #156]	@ (80019d0 <HAL_RCC_OscConfig+0x26c>)
 8001934:	4313      	orrs	r3, r2
 8001936:	600b      	str	r3, [r1, #0]
 8001938:	e015      	b.n	8001966 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800193a:	4b26      	ldr	r3, [pc, #152]	@ (80019d4 <HAL_RCC_OscConfig+0x270>)
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001940:	f7ff fc76 	bl	8001230 <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001948:	f7ff fc72 	bl	8001230 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e180      	b.n	8001c5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800195a:	4b1d      	ldr	r3, [pc, #116]	@ (80019d0 <HAL_RCC_OscConfig+0x26c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1f0      	bne.n	8001948 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0308 	and.w	r3, r3, #8
 800196e:	2b00      	cmp	r3, #0
 8001970:	d03a      	beq.n	80019e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d019      	beq.n	80019ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800197a:	4b17      	ldr	r3, [pc, #92]	@ (80019d8 <HAL_RCC_OscConfig+0x274>)
 800197c:	2201      	movs	r2, #1
 800197e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001980:	f7ff fc56 	bl	8001230 <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001988:	f7ff fc52 	bl	8001230 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e160      	b.n	8001c5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800199a:	4b0d      	ldr	r3, [pc, #52]	@ (80019d0 <HAL_RCC_OscConfig+0x26c>)
 800199c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d0f0      	beq.n	8001988 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019a6:	2001      	movs	r0, #1
 80019a8:	f000 fa9c 	bl	8001ee4 <RCC_Delay>
 80019ac:	e01c      	b.n	80019e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019ae:	4b0a      	ldr	r3, [pc, #40]	@ (80019d8 <HAL_RCC_OscConfig+0x274>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019b4:	f7ff fc3c 	bl	8001230 <HAL_GetTick>
 80019b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019ba:	e00f      	b.n	80019dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019bc:	f7ff fc38 	bl	8001230 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d908      	bls.n	80019dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e146      	b.n	8001c5c <HAL_RCC_OscConfig+0x4f8>
 80019ce:	bf00      	nop
 80019d0:	40021000 	.word	0x40021000
 80019d4:	42420000 	.word	0x42420000
 80019d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019dc:	4b92      	ldr	r3, [pc, #584]	@ (8001c28 <HAL_RCC_OscConfig+0x4c4>)
 80019de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e0:	f003 0302 	and.w	r3, r3, #2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d1e9      	bne.n	80019bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0304 	and.w	r3, r3, #4
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	f000 80a6 	beq.w	8001b42 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019f6:	2300      	movs	r3, #0
 80019f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019fa:	4b8b      	ldr	r3, [pc, #556]	@ (8001c28 <HAL_RCC_OscConfig+0x4c4>)
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d10d      	bne.n	8001a22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a06:	4b88      	ldr	r3, [pc, #544]	@ (8001c28 <HAL_RCC_OscConfig+0x4c4>)
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	4a87      	ldr	r2, [pc, #540]	@ (8001c28 <HAL_RCC_OscConfig+0x4c4>)
 8001a0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a10:	61d3      	str	r3, [r2, #28]
 8001a12:	4b85      	ldr	r3, [pc, #532]	@ (8001c28 <HAL_RCC_OscConfig+0x4c4>)
 8001a14:	69db      	ldr	r3, [r3, #28]
 8001a16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a1a:	60bb      	str	r3, [r7, #8]
 8001a1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a22:	4b82      	ldr	r3, [pc, #520]	@ (8001c2c <HAL_RCC_OscConfig+0x4c8>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d118      	bne.n	8001a60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a2e:	4b7f      	ldr	r3, [pc, #508]	@ (8001c2c <HAL_RCC_OscConfig+0x4c8>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a7e      	ldr	r2, [pc, #504]	@ (8001c2c <HAL_RCC_OscConfig+0x4c8>)
 8001a34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a3a:	f7ff fbf9 	bl	8001230 <HAL_GetTick>
 8001a3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a40:	e008      	b.n	8001a54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a42:	f7ff fbf5 	bl	8001230 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b64      	cmp	r3, #100	@ 0x64
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e103      	b.n	8001c5c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a54:	4b75      	ldr	r3, [pc, #468]	@ (8001c2c <HAL_RCC_OscConfig+0x4c8>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d0f0      	beq.n	8001a42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d106      	bne.n	8001a76 <HAL_RCC_OscConfig+0x312>
 8001a68:	4b6f      	ldr	r3, [pc, #444]	@ (8001c28 <HAL_RCC_OscConfig+0x4c4>)
 8001a6a:	6a1b      	ldr	r3, [r3, #32]
 8001a6c:	4a6e      	ldr	r2, [pc, #440]	@ (8001c28 <HAL_RCC_OscConfig+0x4c4>)
 8001a6e:	f043 0301 	orr.w	r3, r3, #1
 8001a72:	6213      	str	r3, [r2, #32]
 8001a74:	e02d      	b.n	8001ad2 <HAL_RCC_OscConfig+0x36e>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d10c      	bne.n	8001a98 <HAL_RCC_OscConfig+0x334>
 8001a7e:	4b6a      	ldr	r3, [pc, #424]	@ (8001c28 <HAL_RCC_OscConfig+0x4c4>)
 8001a80:	6a1b      	ldr	r3, [r3, #32]
 8001a82:	4a69      	ldr	r2, [pc, #420]	@ (8001c28 <HAL_RCC_OscConfig+0x4c4>)
 8001a84:	f023 0301 	bic.w	r3, r3, #1
 8001a88:	6213      	str	r3, [r2, #32]
 8001a8a:	4b67      	ldr	r3, [pc, #412]	@ (8001c28 <HAL_RCC_OscConfig+0x4c4>)
 8001a8c:	6a1b      	ldr	r3, [r3, #32]
 8001a8e:	4a66      	ldr	r2, [pc, #408]	@ (8001c28 <HAL_RCC_OscConfig+0x4c4>)
 8001a90:	f023 0304 	bic.w	r3, r3, #4
 8001a94:	6213      	str	r3, [r2, #32]
 8001a96:	e01c      	b.n	8001ad2 <HAL_RCC_OscConfig+0x36e>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	2b05      	cmp	r3, #5
 8001a9e:	d10c      	bne.n	8001aba <HAL_RCC_OscConfig+0x356>
 8001aa0:	4b61      	ldr	r3, [pc, #388]	@ (8001c28 <HAL_RCC_OscConfig+0x4c4>)
 8001aa2:	6a1b      	ldr	r3, [r3, #32]
 8001aa4:	4a60      	ldr	r2, [pc, #384]	@ (8001c28 <HAL_RCC_OscConfig+0x4c4>)
 8001aa6:	f043 0304 	orr.w	r3, r3, #4
 8001aaa:	6213      	str	r3, [r2, #32]
 8001aac:	4b5e      	ldr	r3, [pc, #376]	@ (8001c28 <HAL_RCC_OscConfig+0x4c4>)
 8001aae:	6a1b      	ldr	r3, [r3, #32]
 8001ab0:	4a5d      	ldr	r2, [pc, #372]	@ (8001c28 <HAL_RCC_OscConfig+0x4c4>)
 8001ab2:	f043 0301 	orr.w	r3, r3, #1
 8001ab6:	6213      	str	r3, [r2, #32]
 8001ab8:	e00b      	b.n	8001ad2 <HAL_RCC_OscConfig+0x36e>
 8001aba:	4b5b      	ldr	r3, [pc, #364]	@ (8001c28 <HAL_RCC_OscConfig+0x4c4>)
 8001abc:	6a1b      	ldr	r3, [r3, #32]
 8001abe:	4a5a      	ldr	r2, [pc, #360]	@ (8001c28 <HAL_RCC_OscConfig+0x4c4>)
 8001ac0:	f023 0301 	bic.w	r3, r3, #1
 8001ac4:	6213      	str	r3, [r2, #32]
 8001ac6:	4b58      	ldr	r3, [pc, #352]	@ (8001c28 <HAL_RCC_OscConfig+0x4c4>)
 8001ac8:	6a1b      	ldr	r3, [r3, #32]
 8001aca:	4a57      	ldr	r2, [pc, #348]	@ (8001c28 <HAL_RCC_OscConfig+0x4c4>)
 8001acc:	f023 0304 	bic.w	r3, r3, #4
 8001ad0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d015      	beq.n	8001b06 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ada:	f7ff fba9 	bl	8001230 <HAL_GetTick>
 8001ade:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ae0:	e00a      	b.n	8001af8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ae2:	f7ff fba5 	bl	8001230 <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e0b1      	b.n	8001c5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001af8:	4b4b      	ldr	r3, [pc, #300]	@ (8001c28 <HAL_RCC_OscConfig+0x4c4>)
 8001afa:	6a1b      	ldr	r3, [r3, #32]
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d0ee      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x37e>
 8001b04:	e014      	b.n	8001b30 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b06:	f7ff fb93 	bl	8001230 <HAL_GetTick>
 8001b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b0c:	e00a      	b.n	8001b24 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b0e:	f7ff fb8f 	bl	8001230 <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d901      	bls.n	8001b24 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e09b      	b.n	8001c5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b24:	4b40      	ldr	r3, [pc, #256]	@ (8001c28 <HAL_RCC_OscConfig+0x4c4>)
 8001b26:	6a1b      	ldr	r3, [r3, #32]
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d1ee      	bne.n	8001b0e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b30:	7dfb      	ldrb	r3, [r7, #23]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d105      	bne.n	8001b42 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b36:	4b3c      	ldr	r3, [pc, #240]	@ (8001c28 <HAL_RCC_OscConfig+0x4c4>)
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	4a3b      	ldr	r2, [pc, #236]	@ (8001c28 <HAL_RCC_OscConfig+0x4c4>)
 8001b3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b40:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	69db      	ldr	r3, [r3, #28]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	f000 8087 	beq.w	8001c5a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b4c:	4b36      	ldr	r3, [pc, #216]	@ (8001c28 <HAL_RCC_OscConfig+0x4c4>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f003 030c 	and.w	r3, r3, #12
 8001b54:	2b08      	cmp	r3, #8
 8001b56:	d061      	beq.n	8001c1c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	69db      	ldr	r3, [r3, #28]
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d146      	bne.n	8001bee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b60:	4b33      	ldr	r3, [pc, #204]	@ (8001c30 <HAL_RCC_OscConfig+0x4cc>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b66:	f7ff fb63 	bl	8001230 <HAL_GetTick>
 8001b6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b6c:	e008      	b.n	8001b80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b6e:	f7ff fb5f 	bl	8001230 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e06d      	b.n	8001c5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b80:	4b29      	ldr	r3, [pc, #164]	@ (8001c28 <HAL_RCC_OscConfig+0x4c4>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d1f0      	bne.n	8001b6e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a1b      	ldr	r3, [r3, #32]
 8001b90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b94:	d108      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b96:	4b24      	ldr	r3, [pc, #144]	@ (8001c28 <HAL_RCC_OscConfig+0x4c4>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	4921      	ldr	r1, [pc, #132]	@ (8001c28 <HAL_RCC_OscConfig+0x4c4>)
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ba8:	4b1f      	ldr	r3, [pc, #124]	@ (8001c28 <HAL_RCC_OscConfig+0x4c4>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a19      	ldr	r1, [r3, #32]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb8:	430b      	orrs	r3, r1
 8001bba:	491b      	ldr	r1, [pc, #108]	@ (8001c28 <HAL_RCC_OscConfig+0x4c4>)
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bc0:	4b1b      	ldr	r3, [pc, #108]	@ (8001c30 <HAL_RCC_OscConfig+0x4cc>)
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc6:	f7ff fb33 	bl	8001230 <HAL_GetTick>
 8001bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bcc:	e008      	b.n	8001be0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bce:	f7ff fb2f 	bl	8001230 <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e03d      	b.n	8001c5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001be0:	4b11      	ldr	r3, [pc, #68]	@ (8001c28 <HAL_RCC_OscConfig+0x4c4>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d0f0      	beq.n	8001bce <HAL_RCC_OscConfig+0x46a>
 8001bec:	e035      	b.n	8001c5a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bee:	4b10      	ldr	r3, [pc, #64]	@ (8001c30 <HAL_RCC_OscConfig+0x4cc>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf4:	f7ff fb1c 	bl	8001230 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bfc:	f7ff fb18 	bl	8001230 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e026      	b.n	8001c5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c0e:	4b06      	ldr	r3, [pc, #24]	@ (8001c28 <HAL_RCC_OscConfig+0x4c4>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1f0      	bne.n	8001bfc <HAL_RCC_OscConfig+0x498>
 8001c1a:	e01e      	b.n	8001c5a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	69db      	ldr	r3, [r3, #28]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d107      	bne.n	8001c34 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e019      	b.n	8001c5c <HAL_RCC_OscConfig+0x4f8>
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	40007000 	.word	0x40007000
 8001c30:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c34:	4b0b      	ldr	r3, [pc, #44]	@ (8001c64 <HAL_RCC_OscConfig+0x500>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a1b      	ldr	r3, [r3, #32]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d106      	bne.n	8001c56 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d001      	beq.n	8001c5a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e000      	b.n	8001c5c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3718      	adds	r7, #24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40021000 	.word	0x40021000

08001c68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d101      	bne.n	8001c7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e0d0      	b.n	8001e1e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c7c:	4b6a      	ldr	r3, [pc, #424]	@ (8001e28 <HAL_RCC_ClockConfig+0x1c0>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0307 	and.w	r3, r3, #7
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d910      	bls.n	8001cac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c8a:	4b67      	ldr	r3, [pc, #412]	@ (8001e28 <HAL_RCC_ClockConfig+0x1c0>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f023 0207 	bic.w	r2, r3, #7
 8001c92:	4965      	ldr	r1, [pc, #404]	@ (8001e28 <HAL_RCC_ClockConfig+0x1c0>)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c9a:	4b63      	ldr	r3, [pc, #396]	@ (8001e28 <HAL_RCC_ClockConfig+0x1c0>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	683a      	ldr	r2, [r7, #0]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d001      	beq.n	8001cac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e0b8      	b.n	8001e1e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d020      	beq.n	8001cfa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0304 	and.w	r3, r3, #4
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d005      	beq.n	8001cd0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cc4:	4b59      	ldr	r3, [pc, #356]	@ (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	4a58      	ldr	r2, [pc, #352]	@ (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001cca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001cce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0308 	and.w	r3, r3, #8
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d005      	beq.n	8001ce8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cdc:	4b53      	ldr	r3, [pc, #332]	@ (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	4a52      	ldr	r2, [pc, #328]	@ (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001ce2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001ce6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ce8:	4b50      	ldr	r3, [pc, #320]	@ (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	494d      	ldr	r1, [pc, #308]	@ (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d040      	beq.n	8001d88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d107      	bne.n	8001d1e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d0e:	4b47      	ldr	r3, [pc, #284]	@ (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d115      	bne.n	8001d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e07f      	b.n	8001e1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d107      	bne.n	8001d36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d26:	4b41      	ldr	r3, [pc, #260]	@ (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d109      	bne.n	8001d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e073      	b.n	8001e1e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d36:	4b3d      	ldr	r3, [pc, #244]	@ (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e06b      	b.n	8001e1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d46:	4b39      	ldr	r3, [pc, #228]	@ (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f023 0203 	bic.w	r2, r3, #3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	4936      	ldr	r1, [pc, #216]	@ (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001d54:	4313      	orrs	r3, r2
 8001d56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d58:	f7ff fa6a 	bl	8001230 <HAL_GetTick>
 8001d5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d5e:	e00a      	b.n	8001d76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d60:	f7ff fa66 	bl	8001230 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e053      	b.n	8001e1e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d76:	4b2d      	ldr	r3, [pc, #180]	@ (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f003 020c 	and.w	r2, r3, #12
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d1eb      	bne.n	8001d60 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d88:	4b27      	ldr	r3, [pc, #156]	@ (8001e28 <HAL_RCC_ClockConfig+0x1c0>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0307 	and.w	r3, r3, #7
 8001d90:	683a      	ldr	r2, [r7, #0]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d210      	bcs.n	8001db8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d96:	4b24      	ldr	r3, [pc, #144]	@ (8001e28 <HAL_RCC_ClockConfig+0x1c0>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f023 0207 	bic.w	r2, r3, #7
 8001d9e:	4922      	ldr	r1, [pc, #136]	@ (8001e28 <HAL_RCC_ClockConfig+0x1c0>)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001da6:	4b20      	ldr	r3, [pc, #128]	@ (8001e28 <HAL_RCC_ClockConfig+0x1c0>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d001      	beq.n	8001db8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e032      	b.n	8001e1e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0304 	and.w	r3, r3, #4
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d008      	beq.n	8001dd6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dc4:	4b19      	ldr	r3, [pc, #100]	@ (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	4916      	ldr	r1, [pc, #88]	@ (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0308 	and.w	r3, r3, #8
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d009      	beq.n	8001df6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001de2:	4b12      	ldr	r3, [pc, #72]	@ (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	490e      	ldr	r1, [pc, #56]	@ (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001df6:	f000 f821 	bl	8001e3c <HAL_RCC_GetSysClockFreq>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	091b      	lsrs	r3, r3, #4
 8001e02:	f003 030f 	and.w	r3, r3, #15
 8001e06:	490a      	ldr	r1, [pc, #40]	@ (8001e30 <HAL_RCC_ClockConfig+0x1c8>)
 8001e08:	5ccb      	ldrb	r3, [r1, r3]
 8001e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e0e:	4a09      	ldr	r2, [pc, #36]	@ (8001e34 <HAL_RCC_ClockConfig+0x1cc>)
 8001e10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e12:	4b09      	ldr	r3, [pc, #36]	@ (8001e38 <HAL_RCC_ClockConfig+0x1d0>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff f9c8 	bl	80011ac <HAL_InitTick>

  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40022000 	.word	0x40022000
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	080065f0 	.word	0x080065f0
 8001e34:	20000000 	.word	0x20000000
 8001e38:	20000004 	.word	0x20000004

08001e3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b087      	sub	sp, #28
 8001e40:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e42:	2300      	movs	r3, #0
 8001e44:	60fb      	str	r3, [r7, #12]
 8001e46:	2300      	movs	r3, #0
 8001e48:	60bb      	str	r3, [r7, #8]
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	617b      	str	r3, [r7, #20]
 8001e4e:	2300      	movs	r3, #0
 8001e50:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e52:	2300      	movs	r3, #0
 8001e54:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e56:	4b1e      	ldr	r3, [pc, #120]	@ (8001ed0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f003 030c 	and.w	r3, r3, #12
 8001e62:	2b04      	cmp	r3, #4
 8001e64:	d002      	beq.n	8001e6c <HAL_RCC_GetSysClockFreq+0x30>
 8001e66:	2b08      	cmp	r3, #8
 8001e68:	d003      	beq.n	8001e72 <HAL_RCC_GetSysClockFreq+0x36>
 8001e6a:	e027      	b.n	8001ebc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e6c:	4b19      	ldr	r3, [pc, #100]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e6e:	613b      	str	r3, [r7, #16]
      break;
 8001e70:	e027      	b.n	8001ec2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	0c9b      	lsrs	r3, r3, #18
 8001e76:	f003 030f 	and.w	r3, r3, #15
 8001e7a:	4a17      	ldr	r2, [pc, #92]	@ (8001ed8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e7c:	5cd3      	ldrb	r3, [r2, r3]
 8001e7e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d010      	beq.n	8001eac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e8a:	4b11      	ldr	r3, [pc, #68]	@ (8001ed0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	0c5b      	lsrs	r3, r3, #17
 8001e90:	f003 0301 	and.w	r3, r3, #1
 8001e94:	4a11      	ldr	r2, [pc, #68]	@ (8001edc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e96:	5cd3      	ldrb	r3, [r2, r3]
 8001e98:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e9e:	fb03 f202 	mul.w	r2, r3, r2
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea8:	617b      	str	r3, [r7, #20]
 8001eaa:	e004      	b.n	8001eb6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a0c      	ldr	r2, [pc, #48]	@ (8001ee0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001eb0:	fb02 f303 	mul.w	r3, r2, r3
 8001eb4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	613b      	str	r3, [r7, #16]
      break;
 8001eba:	e002      	b.n	8001ec2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ebc:	4b05      	ldr	r3, [pc, #20]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ebe:	613b      	str	r3, [r7, #16]
      break;
 8001ec0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ec2:	693b      	ldr	r3, [r7, #16]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	371c      	adds	r7, #28
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bc80      	pop	{r7}
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	007a1200 	.word	0x007a1200
 8001ed8:	08006600 	.word	0x08006600
 8001edc:	08006610 	.word	0x08006610
 8001ee0:	003d0900 	.word	0x003d0900

08001ee4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001eec:	4b0a      	ldr	r3, [pc, #40]	@ (8001f18 <RCC_Delay+0x34>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a0a      	ldr	r2, [pc, #40]	@ (8001f1c <RCC_Delay+0x38>)
 8001ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef6:	0a5b      	lsrs	r3, r3, #9
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	fb02 f303 	mul.w	r3, r2, r3
 8001efe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f00:	bf00      	nop
  }
  while (Delay --);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	1e5a      	subs	r2, r3, #1
 8001f06:	60fa      	str	r2, [r7, #12]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d1f9      	bne.n	8001f00 <RCC_Delay+0x1c>
}
 8001f0c:	bf00      	nop
 8001f0e:	bf00      	nop
 8001f10:	3714      	adds	r7, #20
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bc80      	pop	{r7}
 8001f16:	4770      	bx	lr
 8001f18:	20000000 	.word	0x20000000
 8001f1c:	10624dd3 	.word	0x10624dd3

08001f20 <__cvt>:
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f26:	461d      	mov	r5, r3
 8001f28:	bfbb      	ittet	lt
 8001f2a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8001f2e:	461d      	movlt	r5, r3
 8001f30:	2300      	movge	r3, #0
 8001f32:	232d      	movlt	r3, #45	@ 0x2d
 8001f34:	b088      	sub	sp, #32
 8001f36:	4614      	mov	r4, r2
 8001f38:	bfb8      	it	lt
 8001f3a:	4614      	movlt	r4, r2
 8001f3c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8001f3e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8001f40:	7013      	strb	r3, [r2, #0]
 8001f42:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8001f44:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8001f48:	f023 0820 	bic.w	r8, r3, #32
 8001f4c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8001f50:	d005      	beq.n	8001f5e <__cvt+0x3e>
 8001f52:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8001f56:	d100      	bne.n	8001f5a <__cvt+0x3a>
 8001f58:	3601      	adds	r6, #1
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	e000      	b.n	8001f60 <__cvt+0x40>
 8001f5e:	2303      	movs	r3, #3
 8001f60:	aa07      	add	r2, sp, #28
 8001f62:	9204      	str	r2, [sp, #16]
 8001f64:	aa06      	add	r2, sp, #24
 8001f66:	e9cd a202 	strd	sl, r2, [sp, #8]
 8001f6a:	e9cd 3600 	strd	r3, r6, [sp]
 8001f6e:	4622      	mov	r2, r4
 8001f70:	462b      	mov	r3, r5
 8001f72:	f001 f881 	bl	8003078 <_dtoa_r>
 8001f76:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8001f7a:	4607      	mov	r7, r0
 8001f7c:	d119      	bne.n	8001fb2 <__cvt+0x92>
 8001f7e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8001f80:	07db      	lsls	r3, r3, #31
 8001f82:	d50e      	bpl.n	8001fa2 <__cvt+0x82>
 8001f84:	eb00 0906 	add.w	r9, r0, r6
 8001f88:	2200      	movs	r2, #0
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	4620      	mov	r0, r4
 8001f8e:	4629      	mov	r1, r5
 8001f90:	f7fe fd0a 	bl	80009a8 <__aeabi_dcmpeq>
 8001f94:	b108      	cbz	r0, 8001f9a <__cvt+0x7a>
 8001f96:	f8cd 901c 	str.w	r9, [sp, #28]
 8001f9a:	2230      	movs	r2, #48	@ 0x30
 8001f9c:	9b07      	ldr	r3, [sp, #28]
 8001f9e:	454b      	cmp	r3, r9
 8001fa0:	d31e      	bcc.n	8001fe0 <__cvt+0xc0>
 8001fa2:	4638      	mov	r0, r7
 8001fa4:	9b07      	ldr	r3, [sp, #28]
 8001fa6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8001fa8:	1bdb      	subs	r3, r3, r7
 8001faa:	6013      	str	r3, [r2, #0]
 8001fac:	b008      	add	sp, #32
 8001fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001fb2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8001fb6:	eb00 0906 	add.w	r9, r0, r6
 8001fba:	d1e5      	bne.n	8001f88 <__cvt+0x68>
 8001fbc:	7803      	ldrb	r3, [r0, #0]
 8001fbe:	2b30      	cmp	r3, #48	@ 0x30
 8001fc0:	d10a      	bne.n	8001fd8 <__cvt+0xb8>
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	4620      	mov	r0, r4
 8001fc8:	4629      	mov	r1, r5
 8001fca:	f7fe fced 	bl	80009a8 <__aeabi_dcmpeq>
 8001fce:	b918      	cbnz	r0, 8001fd8 <__cvt+0xb8>
 8001fd0:	f1c6 0601 	rsb	r6, r6, #1
 8001fd4:	f8ca 6000 	str.w	r6, [sl]
 8001fd8:	f8da 3000 	ldr.w	r3, [sl]
 8001fdc:	4499      	add	r9, r3
 8001fde:	e7d3      	b.n	8001f88 <__cvt+0x68>
 8001fe0:	1c59      	adds	r1, r3, #1
 8001fe2:	9107      	str	r1, [sp, #28]
 8001fe4:	701a      	strb	r2, [r3, #0]
 8001fe6:	e7d9      	b.n	8001f9c <__cvt+0x7c>

08001fe8 <__exponent>:
 8001fe8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001fea:	2900      	cmp	r1, #0
 8001fec:	bfb6      	itet	lt
 8001fee:	232d      	movlt	r3, #45	@ 0x2d
 8001ff0:	232b      	movge	r3, #43	@ 0x2b
 8001ff2:	4249      	neglt	r1, r1
 8001ff4:	2909      	cmp	r1, #9
 8001ff6:	7002      	strb	r2, [r0, #0]
 8001ff8:	7043      	strb	r3, [r0, #1]
 8001ffa:	dd29      	ble.n	8002050 <__exponent+0x68>
 8001ffc:	f10d 0307 	add.w	r3, sp, #7
 8002000:	461d      	mov	r5, r3
 8002002:	270a      	movs	r7, #10
 8002004:	fbb1 f6f7 	udiv	r6, r1, r7
 8002008:	461a      	mov	r2, r3
 800200a:	fb07 1416 	mls	r4, r7, r6, r1
 800200e:	3430      	adds	r4, #48	@ 0x30
 8002010:	f802 4c01 	strb.w	r4, [r2, #-1]
 8002014:	460c      	mov	r4, r1
 8002016:	2c63      	cmp	r4, #99	@ 0x63
 8002018:	4631      	mov	r1, r6
 800201a:	f103 33ff 	add.w	r3, r3, #4294967295
 800201e:	dcf1      	bgt.n	8002004 <__exponent+0x1c>
 8002020:	3130      	adds	r1, #48	@ 0x30
 8002022:	1e94      	subs	r4, r2, #2
 8002024:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002028:	4623      	mov	r3, r4
 800202a:	1c41      	adds	r1, r0, #1
 800202c:	42ab      	cmp	r3, r5
 800202e:	d30a      	bcc.n	8002046 <__exponent+0x5e>
 8002030:	f10d 0309 	add.w	r3, sp, #9
 8002034:	1a9b      	subs	r3, r3, r2
 8002036:	42ac      	cmp	r4, r5
 8002038:	bf88      	it	hi
 800203a:	2300      	movhi	r3, #0
 800203c:	3302      	adds	r3, #2
 800203e:	4403      	add	r3, r0
 8002040:	1a18      	subs	r0, r3, r0
 8002042:	b003      	add	sp, #12
 8002044:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002046:	f813 6b01 	ldrb.w	r6, [r3], #1
 800204a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800204e:	e7ed      	b.n	800202c <__exponent+0x44>
 8002050:	2330      	movs	r3, #48	@ 0x30
 8002052:	3130      	adds	r1, #48	@ 0x30
 8002054:	7083      	strb	r3, [r0, #2]
 8002056:	70c1      	strb	r1, [r0, #3]
 8002058:	1d03      	adds	r3, r0, #4
 800205a:	e7f1      	b.n	8002040 <__exponent+0x58>

0800205c <_printf_float>:
 800205c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002060:	b091      	sub	sp, #68	@ 0x44
 8002062:	460c      	mov	r4, r1
 8002064:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8002068:	4616      	mov	r6, r2
 800206a:	461f      	mov	r7, r3
 800206c:	4605      	mov	r5, r0
 800206e:	f000 fef1 	bl	8002e54 <_localeconv_r>
 8002072:	6803      	ldr	r3, [r0, #0]
 8002074:	4618      	mov	r0, r3
 8002076:	9308      	str	r3, [sp, #32]
 8002078:	f7fe f86a 	bl	8000150 <strlen>
 800207c:	2300      	movs	r3, #0
 800207e:	930e      	str	r3, [sp, #56]	@ 0x38
 8002080:	f8d8 3000 	ldr.w	r3, [r8]
 8002084:	9009      	str	r0, [sp, #36]	@ 0x24
 8002086:	3307      	adds	r3, #7
 8002088:	f023 0307 	bic.w	r3, r3, #7
 800208c:	f103 0208 	add.w	r2, r3, #8
 8002090:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002094:	f8d4 b000 	ldr.w	fp, [r4]
 8002098:	f8c8 2000 	str.w	r2, [r8]
 800209c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80020a0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80020a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80020a6:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80020aa:	f04f 32ff 	mov.w	r2, #4294967295
 80020ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80020b2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80020b6:	4b9c      	ldr	r3, [pc, #624]	@ (8002328 <_printf_float+0x2cc>)
 80020b8:	f7fe fca8 	bl	8000a0c <__aeabi_dcmpun>
 80020bc:	bb70      	cbnz	r0, 800211c <_printf_float+0xc0>
 80020be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80020c2:	f04f 32ff 	mov.w	r2, #4294967295
 80020c6:	4b98      	ldr	r3, [pc, #608]	@ (8002328 <_printf_float+0x2cc>)
 80020c8:	f7fe fc82 	bl	80009d0 <__aeabi_dcmple>
 80020cc:	bb30      	cbnz	r0, 800211c <_printf_float+0xc0>
 80020ce:	2200      	movs	r2, #0
 80020d0:	2300      	movs	r3, #0
 80020d2:	4640      	mov	r0, r8
 80020d4:	4649      	mov	r1, r9
 80020d6:	f7fe fc71 	bl	80009bc <__aeabi_dcmplt>
 80020da:	b110      	cbz	r0, 80020e2 <_printf_float+0x86>
 80020dc:	232d      	movs	r3, #45	@ 0x2d
 80020de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80020e2:	4a92      	ldr	r2, [pc, #584]	@ (800232c <_printf_float+0x2d0>)
 80020e4:	4b92      	ldr	r3, [pc, #584]	@ (8002330 <_printf_float+0x2d4>)
 80020e6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80020ea:	bf94      	ite	ls
 80020ec:	4690      	movls	r8, r2
 80020ee:	4698      	movhi	r8, r3
 80020f0:	2303      	movs	r3, #3
 80020f2:	f04f 0900 	mov.w	r9, #0
 80020f6:	6123      	str	r3, [r4, #16]
 80020f8:	f02b 0304 	bic.w	r3, fp, #4
 80020fc:	6023      	str	r3, [r4, #0]
 80020fe:	4633      	mov	r3, r6
 8002100:	4621      	mov	r1, r4
 8002102:	4628      	mov	r0, r5
 8002104:	9700      	str	r7, [sp, #0]
 8002106:	aa0f      	add	r2, sp, #60	@ 0x3c
 8002108:	f000 f9d4 	bl	80024b4 <_printf_common>
 800210c:	3001      	adds	r0, #1
 800210e:	f040 8090 	bne.w	8002232 <_printf_float+0x1d6>
 8002112:	f04f 30ff 	mov.w	r0, #4294967295
 8002116:	b011      	add	sp, #68	@ 0x44
 8002118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800211c:	4642      	mov	r2, r8
 800211e:	464b      	mov	r3, r9
 8002120:	4640      	mov	r0, r8
 8002122:	4649      	mov	r1, r9
 8002124:	f7fe fc72 	bl	8000a0c <__aeabi_dcmpun>
 8002128:	b148      	cbz	r0, 800213e <_printf_float+0xe2>
 800212a:	464b      	mov	r3, r9
 800212c:	2b00      	cmp	r3, #0
 800212e:	bfb8      	it	lt
 8002130:	232d      	movlt	r3, #45	@ 0x2d
 8002132:	4a80      	ldr	r2, [pc, #512]	@ (8002334 <_printf_float+0x2d8>)
 8002134:	bfb8      	it	lt
 8002136:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800213a:	4b7f      	ldr	r3, [pc, #508]	@ (8002338 <_printf_float+0x2dc>)
 800213c:	e7d3      	b.n	80020e6 <_printf_float+0x8a>
 800213e:	6863      	ldr	r3, [r4, #4]
 8002140:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8002144:	1c5a      	adds	r2, r3, #1
 8002146:	d13f      	bne.n	80021c8 <_printf_float+0x16c>
 8002148:	2306      	movs	r3, #6
 800214a:	6063      	str	r3, [r4, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8002152:	6023      	str	r3, [r4, #0]
 8002154:	9206      	str	r2, [sp, #24]
 8002156:	aa0e      	add	r2, sp, #56	@ 0x38
 8002158:	e9cd a204 	strd	sl, r2, [sp, #16]
 800215c:	aa0d      	add	r2, sp, #52	@ 0x34
 800215e:	9203      	str	r2, [sp, #12]
 8002160:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8002164:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002168:	6863      	ldr	r3, [r4, #4]
 800216a:	4642      	mov	r2, r8
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	4628      	mov	r0, r5
 8002170:	464b      	mov	r3, r9
 8002172:	910a      	str	r1, [sp, #40]	@ 0x28
 8002174:	f7ff fed4 	bl	8001f20 <__cvt>
 8002178:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800217a:	4680      	mov	r8, r0
 800217c:	2947      	cmp	r1, #71	@ 0x47
 800217e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8002180:	d128      	bne.n	80021d4 <_printf_float+0x178>
 8002182:	1cc8      	adds	r0, r1, #3
 8002184:	db02      	blt.n	800218c <_printf_float+0x130>
 8002186:	6863      	ldr	r3, [r4, #4]
 8002188:	4299      	cmp	r1, r3
 800218a:	dd40      	ble.n	800220e <_printf_float+0x1b2>
 800218c:	f1aa 0a02 	sub.w	sl, sl, #2
 8002190:	fa5f fa8a 	uxtb.w	sl, sl
 8002194:	4652      	mov	r2, sl
 8002196:	3901      	subs	r1, #1
 8002198:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800219c:	910d      	str	r1, [sp, #52]	@ 0x34
 800219e:	f7ff ff23 	bl	8001fe8 <__exponent>
 80021a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80021a4:	4681      	mov	r9, r0
 80021a6:	1813      	adds	r3, r2, r0
 80021a8:	2a01      	cmp	r2, #1
 80021aa:	6123      	str	r3, [r4, #16]
 80021ac:	dc02      	bgt.n	80021b4 <_printf_float+0x158>
 80021ae:	6822      	ldr	r2, [r4, #0]
 80021b0:	07d2      	lsls	r2, r2, #31
 80021b2:	d501      	bpl.n	80021b8 <_printf_float+0x15c>
 80021b4:	3301      	adds	r3, #1
 80021b6:	6123      	str	r3, [r4, #16]
 80021b8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d09e      	beq.n	80020fe <_printf_float+0xa2>
 80021c0:	232d      	movs	r3, #45	@ 0x2d
 80021c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80021c6:	e79a      	b.n	80020fe <_printf_float+0xa2>
 80021c8:	2947      	cmp	r1, #71	@ 0x47
 80021ca:	d1bf      	bne.n	800214c <_printf_float+0xf0>
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d1bd      	bne.n	800214c <_printf_float+0xf0>
 80021d0:	2301      	movs	r3, #1
 80021d2:	e7ba      	b.n	800214a <_printf_float+0xee>
 80021d4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80021d8:	d9dc      	bls.n	8002194 <_printf_float+0x138>
 80021da:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80021de:	d118      	bne.n	8002212 <_printf_float+0x1b6>
 80021e0:	2900      	cmp	r1, #0
 80021e2:	6863      	ldr	r3, [r4, #4]
 80021e4:	dd0b      	ble.n	80021fe <_printf_float+0x1a2>
 80021e6:	6121      	str	r1, [r4, #16]
 80021e8:	b913      	cbnz	r3, 80021f0 <_printf_float+0x194>
 80021ea:	6822      	ldr	r2, [r4, #0]
 80021ec:	07d0      	lsls	r0, r2, #31
 80021ee:	d502      	bpl.n	80021f6 <_printf_float+0x19a>
 80021f0:	3301      	adds	r3, #1
 80021f2:	440b      	add	r3, r1
 80021f4:	6123      	str	r3, [r4, #16]
 80021f6:	f04f 0900 	mov.w	r9, #0
 80021fa:	65a1      	str	r1, [r4, #88]	@ 0x58
 80021fc:	e7dc      	b.n	80021b8 <_printf_float+0x15c>
 80021fe:	b913      	cbnz	r3, 8002206 <_printf_float+0x1aa>
 8002200:	6822      	ldr	r2, [r4, #0]
 8002202:	07d2      	lsls	r2, r2, #31
 8002204:	d501      	bpl.n	800220a <_printf_float+0x1ae>
 8002206:	3302      	adds	r3, #2
 8002208:	e7f4      	b.n	80021f4 <_printf_float+0x198>
 800220a:	2301      	movs	r3, #1
 800220c:	e7f2      	b.n	80021f4 <_printf_float+0x198>
 800220e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8002212:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002214:	4299      	cmp	r1, r3
 8002216:	db05      	blt.n	8002224 <_printf_float+0x1c8>
 8002218:	6823      	ldr	r3, [r4, #0]
 800221a:	6121      	str	r1, [r4, #16]
 800221c:	07d8      	lsls	r0, r3, #31
 800221e:	d5ea      	bpl.n	80021f6 <_printf_float+0x19a>
 8002220:	1c4b      	adds	r3, r1, #1
 8002222:	e7e7      	b.n	80021f4 <_printf_float+0x198>
 8002224:	2900      	cmp	r1, #0
 8002226:	bfcc      	ite	gt
 8002228:	2201      	movgt	r2, #1
 800222a:	f1c1 0202 	rsble	r2, r1, #2
 800222e:	4413      	add	r3, r2
 8002230:	e7e0      	b.n	80021f4 <_printf_float+0x198>
 8002232:	6823      	ldr	r3, [r4, #0]
 8002234:	055a      	lsls	r2, r3, #21
 8002236:	d407      	bmi.n	8002248 <_printf_float+0x1ec>
 8002238:	6923      	ldr	r3, [r4, #16]
 800223a:	4642      	mov	r2, r8
 800223c:	4631      	mov	r1, r6
 800223e:	4628      	mov	r0, r5
 8002240:	47b8      	blx	r7
 8002242:	3001      	adds	r0, #1
 8002244:	d12b      	bne.n	800229e <_printf_float+0x242>
 8002246:	e764      	b.n	8002112 <_printf_float+0xb6>
 8002248:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800224c:	f240 80dc 	bls.w	8002408 <_printf_float+0x3ac>
 8002250:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8002254:	2200      	movs	r2, #0
 8002256:	2300      	movs	r3, #0
 8002258:	f7fe fba6 	bl	80009a8 <__aeabi_dcmpeq>
 800225c:	2800      	cmp	r0, #0
 800225e:	d033      	beq.n	80022c8 <_printf_float+0x26c>
 8002260:	2301      	movs	r3, #1
 8002262:	4631      	mov	r1, r6
 8002264:	4628      	mov	r0, r5
 8002266:	4a35      	ldr	r2, [pc, #212]	@ (800233c <_printf_float+0x2e0>)
 8002268:	47b8      	blx	r7
 800226a:	3001      	adds	r0, #1
 800226c:	f43f af51 	beq.w	8002112 <_printf_float+0xb6>
 8002270:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8002274:	4543      	cmp	r3, r8
 8002276:	db02      	blt.n	800227e <_printf_float+0x222>
 8002278:	6823      	ldr	r3, [r4, #0]
 800227a:	07d8      	lsls	r0, r3, #31
 800227c:	d50f      	bpl.n	800229e <_printf_float+0x242>
 800227e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002282:	4631      	mov	r1, r6
 8002284:	4628      	mov	r0, r5
 8002286:	47b8      	blx	r7
 8002288:	3001      	adds	r0, #1
 800228a:	f43f af42 	beq.w	8002112 <_printf_float+0xb6>
 800228e:	f04f 0900 	mov.w	r9, #0
 8002292:	f108 38ff 	add.w	r8, r8, #4294967295
 8002296:	f104 0a1a 	add.w	sl, r4, #26
 800229a:	45c8      	cmp	r8, r9
 800229c:	dc09      	bgt.n	80022b2 <_printf_float+0x256>
 800229e:	6823      	ldr	r3, [r4, #0]
 80022a0:	079b      	lsls	r3, r3, #30
 80022a2:	f100 8102 	bmi.w	80024aa <_printf_float+0x44e>
 80022a6:	68e0      	ldr	r0, [r4, #12]
 80022a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80022aa:	4298      	cmp	r0, r3
 80022ac:	bfb8      	it	lt
 80022ae:	4618      	movlt	r0, r3
 80022b0:	e731      	b.n	8002116 <_printf_float+0xba>
 80022b2:	2301      	movs	r3, #1
 80022b4:	4652      	mov	r2, sl
 80022b6:	4631      	mov	r1, r6
 80022b8:	4628      	mov	r0, r5
 80022ba:	47b8      	blx	r7
 80022bc:	3001      	adds	r0, #1
 80022be:	f43f af28 	beq.w	8002112 <_printf_float+0xb6>
 80022c2:	f109 0901 	add.w	r9, r9, #1
 80022c6:	e7e8      	b.n	800229a <_printf_float+0x23e>
 80022c8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	dc38      	bgt.n	8002340 <_printf_float+0x2e4>
 80022ce:	2301      	movs	r3, #1
 80022d0:	4631      	mov	r1, r6
 80022d2:	4628      	mov	r0, r5
 80022d4:	4a19      	ldr	r2, [pc, #100]	@ (800233c <_printf_float+0x2e0>)
 80022d6:	47b8      	blx	r7
 80022d8:	3001      	adds	r0, #1
 80022da:	f43f af1a 	beq.w	8002112 <_printf_float+0xb6>
 80022de:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80022e2:	ea59 0303 	orrs.w	r3, r9, r3
 80022e6:	d102      	bne.n	80022ee <_printf_float+0x292>
 80022e8:	6823      	ldr	r3, [r4, #0]
 80022ea:	07d9      	lsls	r1, r3, #31
 80022ec:	d5d7      	bpl.n	800229e <_printf_float+0x242>
 80022ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80022f2:	4631      	mov	r1, r6
 80022f4:	4628      	mov	r0, r5
 80022f6:	47b8      	blx	r7
 80022f8:	3001      	adds	r0, #1
 80022fa:	f43f af0a 	beq.w	8002112 <_printf_float+0xb6>
 80022fe:	f04f 0a00 	mov.w	sl, #0
 8002302:	f104 0b1a 	add.w	fp, r4, #26
 8002306:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002308:	425b      	negs	r3, r3
 800230a:	4553      	cmp	r3, sl
 800230c:	dc01      	bgt.n	8002312 <_printf_float+0x2b6>
 800230e:	464b      	mov	r3, r9
 8002310:	e793      	b.n	800223a <_printf_float+0x1de>
 8002312:	2301      	movs	r3, #1
 8002314:	465a      	mov	r2, fp
 8002316:	4631      	mov	r1, r6
 8002318:	4628      	mov	r0, r5
 800231a:	47b8      	blx	r7
 800231c:	3001      	adds	r0, #1
 800231e:	f43f aef8 	beq.w	8002112 <_printf_float+0xb6>
 8002322:	f10a 0a01 	add.w	sl, sl, #1
 8002326:	e7ee      	b.n	8002306 <_printf_float+0x2aa>
 8002328:	7fefffff 	.word	0x7fefffff
 800232c:	08006612 	.word	0x08006612
 8002330:	08006616 	.word	0x08006616
 8002334:	0800661a 	.word	0x0800661a
 8002338:	0800661e 	.word	0x0800661e
 800233c:	08006622 	.word	0x08006622
 8002340:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002342:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8002346:	4553      	cmp	r3, sl
 8002348:	bfa8      	it	ge
 800234a:	4653      	movge	r3, sl
 800234c:	2b00      	cmp	r3, #0
 800234e:	4699      	mov	r9, r3
 8002350:	dc36      	bgt.n	80023c0 <_printf_float+0x364>
 8002352:	f04f 0b00 	mov.w	fp, #0
 8002356:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800235a:	f104 021a 	add.w	r2, r4, #26
 800235e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002360:	930a      	str	r3, [sp, #40]	@ 0x28
 8002362:	eba3 0309 	sub.w	r3, r3, r9
 8002366:	455b      	cmp	r3, fp
 8002368:	dc31      	bgt.n	80023ce <_printf_float+0x372>
 800236a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800236c:	459a      	cmp	sl, r3
 800236e:	dc3a      	bgt.n	80023e6 <_printf_float+0x38a>
 8002370:	6823      	ldr	r3, [r4, #0]
 8002372:	07da      	lsls	r2, r3, #31
 8002374:	d437      	bmi.n	80023e6 <_printf_float+0x38a>
 8002376:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002378:	ebaa 0903 	sub.w	r9, sl, r3
 800237c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800237e:	ebaa 0303 	sub.w	r3, sl, r3
 8002382:	4599      	cmp	r9, r3
 8002384:	bfa8      	it	ge
 8002386:	4699      	movge	r9, r3
 8002388:	f1b9 0f00 	cmp.w	r9, #0
 800238c:	dc33      	bgt.n	80023f6 <_printf_float+0x39a>
 800238e:	f04f 0800 	mov.w	r8, #0
 8002392:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002396:	f104 0b1a 	add.w	fp, r4, #26
 800239a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800239c:	ebaa 0303 	sub.w	r3, sl, r3
 80023a0:	eba3 0309 	sub.w	r3, r3, r9
 80023a4:	4543      	cmp	r3, r8
 80023a6:	f77f af7a 	ble.w	800229e <_printf_float+0x242>
 80023aa:	2301      	movs	r3, #1
 80023ac:	465a      	mov	r2, fp
 80023ae:	4631      	mov	r1, r6
 80023b0:	4628      	mov	r0, r5
 80023b2:	47b8      	blx	r7
 80023b4:	3001      	adds	r0, #1
 80023b6:	f43f aeac 	beq.w	8002112 <_printf_float+0xb6>
 80023ba:	f108 0801 	add.w	r8, r8, #1
 80023be:	e7ec      	b.n	800239a <_printf_float+0x33e>
 80023c0:	4642      	mov	r2, r8
 80023c2:	4631      	mov	r1, r6
 80023c4:	4628      	mov	r0, r5
 80023c6:	47b8      	blx	r7
 80023c8:	3001      	adds	r0, #1
 80023ca:	d1c2      	bne.n	8002352 <_printf_float+0x2f6>
 80023cc:	e6a1      	b.n	8002112 <_printf_float+0xb6>
 80023ce:	2301      	movs	r3, #1
 80023d0:	4631      	mov	r1, r6
 80023d2:	4628      	mov	r0, r5
 80023d4:	920a      	str	r2, [sp, #40]	@ 0x28
 80023d6:	47b8      	blx	r7
 80023d8:	3001      	adds	r0, #1
 80023da:	f43f ae9a 	beq.w	8002112 <_printf_float+0xb6>
 80023de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80023e0:	f10b 0b01 	add.w	fp, fp, #1
 80023e4:	e7bb      	b.n	800235e <_printf_float+0x302>
 80023e6:	4631      	mov	r1, r6
 80023e8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80023ec:	4628      	mov	r0, r5
 80023ee:	47b8      	blx	r7
 80023f0:	3001      	adds	r0, #1
 80023f2:	d1c0      	bne.n	8002376 <_printf_float+0x31a>
 80023f4:	e68d      	b.n	8002112 <_printf_float+0xb6>
 80023f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80023f8:	464b      	mov	r3, r9
 80023fa:	4631      	mov	r1, r6
 80023fc:	4628      	mov	r0, r5
 80023fe:	4442      	add	r2, r8
 8002400:	47b8      	blx	r7
 8002402:	3001      	adds	r0, #1
 8002404:	d1c3      	bne.n	800238e <_printf_float+0x332>
 8002406:	e684      	b.n	8002112 <_printf_float+0xb6>
 8002408:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800240c:	f1ba 0f01 	cmp.w	sl, #1
 8002410:	dc01      	bgt.n	8002416 <_printf_float+0x3ba>
 8002412:	07db      	lsls	r3, r3, #31
 8002414:	d536      	bpl.n	8002484 <_printf_float+0x428>
 8002416:	2301      	movs	r3, #1
 8002418:	4642      	mov	r2, r8
 800241a:	4631      	mov	r1, r6
 800241c:	4628      	mov	r0, r5
 800241e:	47b8      	blx	r7
 8002420:	3001      	adds	r0, #1
 8002422:	f43f ae76 	beq.w	8002112 <_printf_float+0xb6>
 8002426:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800242a:	4631      	mov	r1, r6
 800242c:	4628      	mov	r0, r5
 800242e:	47b8      	blx	r7
 8002430:	3001      	adds	r0, #1
 8002432:	f43f ae6e 	beq.w	8002112 <_printf_float+0xb6>
 8002436:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800243a:	2200      	movs	r2, #0
 800243c:	2300      	movs	r3, #0
 800243e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002442:	f7fe fab1 	bl	80009a8 <__aeabi_dcmpeq>
 8002446:	b9c0      	cbnz	r0, 800247a <_printf_float+0x41e>
 8002448:	4653      	mov	r3, sl
 800244a:	f108 0201 	add.w	r2, r8, #1
 800244e:	4631      	mov	r1, r6
 8002450:	4628      	mov	r0, r5
 8002452:	47b8      	blx	r7
 8002454:	3001      	adds	r0, #1
 8002456:	d10c      	bne.n	8002472 <_printf_float+0x416>
 8002458:	e65b      	b.n	8002112 <_printf_float+0xb6>
 800245a:	2301      	movs	r3, #1
 800245c:	465a      	mov	r2, fp
 800245e:	4631      	mov	r1, r6
 8002460:	4628      	mov	r0, r5
 8002462:	47b8      	blx	r7
 8002464:	3001      	adds	r0, #1
 8002466:	f43f ae54 	beq.w	8002112 <_printf_float+0xb6>
 800246a:	f108 0801 	add.w	r8, r8, #1
 800246e:	45d0      	cmp	r8, sl
 8002470:	dbf3      	blt.n	800245a <_printf_float+0x3fe>
 8002472:	464b      	mov	r3, r9
 8002474:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8002478:	e6e0      	b.n	800223c <_printf_float+0x1e0>
 800247a:	f04f 0800 	mov.w	r8, #0
 800247e:	f104 0b1a 	add.w	fp, r4, #26
 8002482:	e7f4      	b.n	800246e <_printf_float+0x412>
 8002484:	2301      	movs	r3, #1
 8002486:	4642      	mov	r2, r8
 8002488:	e7e1      	b.n	800244e <_printf_float+0x3f2>
 800248a:	2301      	movs	r3, #1
 800248c:	464a      	mov	r2, r9
 800248e:	4631      	mov	r1, r6
 8002490:	4628      	mov	r0, r5
 8002492:	47b8      	blx	r7
 8002494:	3001      	adds	r0, #1
 8002496:	f43f ae3c 	beq.w	8002112 <_printf_float+0xb6>
 800249a:	f108 0801 	add.w	r8, r8, #1
 800249e:	68e3      	ldr	r3, [r4, #12]
 80024a0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80024a2:	1a5b      	subs	r3, r3, r1
 80024a4:	4543      	cmp	r3, r8
 80024a6:	dcf0      	bgt.n	800248a <_printf_float+0x42e>
 80024a8:	e6fd      	b.n	80022a6 <_printf_float+0x24a>
 80024aa:	f04f 0800 	mov.w	r8, #0
 80024ae:	f104 0919 	add.w	r9, r4, #25
 80024b2:	e7f4      	b.n	800249e <_printf_float+0x442>

080024b4 <_printf_common>:
 80024b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80024b8:	4616      	mov	r6, r2
 80024ba:	4698      	mov	r8, r3
 80024bc:	688a      	ldr	r2, [r1, #8]
 80024be:	690b      	ldr	r3, [r1, #16]
 80024c0:	4607      	mov	r7, r0
 80024c2:	4293      	cmp	r3, r2
 80024c4:	bfb8      	it	lt
 80024c6:	4613      	movlt	r3, r2
 80024c8:	6033      	str	r3, [r6, #0]
 80024ca:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80024ce:	460c      	mov	r4, r1
 80024d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80024d4:	b10a      	cbz	r2, 80024da <_printf_common+0x26>
 80024d6:	3301      	adds	r3, #1
 80024d8:	6033      	str	r3, [r6, #0]
 80024da:	6823      	ldr	r3, [r4, #0]
 80024dc:	0699      	lsls	r1, r3, #26
 80024de:	bf42      	ittt	mi
 80024e0:	6833      	ldrmi	r3, [r6, #0]
 80024e2:	3302      	addmi	r3, #2
 80024e4:	6033      	strmi	r3, [r6, #0]
 80024e6:	6825      	ldr	r5, [r4, #0]
 80024e8:	f015 0506 	ands.w	r5, r5, #6
 80024ec:	d106      	bne.n	80024fc <_printf_common+0x48>
 80024ee:	f104 0a19 	add.w	sl, r4, #25
 80024f2:	68e3      	ldr	r3, [r4, #12]
 80024f4:	6832      	ldr	r2, [r6, #0]
 80024f6:	1a9b      	subs	r3, r3, r2
 80024f8:	42ab      	cmp	r3, r5
 80024fa:	dc2b      	bgt.n	8002554 <_printf_common+0xa0>
 80024fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002500:	6822      	ldr	r2, [r4, #0]
 8002502:	3b00      	subs	r3, #0
 8002504:	bf18      	it	ne
 8002506:	2301      	movne	r3, #1
 8002508:	0692      	lsls	r2, r2, #26
 800250a:	d430      	bmi.n	800256e <_printf_common+0xba>
 800250c:	4641      	mov	r1, r8
 800250e:	4638      	mov	r0, r7
 8002510:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002514:	47c8      	blx	r9
 8002516:	3001      	adds	r0, #1
 8002518:	d023      	beq.n	8002562 <_printf_common+0xae>
 800251a:	6823      	ldr	r3, [r4, #0]
 800251c:	6922      	ldr	r2, [r4, #16]
 800251e:	f003 0306 	and.w	r3, r3, #6
 8002522:	2b04      	cmp	r3, #4
 8002524:	bf14      	ite	ne
 8002526:	2500      	movne	r5, #0
 8002528:	6833      	ldreq	r3, [r6, #0]
 800252a:	f04f 0600 	mov.w	r6, #0
 800252e:	bf08      	it	eq
 8002530:	68e5      	ldreq	r5, [r4, #12]
 8002532:	f104 041a 	add.w	r4, r4, #26
 8002536:	bf08      	it	eq
 8002538:	1aed      	subeq	r5, r5, r3
 800253a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800253e:	bf08      	it	eq
 8002540:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002544:	4293      	cmp	r3, r2
 8002546:	bfc4      	itt	gt
 8002548:	1a9b      	subgt	r3, r3, r2
 800254a:	18ed      	addgt	r5, r5, r3
 800254c:	42b5      	cmp	r5, r6
 800254e:	d11a      	bne.n	8002586 <_printf_common+0xd2>
 8002550:	2000      	movs	r0, #0
 8002552:	e008      	b.n	8002566 <_printf_common+0xb2>
 8002554:	2301      	movs	r3, #1
 8002556:	4652      	mov	r2, sl
 8002558:	4641      	mov	r1, r8
 800255a:	4638      	mov	r0, r7
 800255c:	47c8      	blx	r9
 800255e:	3001      	adds	r0, #1
 8002560:	d103      	bne.n	800256a <_printf_common+0xb6>
 8002562:	f04f 30ff 	mov.w	r0, #4294967295
 8002566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800256a:	3501      	adds	r5, #1
 800256c:	e7c1      	b.n	80024f2 <_printf_common+0x3e>
 800256e:	2030      	movs	r0, #48	@ 0x30
 8002570:	18e1      	adds	r1, r4, r3
 8002572:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002576:	1c5a      	adds	r2, r3, #1
 8002578:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800257c:	4422      	add	r2, r4
 800257e:	3302      	adds	r3, #2
 8002580:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002584:	e7c2      	b.n	800250c <_printf_common+0x58>
 8002586:	2301      	movs	r3, #1
 8002588:	4622      	mov	r2, r4
 800258a:	4641      	mov	r1, r8
 800258c:	4638      	mov	r0, r7
 800258e:	47c8      	blx	r9
 8002590:	3001      	adds	r0, #1
 8002592:	d0e6      	beq.n	8002562 <_printf_common+0xae>
 8002594:	3601      	adds	r6, #1
 8002596:	e7d9      	b.n	800254c <_printf_common+0x98>

08002598 <_printf_i>:
 8002598:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800259c:	7e0f      	ldrb	r7, [r1, #24]
 800259e:	4691      	mov	r9, r2
 80025a0:	2f78      	cmp	r7, #120	@ 0x78
 80025a2:	4680      	mov	r8, r0
 80025a4:	460c      	mov	r4, r1
 80025a6:	469a      	mov	sl, r3
 80025a8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80025aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80025ae:	d807      	bhi.n	80025c0 <_printf_i+0x28>
 80025b0:	2f62      	cmp	r7, #98	@ 0x62
 80025b2:	d80a      	bhi.n	80025ca <_printf_i+0x32>
 80025b4:	2f00      	cmp	r7, #0
 80025b6:	f000 80d3 	beq.w	8002760 <_printf_i+0x1c8>
 80025ba:	2f58      	cmp	r7, #88	@ 0x58
 80025bc:	f000 80ba 	beq.w	8002734 <_printf_i+0x19c>
 80025c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80025c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80025c8:	e03a      	b.n	8002640 <_printf_i+0xa8>
 80025ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80025ce:	2b15      	cmp	r3, #21
 80025d0:	d8f6      	bhi.n	80025c0 <_printf_i+0x28>
 80025d2:	a101      	add	r1, pc, #4	@ (adr r1, 80025d8 <_printf_i+0x40>)
 80025d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80025d8:	08002631 	.word	0x08002631
 80025dc:	08002645 	.word	0x08002645
 80025e0:	080025c1 	.word	0x080025c1
 80025e4:	080025c1 	.word	0x080025c1
 80025e8:	080025c1 	.word	0x080025c1
 80025ec:	080025c1 	.word	0x080025c1
 80025f0:	08002645 	.word	0x08002645
 80025f4:	080025c1 	.word	0x080025c1
 80025f8:	080025c1 	.word	0x080025c1
 80025fc:	080025c1 	.word	0x080025c1
 8002600:	080025c1 	.word	0x080025c1
 8002604:	08002747 	.word	0x08002747
 8002608:	0800266f 	.word	0x0800266f
 800260c:	08002701 	.word	0x08002701
 8002610:	080025c1 	.word	0x080025c1
 8002614:	080025c1 	.word	0x080025c1
 8002618:	08002769 	.word	0x08002769
 800261c:	080025c1 	.word	0x080025c1
 8002620:	0800266f 	.word	0x0800266f
 8002624:	080025c1 	.word	0x080025c1
 8002628:	080025c1 	.word	0x080025c1
 800262c:	08002709 	.word	0x08002709
 8002630:	6833      	ldr	r3, [r6, #0]
 8002632:	1d1a      	adds	r2, r3, #4
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	6032      	str	r2, [r6, #0]
 8002638:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800263c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002640:	2301      	movs	r3, #1
 8002642:	e09e      	b.n	8002782 <_printf_i+0x1ea>
 8002644:	6833      	ldr	r3, [r6, #0]
 8002646:	6820      	ldr	r0, [r4, #0]
 8002648:	1d19      	adds	r1, r3, #4
 800264a:	6031      	str	r1, [r6, #0]
 800264c:	0606      	lsls	r6, r0, #24
 800264e:	d501      	bpl.n	8002654 <_printf_i+0xbc>
 8002650:	681d      	ldr	r5, [r3, #0]
 8002652:	e003      	b.n	800265c <_printf_i+0xc4>
 8002654:	0645      	lsls	r5, r0, #25
 8002656:	d5fb      	bpl.n	8002650 <_printf_i+0xb8>
 8002658:	f9b3 5000 	ldrsh.w	r5, [r3]
 800265c:	2d00      	cmp	r5, #0
 800265e:	da03      	bge.n	8002668 <_printf_i+0xd0>
 8002660:	232d      	movs	r3, #45	@ 0x2d
 8002662:	426d      	negs	r5, r5
 8002664:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002668:	230a      	movs	r3, #10
 800266a:	4859      	ldr	r0, [pc, #356]	@ (80027d0 <_printf_i+0x238>)
 800266c:	e011      	b.n	8002692 <_printf_i+0xfa>
 800266e:	6821      	ldr	r1, [r4, #0]
 8002670:	6833      	ldr	r3, [r6, #0]
 8002672:	0608      	lsls	r0, r1, #24
 8002674:	f853 5b04 	ldr.w	r5, [r3], #4
 8002678:	d402      	bmi.n	8002680 <_printf_i+0xe8>
 800267a:	0649      	lsls	r1, r1, #25
 800267c:	bf48      	it	mi
 800267e:	b2ad      	uxthmi	r5, r5
 8002680:	2f6f      	cmp	r7, #111	@ 0x6f
 8002682:	6033      	str	r3, [r6, #0]
 8002684:	bf14      	ite	ne
 8002686:	230a      	movne	r3, #10
 8002688:	2308      	moveq	r3, #8
 800268a:	4851      	ldr	r0, [pc, #324]	@ (80027d0 <_printf_i+0x238>)
 800268c:	2100      	movs	r1, #0
 800268e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002692:	6866      	ldr	r6, [r4, #4]
 8002694:	2e00      	cmp	r6, #0
 8002696:	bfa8      	it	ge
 8002698:	6821      	ldrge	r1, [r4, #0]
 800269a:	60a6      	str	r6, [r4, #8]
 800269c:	bfa4      	itt	ge
 800269e:	f021 0104 	bicge.w	r1, r1, #4
 80026a2:	6021      	strge	r1, [r4, #0]
 80026a4:	b90d      	cbnz	r5, 80026aa <_printf_i+0x112>
 80026a6:	2e00      	cmp	r6, #0
 80026a8:	d04b      	beq.n	8002742 <_printf_i+0x1aa>
 80026aa:	4616      	mov	r6, r2
 80026ac:	fbb5 f1f3 	udiv	r1, r5, r3
 80026b0:	fb03 5711 	mls	r7, r3, r1, r5
 80026b4:	5dc7      	ldrb	r7, [r0, r7]
 80026b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80026ba:	462f      	mov	r7, r5
 80026bc:	42bb      	cmp	r3, r7
 80026be:	460d      	mov	r5, r1
 80026c0:	d9f4      	bls.n	80026ac <_printf_i+0x114>
 80026c2:	2b08      	cmp	r3, #8
 80026c4:	d10b      	bne.n	80026de <_printf_i+0x146>
 80026c6:	6823      	ldr	r3, [r4, #0]
 80026c8:	07df      	lsls	r7, r3, #31
 80026ca:	d508      	bpl.n	80026de <_printf_i+0x146>
 80026cc:	6923      	ldr	r3, [r4, #16]
 80026ce:	6861      	ldr	r1, [r4, #4]
 80026d0:	4299      	cmp	r1, r3
 80026d2:	bfde      	ittt	le
 80026d4:	2330      	movle	r3, #48	@ 0x30
 80026d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80026da:	f106 36ff 	addle.w	r6, r6, #4294967295
 80026de:	1b92      	subs	r2, r2, r6
 80026e0:	6122      	str	r2, [r4, #16]
 80026e2:	464b      	mov	r3, r9
 80026e4:	4621      	mov	r1, r4
 80026e6:	4640      	mov	r0, r8
 80026e8:	f8cd a000 	str.w	sl, [sp]
 80026ec:	aa03      	add	r2, sp, #12
 80026ee:	f7ff fee1 	bl	80024b4 <_printf_common>
 80026f2:	3001      	adds	r0, #1
 80026f4:	d14a      	bne.n	800278c <_printf_i+0x1f4>
 80026f6:	f04f 30ff 	mov.w	r0, #4294967295
 80026fa:	b004      	add	sp, #16
 80026fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002700:	6823      	ldr	r3, [r4, #0]
 8002702:	f043 0320 	orr.w	r3, r3, #32
 8002706:	6023      	str	r3, [r4, #0]
 8002708:	2778      	movs	r7, #120	@ 0x78
 800270a:	4832      	ldr	r0, [pc, #200]	@ (80027d4 <_printf_i+0x23c>)
 800270c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002710:	6823      	ldr	r3, [r4, #0]
 8002712:	6831      	ldr	r1, [r6, #0]
 8002714:	061f      	lsls	r7, r3, #24
 8002716:	f851 5b04 	ldr.w	r5, [r1], #4
 800271a:	d402      	bmi.n	8002722 <_printf_i+0x18a>
 800271c:	065f      	lsls	r7, r3, #25
 800271e:	bf48      	it	mi
 8002720:	b2ad      	uxthmi	r5, r5
 8002722:	6031      	str	r1, [r6, #0]
 8002724:	07d9      	lsls	r1, r3, #31
 8002726:	bf44      	itt	mi
 8002728:	f043 0320 	orrmi.w	r3, r3, #32
 800272c:	6023      	strmi	r3, [r4, #0]
 800272e:	b11d      	cbz	r5, 8002738 <_printf_i+0x1a0>
 8002730:	2310      	movs	r3, #16
 8002732:	e7ab      	b.n	800268c <_printf_i+0xf4>
 8002734:	4826      	ldr	r0, [pc, #152]	@ (80027d0 <_printf_i+0x238>)
 8002736:	e7e9      	b.n	800270c <_printf_i+0x174>
 8002738:	6823      	ldr	r3, [r4, #0]
 800273a:	f023 0320 	bic.w	r3, r3, #32
 800273e:	6023      	str	r3, [r4, #0]
 8002740:	e7f6      	b.n	8002730 <_printf_i+0x198>
 8002742:	4616      	mov	r6, r2
 8002744:	e7bd      	b.n	80026c2 <_printf_i+0x12a>
 8002746:	6833      	ldr	r3, [r6, #0]
 8002748:	6825      	ldr	r5, [r4, #0]
 800274a:	1d18      	adds	r0, r3, #4
 800274c:	6961      	ldr	r1, [r4, #20]
 800274e:	6030      	str	r0, [r6, #0]
 8002750:	062e      	lsls	r6, r5, #24
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	d501      	bpl.n	800275a <_printf_i+0x1c2>
 8002756:	6019      	str	r1, [r3, #0]
 8002758:	e002      	b.n	8002760 <_printf_i+0x1c8>
 800275a:	0668      	lsls	r0, r5, #25
 800275c:	d5fb      	bpl.n	8002756 <_printf_i+0x1be>
 800275e:	8019      	strh	r1, [r3, #0]
 8002760:	2300      	movs	r3, #0
 8002762:	4616      	mov	r6, r2
 8002764:	6123      	str	r3, [r4, #16]
 8002766:	e7bc      	b.n	80026e2 <_printf_i+0x14a>
 8002768:	6833      	ldr	r3, [r6, #0]
 800276a:	2100      	movs	r1, #0
 800276c:	1d1a      	adds	r2, r3, #4
 800276e:	6032      	str	r2, [r6, #0]
 8002770:	681e      	ldr	r6, [r3, #0]
 8002772:	6862      	ldr	r2, [r4, #4]
 8002774:	4630      	mov	r0, r6
 8002776:	f000 fbe4 	bl	8002f42 <memchr>
 800277a:	b108      	cbz	r0, 8002780 <_printf_i+0x1e8>
 800277c:	1b80      	subs	r0, r0, r6
 800277e:	6060      	str	r0, [r4, #4]
 8002780:	6863      	ldr	r3, [r4, #4]
 8002782:	6123      	str	r3, [r4, #16]
 8002784:	2300      	movs	r3, #0
 8002786:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800278a:	e7aa      	b.n	80026e2 <_printf_i+0x14a>
 800278c:	4632      	mov	r2, r6
 800278e:	4649      	mov	r1, r9
 8002790:	4640      	mov	r0, r8
 8002792:	6923      	ldr	r3, [r4, #16]
 8002794:	47d0      	blx	sl
 8002796:	3001      	adds	r0, #1
 8002798:	d0ad      	beq.n	80026f6 <_printf_i+0x15e>
 800279a:	6823      	ldr	r3, [r4, #0]
 800279c:	079b      	lsls	r3, r3, #30
 800279e:	d413      	bmi.n	80027c8 <_printf_i+0x230>
 80027a0:	68e0      	ldr	r0, [r4, #12]
 80027a2:	9b03      	ldr	r3, [sp, #12]
 80027a4:	4298      	cmp	r0, r3
 80027a6:	bfb8      	it	lt
 80027a8:	4618      	movlt	r0, r3
 80027aa:	e7a6      	b.n	80026fa <_printf_i+0x162>
 80027ac:	2301      	movs	r3, #1
 80027ae:	4632      	mov	r2, r6
 80027b0:	4649      	mov	r1, r9
 80027b2:	4640      	mov	r0, r8
 80027b4:	47d0      	blx	sl
 80027b6:	3001      	adds	r0, #1
 80027b8:	d09d      	beq.n	80026f6 <_printf_i+0x15e>
 80027ba:	3501      	adds	r5, #1
 80027bc:	68e3      	ldr	r3, [r4, #12]
 80027be:	9903      	ldr	r1, [sp, #12]
 80027c0:	1a5b      	subs	r3, r3, r1
 80027c2:	42ab      	cmp	r3, r5
 80027c4:	dcf2      	bgt.n	80027ac <_printf_i+0x214>
 80027c6:	e7eb      	b.n	80027a0 <_printf_i+0x208>
 80027c8:	2500      	movs	r5, #0
 80027ca:	f104 0619 	add.w	r6, r4, #25
 80027ce:	e7f5      	b.n	80027bc <_printf_i+0x224>
 80027d0:	08006624 	.word	0x08006624
 80027d4:	08006635 	.word	0x08006635

080027d8 <_scanf_float>:
 80027d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027dc:	b087      	sub	sp, #28
 80027de:	9303      	str	r3, [sp, #12]
 80027e0:	688b      	ldr	r3, [r1, #8]
 80027e2:	4617      	mov	r7, r2
 80027e4:	1e5a      	subs	r2, r3, #1
 80027e6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80027ea:	bf82      	ittt	hi
 80027ec:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80027f0:	eb03 0b05 	addhi.w	fp, r3, r5
 80027f4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80027f8:	460a      	mov	r2, r1
 80027fa:	f04f 0500 	mov.w	r5, #0
 80027fe:	bf88      	it	hi
 8002800:	608b      	strhi	r3, [r1, #8]
 8002802:	680b      	ldr	r3, [r1, #0]
 8002804:	4680      	mov	r8, r0
 8002806:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800280a:	f842 3b1c 	str.w	r3, [r2], #28
 800280e:	460c      	mov	r4, r1
 8002810:	bf98      	it	ls
 8002812:	f04f 0b00 	movls.w	fp, #0
 8002816:	4616      	mov	r6, r2
 8002818:	46aa      	mov	sl, r5
 800281a:	46a9      	mov	r9, r5
 800281c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8002820:	9201      	str	r2, [sp, #4]
 8002822:	9502      	str	r5, [sp, #8]
 8002824:	68a2      	ldr	r2, [r4, #8]
 8002826:	b152      	cbz	r2, 800283e <_scanf_float+0x66>
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	2b4e      	cmp	r3, #78	@ 0x4e
 800282e:	d865      	bhi.n	80028fc <_scanf_float+0x124>
 8002830:	2b40      	cmp	r3, #64	@ 0x40
 8002832:	d83d      	bhi.n	80028b0 <_scanf_float+0xd8>
 8002834:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8002838:	b2c8      	uxtb	r0, r1
 800283a:	280e      	cmp	r0, #14
 800283c:	d93b      	bls.n	80028b6 <_scanf_float+0xde>
 800283e:	f1b9 0f00 	cmp.w	r9, #0
 8002842:	d003      	beq.n	800284c <_scanf_float+0x74>
 8002844:	6823      	ldr	r3, [r4, #0]
 8002846:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800284a:	6023      	str	r3, [r4, #0]
 800284c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002850:	f1ba 0f01 	cmp.w	sl, #1
 8002854:	f200 8118 	bhi.w	8002a88 <_scanf_float+0x2b0>
 8002858:	9b01      	ldr	r3, [sp, #4]
 800285a:	429e      	cmp	r6, r3
 800285c:	f200 8109 	bhi.w	8002a72 <_scanf_float+0x29a>
 8002860:	2001      	movs	r0, #1
 8002862:	b007      	add	sp, #28
 8002864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002868:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800286c:	2a0d      	cmp	r2, #13
 800286e:	d8e6      	bhi.n	800283e <_scanf_float+0x66>
 8002870:	a101      	add	r1, pc, #4	@ (adr r1, 8002878 <_scanf_float+0xa0>)
 8002872:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8002876:	bf00      	nop
 8002878:	080029bf 	.word	0x080029bf
 800287c:	0800283f 	.word	0x0800283f
 8002880:	0800283f 	.word	0x0800283f
 8002884:	0800283f 	.word	0x0800283f
 8002888:	08002a1f 	.word	0x08002a1f
 800288c:	080029f7 	.word	0x080029f7
 8002890:	0800283f 	.word	0x0800283f
 8002894:	0800283f 	.word	0x0800283f
 8002898:	080029cd 	.word	0x080029cd
 800289c:	0800283f 	.word	0x0800283f
 80028a0:	0800283f 	.word	0x0800283f
 80028a4:	0800283f 	.word	0x0800283f
 80028a8:	0800283f 	.word	0x0800283f
 80028ac:	08002985 	.word	0x08002985
 80028b0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80028b4:	e7da      	b.n	800286c <_scanf_float+0x94>
 80028b6:	290e      	cmp	r1, #14
 80028b8:	d8c1      	bhi.n	800283e <_scanf_float+0x66>
 80028ba:	a001      	add	r0, pc, #4	@ (adr r0, 80028c0 <_scanf_float+0xe8>)
 80028bc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80028c0:	08002975 	.word	0x08002975
 80028c4:	0800283f 	.word	0x0800283f
 80028c8:	08002975 	.word	0x08002975
 80028cc:	08002a0b 	.word	0x08002a0b
 80028d0:	0800283f 	.word	0x0800283f
 80028d4:	0800291d 	.word	0x0800291d
 80028d8:	0800295b 	.word	0x0800295b
 80028dc:	0800295b 	.word	0x0800295b
 80028e0:	0800295b 	.word	0x0800295b
 80028e4:	0800295b 	.word	0x0800295b
 80028e8:	0800295b 	.word	0x0800295b
 80028ec:	0800295b 	.word	0x0800295b
 80028f0:	0800295b 	.word	0x0800295b
 80028f4:	0800295b 	.word	0x0800295b
 80028f8:	0800295b 	.word	0x0800295b
 80028fc:	2b6e      	cmp	r3, #110	@ 0x6e
 80028fe:	d809      	bhi.n	8002914 <_scanf_float+0x13c>
 8002900:	2b60      	cmp	r3, #96	@ 0x60
 8002902:	d8b1      	bhi.n	8002868 <_scanf_float+0x90>
 8002904:	2b54      	cmp	r3, #84	@ 0x54
 8002906:	d07b      	beq.n	8002a00 <_scanf_float+0x228>
 8002908:	2b59      	cmp	r3, #89	@ 0x59
 800290a:	d198      	bne.n	800283e <_scanf_float+0x66>
 800290c:	2d07      	cmp	r5, #7
 800290e:	d196      	bne.n	800283e <_scanf_float+0x66>
 8002910:	2508      	movs	r5, #8
 8002912:	e02c      	b.n	800296e <_scanf_float+0x196>
 8002914:	2b74      	cmp	r3, #116	@ 0x74
 8002916:	d073      	beq.n	8002a00 <_scanf_float+0x228>
 8002918:	2b79      	cmp	r3, #121	@ 0x79
 800291a:	e7f6      	b.n	800290a <_scanf_float+0x132>
 800291c:	6821      	ldr	r1, [r4, #0]
 800291e:	05c8      	lsls	r0, r1, #23
 8002920:	d51b      	bpl.n	800295a <_scanf_float+0x182>
 8002922:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8002926:	6021      	str	r1, [r4, #0]
 8002928:	f109 0901 	add.w	r9, r9, #1
 800292c:	f1bb 0f00 	cmp.w	fp, #0
 8002930:	d003      	beq.n	800293a <_scanf_float+0x162>
 8002932:	3201      	adds	r2, #1
 8002934:	f10b 3bff 	add.w	fp, fp, #4294967295
 8002938:	60a2      	str	r2, [r4, #8]
 800293a:	68a3      	ldr	r3, [r4, #8]
 800293c:	3b01      	subs	r3, #1
 800293e:	60a3      	str	r3, [r4, #8]
 8002940:	6923      	ldr	r3, [r4, #16]
 8002942:	3301      	adds	r3, #1
 8002944:	6123      	str	r3, [r4, #16]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	3b01      	subs	r3, #1
 800294a:	2b00      	cmp	r3, #0
 800294c:	607b      	str	r3, [r7, #4]
 800294e:	f340 8087 	ble.w	8002a60 <_scanf_float+0x288>
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	3301      	adds	r3, #1
 8002956:	603b      	str	r3, [r7, #0]
 8002958:	e764      	b.n	8002824 <_scanf_float+0x4c>
 800295a:	eb1a 0105 	adds.w	r1, sl, r5
 800295e:	f47f af6e 	bne.w	800283e <_scanf_float+0x66>
 8002962:	460d      	mov	r5, r1
 8002964:	468a      	mov	sl, r1
 8002966:	6822      	ldr	r2, [r4, #0]
 8002968:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800296c:	6022      	str	r2, [r4, #0]
 800296e:	f806 3b01 	strb.w	r3, [r6], #1
 8002972:	e7e2      	b.n	800293a <_scanf_float+0x162>
 8002974:	6822      	ldr	r2, [r4, #0]
 8002976:	0610      	lsls	r0, r2, #24
 8002978:	f57f af61 	bpl.w	800283e <_scanf_float+0x66>
 800297c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002980:	6022      	str	r2, [r4, #0]
 8002982:	e7f4      	b.n	800296e <_scanf_float+0x196>
 8002984:	f1ba 0f00 	cmp.w	sl, #0
 8002988:	d10e      	bne.n	80029a8 <_scanf_float+0x1d0>
 800298a:	f1b9 0f00 	cmp.w	r9, #0
 800298e:	d10e      	bne.n	80029ae <_scanf_float+0x1d6>
 8002990:	6822      	ldr	r2, [r4, #0]
 8002992:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8002996:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800299a:	d108      	bne.n	80029ae <_scanf_float+0x1d6>
 800299c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80029a0:	f04f 0a01 	mov.w	sl, #1
 80029a4:	6022      	str	r2, [r4, #0]
 80029a6:	e7e2      	b.n	800296e <_scanf_float+0x196>
 80029a8:	f1ba 0f02 	cmp.w	sl, #2
 80029ac:	d055      	beq.n	8002a5a <_scanf_float+0x282>
 80029ae:	2d01      	cmp	r5, #1
 80029b0:	d002      	beq.n	80029b8 <_scanf_float+0x1e0>
 80029b2:	2d04      	cmp	r5, #4
 80029b4:	f47f af43 	bne.w	800283e <_scanf_float+0x66>
 80029b8:	3501      	adds	r5, #1
 80029ba:	b2ed      	uxtb	r5, r5
 80029bc:	e7d7      	b.n	800296e <_scanf_float+0x196>
 80029be:	f1ba 0f01 	cmp.w	sl, #1
 80029c2:	f47f af3c 	bne.w	800283e <_scanf_float+0x66>
 80029c6:	f04f 0a02 	mov.w	sl, #2
 80029ca:	e7d0      	b.n	800296e <_scanf_float+0x196>
 80029cc:	b97d      	cbnz	r5, 80029ee <_scanf_float+0x216>
 80029ce:	f1b9 0f00 	cmp.w	r9, #0
 80029d2:	f47f af37 	bne.w	8002844 <_scanf_float+0x6c>
 80029d6:	6822      	ldr	r2, [r4, #0]
 80029d8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80029dc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80029e0:	f040 8103 	bne.w	8002bea <_scanf_float+0x412>
 80029e4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80029e8:	2501      	movs	r5, #1
 80029ea:	6022      	str	r2, [r4, #0]
 80029ec:	e7bf      	b.n	800296e <_scanf_float+0x196>
 80029ee:	2d03      	cmp	r5, #3
 80029f0:	d0e2      	beq.n	80029b8 <_scanf_float+0x1e0>
 80029f2:	2d05      	cmp	r5, #5
 80029f4:	e7de      	b.n	80029b4 <_scanf_float+0x1dc>
 80029f6:	2d02      	cmp	r5, #2
 80029f8:	f47f af21 	bne.w	800283e <_scanf_float+0x66>
 80029fc:	2503      	movs	r5, #3
 80029fe:	e7b6      	b.n	800296e <_scanf_float+0x196>
 8002a00:	2d06      	cmp	r5, #6
 8002a02:	f47f af1c 	bne.w	800283e <_scanf_float+0x66>
 8002a06:	2507      	movs	r5, #7
 8002a08:	e7b1      	b.n	800296e <_scanf_float+0x196>
 8002a0a:	6822      	ldr	r2, [r4, #0]
 8002a0c:	0591      	lsls	r1, r2, #22
 8002a0e:	f57f af16 	bpl.w	800283e <_scanf_float+0x66>
 8002a12:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8002a16:	6022      	str	r2, [r4, #0]
 8002a18:	f8cd 9008 	str.w	r9, [sp, #8]
 8002a1c:	e7a7      	b.n	800296e <_scanf_float+0x196>
 8002a1e:	6822      	ldr	r2, [r4, #0]
 8002a20:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8002a24:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8002a28:	d006      	beq.n	8002a38 <_scanf_float+0x260>
 8002a2a:	0550      	lsls	r0, r2, #21
 8002a2c:	f57f af07 	bpl.w	800283e <_scanf_float+0x66>
 8002a30:	f1b9 0f00 	cmp.w	r9, #0
 8002a34:	f000 80d9 	beq.w	8002bea <_scanf_float+0x412>
 8002a38:	0591      	lsls	r1, r2, #22
 8002a3a:	bf58      	it	pl
 8002a3c:	9902      	ldrpl	r1, [sp, #8]
 8002a3e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8002a42:	bf58      	it	pl
 8002a44:	eba9 0101 	subpl.w	r1, r9, r1
 8002a48:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8002a4c:	f04f 0900 	mov.w	r9, #0
 8002a50:	bf58      	it	pl
 8002a52:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8002a56:	6022      	str	r2, [r4, #0]
 8002a58:	e789      	b.n	800296e <_scanf_float+0x196>
 8002a5a:	f04f 0a03 	mov.w	sl, #3
 8002a5e:	e786      	b.n	800296e <_scanf_float+0x196>
 8002a60:	4639      	mov	r1, r7
 8002a62:	4640      	mov	r0, r8
 8002a64:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8002a68:	4798      	blx	r3
 8002a6a:	2800      	cmp	r0, #0
 8002a6c:	f43f aeda 	beq.w	8002824 <_scanf_float+0x4c>
 8002a70:	e6e5      	b.n	800283e <_scanf_float+0x66>
 8002a72:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8002a76:	463a      	mov	r2, r7
 8002a78:	4640      	mov	r0, r8
 8002a7a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8002a7e:	4798      	blx	r3
 8002a80:	6923      	ldr	r3, [r4, #16]
 8002a82:	3b01      	subs	r3, #1
 8002a84:	6123      	str	r3, [r4, #16]
 8002a86:	e6e7      	b.n	8002858 <_scanf_float+0x80>
 8002a88:	1e6b      	subs	r3, r5, #1
 8002a8a:	2b06      	cmp	r3, #6
 8002a8c:	d824      	bhi.n	8002ad8 <_scanf_float+0x300>
 8002a8e:	2d02      	cmp	r5, #2
 8002a90:	d836      	bhi.n	8002b00 <_scanf_float+0x328>
 8002a92:	9b01      	ldr	r3, [sp, #4]
 8002a94:	429e      	cmp	r6, r3
 8002a96:	f67f aee3 	bls.w	8002860 <_scanf_float+0x88>
 8002a9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8002a9e:	463a      	mov	r2, r7
 8002aa0:	4640      	mov	r0, r8
 8002aa2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8002aa6:	4798      	blx	r3
 8002aa8:	6923      	ldr	r3, [r4, #16]
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	6123      	str	r3, [r4, #16]
 8002aae:	e7f0      	b.n	8002a92 <_scanf_float+0x2ba>
 8002ab0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8002ab4:	463a      	mov	r2, r7
 8002ab6:	4640      	mov	r0, r8
 8002ab8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8002abc:	4798      	blx	r3
 8002abe:	6923      	ldr	r3, [r4, #16]
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	6123      	str	r3, [r4, #16]
 8002ac4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002ac8:	fa5f fa8a 	uxtb.w	sl, sl
 8002acc:	f1ba 0f02 	cmp.w	sl, #2
 8002ad0:	d1ee      	bne.n	8002ab0 <_scanf_float+0x2d8>
 8002ad2:	3d03      	subs	r5, #3
 8002ad4:	b2ed      	uxtb	r5, r5
 8002ad6:	1b76      	subs	r6, r6, r5
 8002ad8:	6823      	ldr	r3, [r4, #0]
 8002ada:	05da      	lsls	r2, r3, #23
 8002adc:	d530      	bpl.n	8002b40 <_scanf_float+0x368>
 8002ade:	055b      	lsls	r3, r3, #21
 8002ae0:	d511      	bpl.n	8002b06 <_scanf_float+0x32e>
 8002ae2:	9b01      	ldr	r3, [sp, #4]
 8002ae4:	429e      	cmp	r6, r3
 8002ae6:	f67f aebb 	bls.w	8002860 <_scanf_float+0x88>
 8002aea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8002aee:	463a      	mov	r2, r7
 8002af0:	4640      	mov	r0, r8
 8002af2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8002af6:	4798      	blx	r3
 8002af8:	6923      	ldr	r3, [r4, #16]
 8002afa:	3b01      	subs	r3, #1
 8002afc:	6123      	str	r3, [r4, #16]
 8002afe:	e7f0      	b.n	8002ae2 <_scanf_float+0x30a>
 8002b00:	46aa      	mov	sl, r5
 8002b02:	46b3      	mov	fp, r6
 8002b04:	e7de      	b.n	8002ac4 <_scanf_float+0x2ec>
 8002b06:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8002b0a:	6923      	ldr	r3, [r4, #16]
 8002b0c:	2965      	cmp	r1, #101	@ 0x65
 8002b0e:	f103 33ff 	add.w	r3, r3, #4294967295
 8002b12:	f106 35ff 	add.w	r5, r6, #4294967295
 8002b16:	6123      	str	r3, [r4, #16]
 8002b18:	d00c      	beq.n	8002b34 <_scanf_float+0x35c>
 8002b1a:	2945      	cmp	r1, #69	@ 0x45
 8002b1c:	d00a      	beq.n	8002b34 <_scanf_float+0x35c>
 8002b1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8002b22:	463a      	mov	r2, r7
 8002b24:	4640      	mov	r0, r8
 8002b26:	4798      	blx	r3
 8002b28:	6923      	ldr	r3, [r4, #16]
 8002b2a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	1eb5      	subs	r5, r6, #2
 8002b32:	6123      	str	r3, [r4, #16]
 8002b34:	463a      	mov	r2, r7
 8002b36:	4640      	mov	r0, r8
 8002b38:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8002b3c:	4798      	blx	r3
 8002b3e:	462e      	mov	r6, r5
 8002b40:	6822      	ldr	r2, [r4, #0]
 8002b42:	f012 0210 	ands.w	r2, r2, #16
 8002b46:	d001      	beq.n	8002b4c <_scanf_float+0x374>
 8002b48:	2000      	movs	r0, #0
 8002b4a:	e68a      	b.n	8002862 <_scanf_float+0x8a>
 8002b4c:	7032      	strb	r2, [r6, #0]
 8002b4e:	6823      	ldr	r3, [r4, #0]
 8002b50:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002b54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b58:	d11c      	bne.n	8002b94 <_scanf_float+0x3bc>
 8002b5a:	9b02      	ldr	r3, [sp, #8]
 8002b5c:	454b      	cmp	r3, r9
 8002b5e:	eba3 0209 	sub.w	r2, r3, r9
 8002b62:	d123      	bne.n	8002bac <_scanf_float+0x3d4>
 8002b64:	2200      	movs	r2, #0
 8002b66:	4640      	mov	r0, r8
 8002b68:	9901      	ldr	r1, [sp, #4]
 8002b6a:	f002 fbed 	bl	8005348 <_strtod_r>
 8002b6e:	9b03      	ldr	r3, [sp, #12]
 8002b70:	6825      	ldr	r5, [r4, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f015 0f02 	tst.w	r5, #2
 8002b78:	4606      	mov	r6, r0
 8002b7a:	460f      	mov	r7, r1
 8002b7c:	f103 0204 	add.w	r2, r3, #4
 8002b80:	d01f      	beq.n	8002bc2 <_scanf_float+0x3ea>
 8002b82:	9903      	ldr	r1, [sp, #12]
 8002b84:	600a      	str	r2, [r1, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	e9c3 6700 	strd	r6, r7, [r3]
 8002b8c:	68e3      	ldr	r3, [r4, #12]
 8002b8e:	3301      	adds	r3, #1
 8002b90:	60e3      	str	r3, [r4, #12]
 8002b92:	e7d9      	b.n	8002b48 <_scanf_float+0x370>
 8002b94:	9b04      	ldr	r3, [sp, #16]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d0e4      	beq.n	8002b64 <_scanf_float+0x38c>
 8002b9a:	9905      	ldr	r1, [sp, #20]
 8002b9c:	230a      	movs	r3, #10
 8002b9e:	4640      	mov	r0, r8
 8002ba0:	3101      	adds	r1, #1
 8002ba2:	f002 fc51 	bl	8005448 <_strtol_r>
 8002ba6:	9b04      	ldr	r3, [sp, #16]
 8002ba8:	9e05      	ldr	r6, [sp, #20]
 8002baa:	1ac2      	subs	r2, r0, r3
 8002bac:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8002bb0:	429e      	cmp	r6, r3
 8002bb2:	bf28      	it	cs
 8002bb4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8002bb8:	4630      	mov	r0, r6
 8002bba:	490d      	ldr	r1, [pc, #52]	@ (8002bf0 <_scanf_float+0x418>)
 8002bbc:	f000 f8de 	bl	8002d7c <siprintf>
 8002bc0:	e7d0      	b.n	8002b64 <_scanf_float+0x38c>
 8002bc2:	076d      	lsls	r5, r5, #29
 8002bc4:	d4dd      	bmi.n	8002b82 <_scanf_float+0x3aa>
 8002bc6:	9d03      	ldr	r5, [sp, #12]
 8002bc8:	602a      	str	r2, [r5, #0]
 8002bca:	681d      	ldr	r5, [r3, #0]
 8002bcc:	4602      	mov	r2, r0
 8002bce:	460b      	mov	r3, r1
 8002bd0:	f7fd ff1c 	bl	8000a0c <__aeabi_dcmpun>
 8002bd4:	b120      	cbz	r0, 8002be0 <_scanf_float+0x408>
 8002bd6:	4807      	ldr	r0, [pc, #28]	@ (8002bf4 <_scanf_float+0x41c>)
 8002bd8:	f000 f9c2 	bl	8002f60 <nanf>
 8002bdc:	6028      	str	r0, [r5, #0]
 8002bde:	e7d5      	b.n	8002b8c <_scanf_float+0x3b4>
 8002be0:	4630      	mov	r0, r6
 8002be2:	4639      	mov	r1, r7
 8002be4:	f7fd ff70 	bl	8000ac8 <__aeabi_d2f>
 8002be8:	e7f8      	b.n	8002bdc <_scanf_float+0x404>
 8002bea:	f04f 0900 	mov.w	r9, #0
 8002bee:	e62d      	b.n	800284c <_scanf_float+0x74>
 8002bf0:	08006646 	.word	0x08006646
 8002bf4:	080069dd 	.word	0x080069dd

08002bf8 <std>:
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	b510      	push	{r4, lr}
 8002bfc:	4604      	mov	r4, r0
 8002bfe:	e9c0 3300 	strd	r3, r3, [r0]
 8002c02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002c06:	6083      	str	r3, [r0, #8]
 8002c08:	8181      	strh	r1, [r0, #12]
 8002c0a:	6643      	str	r3, [r0, #100]	@ 0x64
 8002c0c:	81c2      	strh	r2, [r0, #14]
 8002c0e:	6183      	str	r3, [r0, #24]
 8002c10:	4619      	mov	r1, r3
 8002c12:	2208      	movs	r2, #8
 8002c14:	305c      	adds	r0, #92	@ 0x5c
 8002c16:	f000 f914 	bl	8002e42 <memset>
 8002c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002c50 <std+0x58>)
 8002c1c:	6224      	str	r4, [r4, #32]
 8002c1e:	6263      	str	r3, [r4, #36]	@ 0x24
 8002c20:	4b0c      	ldr	r3, [pc, #48]	@ (8002c54 <std+0x5c>)
 8002c22:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002c24:	4b0c      	ldr	r3, [pc, #48]	@ (8002c58 <std+0x60>)
 8002c26:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002c28:	4b0c      	ldr	r3, [pc, #48]	@ (8002c5c <std+0x64>)
 8002c2a:	6323      	str	r3, [r4, #48]	@ 0x30
 8002c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c60 <std+0x68>)
 8002c2e:	429c      	cmp	r4, r3
 8002c30:	d006      	beq.n	8002c40 <std+0x48>
 8002c32:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002c36:	4294      	cmp	r4, r2
 8002c38:	d002      	beq.n	8002c40 <std+0x48>
 8002c3a:	33d0      	adds	r3, #208	@ 0xd0
 8002c3c:	429c      	cmp	r4, r3
 8002c3e:	d105      	bne.n	8002c4c <std+0x54>
 8002c40:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c48:	f000 b978 	b.w	8002f3c <__retarget_lock_init_recursive>
 8002c4c:	bd10      	pop	{r4, pc}
 8002c4e:	bf00      	nop
 8002c50:	08002dbd 	.word	0x08002dbd
 8002c54:	08002ddf 	.word	0x08002ddf
 8002c58:	08002e17 	.word	0x08002e17
 8002c5c:	08002e3b 	.word	0x08002e3b
 8002c60:	200001f8 	.word	0x200001f8

08002c64 <stdio_exit_handler>:
 8002c64:	4a02      	ldr	r2, [pc, #8]	@ (8002c70 <stdio_exit_handler+0xc>)
 8002c66:	4903      	ldr	r1, [pc, #12]	@ (8002c74 <stdio_exit_handler+0x10>)
 8002c68:	4803      	ldr	r0, [pc, #12]	@ (8002c78 <stdio_exit_handler+0x14>)
 8002c6a:	f000 b869 	b.w	8002d40 <_fwalk_sglue>
 8002c6e:	bf00      	nop
 8002c70:	2000000c 	.word	0x2000000c
 8002c74:	080057fd 	.word	0x080057fd
 8002c78:	2000001c 	.word	0x2000001c

08002c7c <cleanup_stdio>:
 8002c7c:	6841      	ldr	r1, [r0, #4]
 8002c7e:	4b0c      	ldr	r3, [pc, #48]	@ (8002cb0 <cleanup_stdio+0x34>)
 8002c80:	b510      	push	{r4, lr}
 8002c82:	4299      	cmp	r1, r3
 8002c84:	4604      	mov	r4, r0
 8002c86:	d001      	beq.n	8002c8c <cleanup_stdio+0x10>
 8002c88:	f002 fdb8 	bl	80057fc <_fflush_r>
 8002c8c:	68a1      	ldr	r1, [r4, #8]
 8002c8e:	4b09      	ldr	r3, [pc, #36]	@ (8002cb4 <cleanup_stdio+0x38>)
 8002c90:	4299      	cmp	r1, r3
 8002c92:	d002      	beq.n	8002c9a <cleanup_stdio+0x1e>
 8002c94:	4620      	mov	r0, r4
 8002c96:	f002 fdb1 	bl	80057fc <_fflush_r>
 8002c9a:	68e1      	ldr	r1, [r4, #12]
 8002c9c:	4b06      	ldr	r3, [pc, #24]	@ (8002cb8 <cleanup_stdio+0x3c>)
 8002c9e:	4299      	cmp	r1, r3
 8002ca0:	d004      	beq.n	8002cac <cleanup_stdio+0x30>
 8002ca2:	4620      	mov	r0, r4
 8002ca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ca8:	f002 bda8 	b.w	80057fc <_fflush_r>
 8002cac:	bd10      	pop	{r4, pc}
 8002cae:	bf00      	nop
 8002cb0:	200001f8 	.word	0x200001f8
 8002cb4:	20000260 	.word	0x20000260
 8002cb8:	200002c8 	.word	0x200002c8

08002cbc <global_stdio_init.part.0>:
 8002cbc:	b510      	push	{r4, lr}
 8002cbe:	4b0b      	ldr	r3, [pc, #44]	@ (8002cec <global_stdio_init.part.0+0x30>)
 8002cc0:	4c0b      	ldr	r4, [pc, #44]	@ (8002cf0 <global_stdio_init.part.0+0x34>)
 8002cc2:	4a0c      	ldr	r2, [pc, #48]	@ (8002cf4 <global_stdio_init.part.0+0x38>)
 8002cc4:	4620      	mov	r0, r4
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	2104      	movs	r1, #4
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f7ff ff94 	bl	8002bf8 <std>
 8002cd0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	2109      	movs	r1, #9
 8002cd8:	f7ff ff8e 	bl	8002bf8 <std>
 8002cdc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002ce0:	2202      	movs	r2, #2
 8002ce2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ce6:	2112      	movs	r1, #18
 8002ce8:	f7ff bf86 	b.w	8002bf8 <std>
 8002cec:	20000330 	.word	0x20000330
 8002cf0:	200001f8 	.word	0x200001f8
 8002cf4:	08002c65 	.word	0x08002c65

08002cf8 <__sfp_lock_acquire>:
 8002cf8:	4801      	ldr	r0, [pc, #4]	@ (8002d00 <__sfp_lock_acquire+0x8>)
 8002cfa:	f000 b920 	b.w	8002f3e <__retarget_lock_acquire_recursive>
 8002cfe:	bf00      	nop
 8002d00:	20000339 	.word	0x20000339

08002d04 <__sfp_lock_release>:
 8002d04:	4801      	ldr	r0, [pc, #4]	@ (8002d0c <__sfp_lock_release+0x8>)
 8002d06:	f000 b91b 	b.w	8002f40 <__retarget_lock_release_recursive>
 8002d0a:	bf00      	nop
 8002d0c:	20000339 	.word	0x20000339

08002d10 <__sinit>:
 8002d10:	b510      	push	{r4, lr}
 8002d12:	4604      	mov	r4, r0
 8002d14:	f7ff fff0 	bl	8002cf8 <__sfp_lock_acquire>
 8002d18:	6a23      	ldr	r3, [r4, #32]
 8002d1a:	b11b      	cbz	r3, 8002d24 <__sinit+0x14>
 8002d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d20:	f7ff bff0 	b.w	8002d04 <__sfp_lock_release>
 8002d24:	4b04      	ldr	r3, [pc, #16]	@ (8002d38 <__sinit+0x28>)
 8002d26:	6223      	str	r3, [r4, #32]
 8002d28:	4b04      	ldr	r3, [pc, #16]	@ (8002d3c <__sinit+0x2c>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1f5      	bne.n	8002d1c <__sinit+0xc>
 8002d30:	f7ff ffc4 	bl	8002cbc <global_stdio_init.part.0>
 8002d34:	e7f2      	b.n	8002d1c <__sinit+0xc>
 8002d36:	bf00      	nop
 8002d38:	08002c7d 	.word	0x08002c7d
 8002d3c:	20000330 	.word	0x20000330

08002d40 <_fwalk_sglue>:
 8002d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d44:	4607      	mov	r7, r0
 8002d46:	4688      	mov	r8, r1
 8002d48:	4614      	mov	r4, r2
 8002d4a:	2600      	movs	r6, #0
 8002d4c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002d50:	f1b9 0901 	subs.w	r9, r9, #1
 8002d54:	d505      	bpl.n	8002d62 <_fwalk_sglue+0x22>
 8002d56:	6824      	ldr	r4, [r4, #0]
 8002d58:	2c00      	cmp	r4, #0
 8002d5a:	d1f7      	bne.n	8002d4c <_fwalk_sglue+0xc>
 8002d5c:	4630      	mov	r0, r6
 8002d5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d62:	89ab      	ldrh	r3, [r5, #12]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d907      	bls.n	8002d78 <_fwalk_sglue+0x38>
 8002d68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	d003      	beq.n	8002d78 <_fwalk_sglue+0x38>
 8002d70:	4629      	mov	r1, r5
 8002d72:	4638      	mov	r0, r7
 8002d74:	47c0      	blx	r8
 8002d76:	4306      	orrs	r6, r0
 8002d78:	3568      	adds	r5, #104	@ 0x68
 8002d7a:	e7e9      	b.n	8002d50 <_fwalk_sglue+0x10>

08002d7c <siprintf>:
 8002d7c:	b40e      	push	{r1, r2, r3}
 8002d7e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002d82:	b500      	push	{lr}
 8002d84:	b09c      	sub	sp, #112	@ 0x70
 8002d86:	ab1d      	add	r3, sp, #116	@ 0x74
 8002d88:	9002      	str	r0, [sp, #8]
 8002d8a:	9006      	str	r0, [sp, #24]
 8002d8c:	9107      	str	r1, [sp, #28]
 8002d8e:	9104      	str	r1, [sp, #16]
 8002d90:	4808      	ldr	r0, [pc, #32]	@ (8002db4 <siprintf+0x38>)
 8002d92:	4909      	ldr	r1, [pc, #36]	@ (8002db8 <siprintf+0x3c>)
 8002d94:	f853 2b04 	ldr.w	r2, [r3], #4
 8002d98:	9105      	str	r1, [sp, #20]
 8002d9a:	6800      	ldr	r0, [r0, #0]
 8002d9c:	a902      	add	r1, sp, #8
 8002d9e:	9301      	str	r3, [sp, #4]
 8002da0:	f002 fbb0 	bl	8005504 <_svfiprintf_r>
 8002da4:	2200      	movs	r2, #0
 8002da6:	9b02      	ldr	r3, [sp, #8]
 8002da8:	701a      	strb	r2, [r3, #0]
 8002daa:	b01c      	add	sp, #112	@ 0x70
 8002dac:	f85d eb04 	ldr.w	lr, [sp], #4
 8002db0:	b003      	add	sp, #12
 8002db2:	4770      	bx	lr
 8002db4:	20000018 	.word	0x20000018
 8002db8:	ffff0208 	.word	0xffff0208

08002dbc <__sread>:
 8002dbc:	b510      	push	{r4, lr}
 8002dbe:	460c      	mov	r4, r1
 8002dc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002dc4:	f000 f86c 	bl	8002ea0 <_read_r>
 8002dc8:	2800      	cmp	r0, #0
 8002dca:	bfab      	itete	ge
 8002dcc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002dce:	89a3      	ldrhlt	r3, [r4, #12]
 8002dd0:	181b      	addge	r3, r3, r0
 8002dd2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002dd6:	bfac      	ite	ge
 8002dd8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002dda:	81a3      	strhlt	r3, [r4, #12]
 8002ddc:	bd10      	pop	{r4, pc}

08002dde <__swrite>:
 8002dde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002de2:	461f      	mov	r7, r3
 8002de4:	898b      	ldrh	r3, [r1, #12]
 8002de6:	4605      	mov	r5, r0
 8002de8:	05db      	lsls	r3, r3, #23
 8002dea:	460c      	mov	r4, r1
 8002dec:	4616      	mov	r6, r2
 8002dee:	d505      	bpl.n	8002dfc <__swrite+0x1e>
 8002df0:	2302      	movs	r3, #2
 8002df2:	2200      	movs	r2, #0
 8002df4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002df8:	f000 f840 	bl	8002e7c <_lseek_r>
 8002dfc:	89a3      	ldrh	r3, [r4, #12]
 8002dfe:	4632      	mov	r2, r6
 8002e00:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002e04:	81a3      	strh	r3, [r4, #12]
 8002e06:	4628      	mov	r0, r5
 8002e08:	463b      	mov	r3, r7
 8002e0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002e0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002e12:	f000 b857 	b.w	8002ec4 <_write_r>

08002e16 <__sseek>:
 8002e16:	b510      	push	{r4, lr}
 8002e18:	460c      	mov	r4, r1
 8002e1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e1e:	f000 f82d 	bl	8002e7c <_lseek_r>
 8002e22:	1c43      	adds	r3, r0, #1
 8002e24:	89a3      	ldrh	r3, [r4, #12]
 8002e26:	bf15      	itete	ne
 8002e28:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002e2a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002e2e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002e32:	81a3      	strheq	r3, [r4, #12]
 8002e34:	bf18      	it	ne
 8002e36:	81a3      	strhne	r3, [r4, #12]
 8002e38:	bd10      	pop	{r4, pc}

08002e3a <__sclose>:
 8002e3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e3e:	f000 b80d 	b.w	8002e5c <_close_r>

08002e42 <memset>:
 8002e42:	4603      	mov	r3, r0
 8002e44:	4402      	add	r2, r0
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d100      	bne.n	8002e4c <memset+0xa>
 8002e4a:	4770      	bx	lr
 8002e4c:	f803 1b01 	strb.w	r1, [r3], #1
 8002e50:	e7f9      	b.n	8002e46 <memset+0x4>
	...

08002e54 <_localeconv_r>:
 8002e54:	4800      	ldr	r0, [pc, #0]	@ (8002e58 <_localeconv_r+0x4>)
 8002e56:	4770      	bx	lr
 8002e58:	20000158 	.word	0x20000158

08002e5c <_close_r>:
 8002e5c:	b538      	push	{r3, r4, r5, lr}
 8002e5e:	2300      	movs	r3, #0
 8002e60:	4d05      	ldr	r5, [pc, #20]	@ (8002e78 <_close_r+0x1c>)
 8002e62:	4604      	mov	r4, r0
 8002e64:	4608      	mov	r0, r1
 8002e66:	602b      	str	r3, [r5, #0]
 8002e68:	f7fe f8f7 	bl	800105a <_close>
 8002e6c:	1c43      	adds	r3, r0, #1
 8002e6e:	d102      	bne.n	8002e76 <_close_r+0x1a>
 8002e70:	682b      	ldr	r3, [r5, #0]
 8002e72:	b103      	cbz	r3, 8002e76 <_close_r+0x1a>
 8002e74:	6023      	str	r3, [r4, #0]
 8002e76:	bd38      	pop	{r3, r4, r5, pc}
 8002e78:	20000334 	.word	0x20000334

08002e7c <_lseek_r>:
 8002e7c:	b538      	push	{r3, r4, r5, lr}
 8002e7e:	4604      	mov	r4, r0
 8002e80:	4608      	mov	r0, r1
 8002e82:	4611      	mov	r1, r2
 8002e84:	2200      	movs	r2, #0
 8002e86:	4d05      	ldr	r5, [pc, #20]	@ (8002e9c <_lseek_r+0x20>)
 8002e88:	602a      	str	r2, [r5, #0]
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	f7fe f909 	bl	80010a2 <_lseek>
 8002e90:	1c43      	adds	r3, r0, #1
 8002e92:	d102      	bne.n	8002e9a <_lseek_r+0x1e>
 8002e94:	682b      	ldr	r3, [r5, #0]
 8002e96:	b103      	cbz	r3, 8002e9a <_lseek_r+0x1e>
 8002e98:	6023      	str	r3, [r4, #0]
 8002e9a:	bd38      	pop	{r3, r4, r5, pc}
 8002e9c:	20000334 	.word	0x20000334

08002ea0 <_read_r>:
 8002ea0:	b538      	push	{r3, r4, r5, lr}
 8002ea2:	4604      	mov	r4, r0
 8002ea4:	4608      	mov	r0, r1
 8002ea6:	4611      	mov	r1, r2
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	4d05      	ldr	r5, [pc, #20]	@ (8002ec0 <_read_r+0x20>)
 8002eac:	602a      	str	r2, [r5, #0]
 8002eae:	461a      	mov	r2, r3
 8002eb0:	f7fe f89a 	bl	8000fe8 <_read>
 8002eb4:	1c43      	adds	r3, r0, #1
 8002eb6:	d102      	bne.n	8002ebe <_read_r+0x1e>
 8002eb8:	682b      	ldr	r3, [r5, #0]
 8002eba:	b103      	cbz	r3, 8002ebe <_read_r+0x1e>
 8002ebc:	6023      	str	r3, [r4, #0]
 8002ebe:	bd38      	pop	{r3, r4, r5, pc}
 8002ec0:	20000334 	.word	0x20000334

08002ec4 <_write_r>:
 8002ec4:	b538      	push	{r3, r4, r5, lr}
 8002ec6:	4604      	mov	r4, r0
 8002ec8:	4608      	mov	r0, r1
 8002eca:	4611      	mov	r1, r2
 8002ecc:	2200      	movs	r2, #0
 8002ece:	4d05      	ldr	r5, [pc, #20]	@ (8002ee4 <_write_r+0x20>)
 8002ed0:	602a      	str	r2, [r5, #0]
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	f7fe f8a5 	bl	8001022 <_write>
 8002ed8:	1c43      	adds	r3, r0, #1
 8002eda:	d102      	bne.n	8002ee2 <_write_r+0x1e>
 8002edc:	682b      	ldr	r3, [r5, #0]
 8002ede:	b103      	cbz	r3, 8002ee2 <_write_r+0x1e>
 8002ee0:	6023      	str	r3, [r4, #0]
 8002ee2:	bd38      	pop	{r3, r4, r5, pc}
 8002ee4:	20000334 	.word	0x20000334

08002ee8 <__errno>:
 8002ee8:	4b01      	ldr	r3, [pc, #4]	@ (8002ef0 <__errno+0x8>)
 8002eea:	6818      	ldr	r0, [r3, #0]
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	20000018 	.word	0x20000018

08002ef4 <__libc_init_array>:
 8002ef4:	b570      	push	{r4, r5, r6, lr}
 8002ef6:	2600      	movs	r6, #0
 8002ef8:	4d0c      	ldr	r5, [pc, #48]	@ (8002f2c <__libc_init_array+0x38>)
 8002efa:	4c0d      	ldr	r4, [pc, #52]	@ (8002f30 <__libc_init_array+0x3c>)
 8002efc:	1b64      	subs	r4, r4, r5
 8002efe:	10a4      	asrs	r4, r4, #2
 8002f00:	42a6      	cmp	r6, r4
 8002f02:	d109      	bne.n	8002f18 <__libc_init_array+0x24>
 8002f04:	f003 fb66 	bl	80065d4 <_init>
 8002f08:	2600      	movs	r6, #0
 8002f0a:	4d0a      	ldr	r5, [pc, #40]	@ (8002f34 <__libc_init_array+0x40>)
 8002f0c:	4c0a      	ldr	r4, [pc, #40]	@ (8002f38 <__libc_init_array+0x44>)
 8002f0e:	1b64      	subs	r4, r4, r5
 8002f10:	10a4      	asrs	r4, r4, #2
 8002f12:	42a6      	cmp	r6, r4
 8002f14:	d105      	bne.n	8002f22 <__libc_init_array+0x2e>
 8002f16:	bd70      	pop	{r4, r5, r6, pc}
 8002f18:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f1c:	4798      	blx	r3
 8002f1e:	3601      	adds	r6, #1
 8002f20:	e7ee      	b.n	8002f00 <__libc_init_array+0xc>
 8002f22:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f26:	4798      	blx	r3
 8002f28:	3601      	adds	r6, #1
 8002f2a:	e7f2      	b.n	8002f12 <__libc_init_array+0x1e>
 8002f2c:	08006a48 	.word	0x08006a48
 8002f30:	08006a48 	.word	0x08006a48
 8002f34:	08006a48 	.word	0x08006a48
 8002f38:	08006a4c 	.word	0x08006a4c

08002f3c <__retarget_lock_init_recursive>:
 8002f3c:	4770      	bx	lr

08002f3e <__retarget_lock_acquire_recursive>:
 8002f3e:	4770      	bx	lr

08002f40 <__retarget_lock_release_recursive>:
 8002f40:	4770      	bx	lr

08002f42 <memchr>:
 8002f42:	4603      	mov	r3, r0
 8002f44:	b510      	push	{r4, lr}
 8002f46:	b2c9      	uxtb	r1, r1
 8002f48:	4402      	add	r2, r0
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	d101      	bne.n	8002f54 <memchr+0x12>
 8002f50:	2000      	movs	r0, #0
 8002f52:	e003      	b.n	8002f5c <memchr+0x1a>
 8002f54:	7804      	ldrb	r4, [r0, #0]
 8002f56:	3301      	adds	r3, #1
 8002f58:	428c      	cmp	r4, r1
 8002f5a:	d1f6      	bne.n	8002f4a <memchr+0x8>
 8002f5c:	bd10      	pop	{r4, pc}
	...

08002f60 <nanf>:
 8002f60:	4800      	ldr	r0, [pc, #0]	@ (8002f64 <nanf+0x4>)
 8002f62:	4770      	bx	lr
 8002f64:	7fc00000 	.word	0x7fc00000

08002f68 <quorem>:
 8002f68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f6c:	6903      	ldr	r3, [r0, #16]
 8002f6e:	690c      	ldr	r4, [r1, #16]
 8002f70:	4607      	mov	r7, r0
 8002f72:	42a3      	cmp	r3, r4
 8002f74:	db7e      	blt.n	8003074 <quorem+0x10c>
 8002f76:	3c01      	subs	r4, #1
 8002f78:	00a3      	lsls	r3, r4, #2
 8002f7a:	f100 0514 	add.w	r5, r0, #20
 8002f7e:	f101 0814 	add.w	r8, r1, #20
 8002f82:	9300      	str	r3, [sp, #0]
 8002f84:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002f88:	9301      	str	r3, [sp, #4]
 8002f8a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8002f8e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002f92:	3301      	adds	r3, #1
 8002f94:	429a      	cmp	r2, r3
 8002f96:	fbb2 f6f3 	udiv	r6, r2, r3
 8002f9a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8002f9e:	d32e      	bcc.n	8002ffe <quorem+0x96>
 8002fa0:	f04f 0a00 	mov.w	sl, #0
 8002fa4:	46c4      	mov	ip, r8
 8002fa6:	46ae      	mov	lr, r5
 8002fa8:	46d3      	mov	fp, sl
 8002faa:	f85c 3b04 	ldr.w	r3, [ip], #4
 8002fae:	b298      	uxth	r0, r3
 8002fb0:	fb06 a000 	mla	r0, r6, r0, sl
 8002fb4:	0c1b      	lsrs	r3, r3, #16
 8002fb6:	0c02      	lsrs	r2, r0, #16
 8002fb8:	fb06 2303 	mla	r3, r6, r3, r2
 8002fbc:	f8de 2000 	ldr.w	r2, [lr]
 8002fc0:	b280      	uxth	r0, r0
 8002fc2:	b292      	uxth	r2, r2
 8002fc4:	1a12      	subs	r2, r2, r0
 8002fc6:	445a      	add	r2, fp
 8002fc8:	f8de 0000 	ldr.w	r0, [lr]
 8002fcc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8002fd6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8002fda:	b292      	uxth	r2, r2
 8002fdc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8002fe0:	45e1      	cmp	r9, ip
 8002fe2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8002fe6:	f84e 2b04 	str.w	r2, [lr], #4
 8002fea:	d2de      	bcs.n	8002faa <quorem+0x42>
 8002fec:	9b00      	ldr	r3, [sp, #0]
 8002fee:	58eb      	ldr	r3, [r5, r3]
 8002ff0:	b92b      	cbnz	r3, 8002ffe <quorem+0x96>
 8002ff2:	9b01      	ldr	r3, [sp, #4]
 8002ff4:	3b04      	subs	r3, #4
 8002ff6:	429d      	cmp	r5, r3
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	d32f      	bcc.n	800305c <quorem+0xf4>
 8002ffc:	613c      	str	r4, [r7, #16]
 8002ffe:	4638      	mov	r0, r7
 8003000:	f001 f9c2 	bl	8004388 <__mcmp>
 8003004:	2800      	cmp	r0, #0
 8003006:	db25      	blt.n	8003054 <quorem+0xec>
 8003008:	4629      	mov	r1, r5
 800300a:	2000      	movs	r0, #0
 800300c:	f858 2b04 	ldr.w	r2, [r8], #4
 8003010:	f8d1 c000 	ldr.w	ip, [r1]
 8003014:	fa1f fe82 	uxth.w	lr, r2
 8003018:	fa1f f38c 	uxth.w	r3, ip
 800301c:	eba3 030e 	sub.w	r3, r3, lr
 8003020:	4403      	add	r3, r0
 8003022:	0c12      	lsrs	r2, r2, #16
 8003024:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8003028:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800302c:	b29b      	uxth	r3, r3
 800302e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003032:	45c1      	cmp	r9, r8
 8003034:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003038:	f841 3b04 	str.w	r3, [r1], #4
 800303c:	d2e6      	bcs.n	800300c <quorem+0xa4>
 800303e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003042:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003046:	b922      	cbnz	r2, 8003052 <quorem+0xea>
 8003048:	3b04      	subs	r3, #4
 800304a:	429d      	cmp	r5, r3
 800304c:	461a      	mov	r2, r3
 800304e:	d30b      	bcc.n	8003068 <quorem+0x100>
 8003050:	613c      	str	r4, [r7, #16]
 8003052:	3601      	adds	r6, #1
 8003054:	4630      	mov	r0, r6
 8003056:	b003      	add	sp, #12
 8003058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800305c:	6812      	ldr	r2, [r2, #0]
 800305e:	3b04      	subs	r3, #4
 8003060:	2a00      	cmp	r2, #0
 8003062:	d1cb      	bne.n	8002ffc <quorem+0x94>
 8003064:	3c01      	subs	r4, #1
 8003066:	e7c6      	b.n	8002ff6 <quorem+0x8e>
 8003068:	6812      	ldr	r2, [r2, #0]
 800306a:	3b04      	subs	r3, #4
 800306c:	2a00      	cmp	r2, #0
 800306e:	d1ef      	bne.n	8003050 <quorem+0xe8>
 8003070:	3c01      	subs	r4, #1
 8003072:	e7ea      	b.n	800304a <quorem+0xe2>
 8003074:	2000      	movs	r0, #0
 8003076:	e7ee      	b.n	8003056 <quorem+0xee>

08003078 <_dtoa_r>:
 8003078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800307c:	4614      	mov	r4, r2
 800307e:	461d      	mov	r5, r3
 8003080:	69c7      	ldr	r7, [r0, #28]
 8003082:	b097      	sub	sp, #92	@ 0x5c
 8003084:	4683      	mov	fp, r0
 8003086:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800308a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800308c:	b97f      	cbnz	r7, 80030ae <_dtoa_r+0x36>
 800308e:	2010      	movs	r0, #16
 8003090:	f000 fe02 	bl	8003c98 <malloc>
 8003094:	4602      	mov	r2, r0
 8003096:	f8cb 001c 	str.w	r0, [fp, #28]
 800309a:	b920      	cbnz	r0, 80030a6 <_dtoa_r+0x2e>
 800309c:	21ef      	movs	r1, #239	@ 0xef
 800309e:	4ba8      	ldr	r3, [pc, #672]	@ (8003340 <_dtoa_r+0x2c8>)
 80030a0:	48a8      	ldr	r0, [pc, #672]	@ (8003344 <_dtoa_r+0x2cc>)
 80030a2:	f002 fc23 	bl	80058ec <__assert_func>
 80030a6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80030aa:	6007      	str	r7, [r0, #0]
 80030ac:	60c7      	str	r7, [r0, #12]
 80030ae:	f8db 301c 	ldr.w	r3, [fp, #28]
 80030b2:	6819      	ldr	r1, [r3, #0]
 80030b4:	b159      	cbz	r1, 80030ce <_dtoa_r+0x56>
 80030b6:	685a      	ldr	r2, [r3, #4]
 80030b8:	2301      	movs	r3, #1
 80030ba:	4093      	lsls	r3, r2
 80030bc:	604a      	str	r2, [r1, #4]
 80030be:	608b      	str	r3, [r1, #8]
 80030c0:	4658      	mov	r0, fp
 80030c2:	f000 fedf 	bl	8003e84 <_Bfree>
 80030c6:	2200      	movs	r2, #0
 80030c8:	f8db 301c 	ldr.w	r3, [fp, #28]
 80030cc:	601a      	str	r2, [r3, #0]
 80030ce:	1e2b      	subs	r3, r5, #0
 80030d0:	bfaf      	iteee	ge
 80030d2:	2300      	movge	r3, #0
 80030d4:	2201      	movlt	r2, #1
 80030d6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80030da:	9303      	strlt	r3, [sp, #12]
 80030dc:	bfa8      	it	ge
 80030de:	6033      	strge	r3, [r6, #0]
 80030e0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80030e4:	4b98      	ldr	r3, [pc, #608]	@ (8003348 <_dtoa_r+0x2d0>)
 80030e6:	bfb8      	it	lt
 80030e8:	6032      	strlt	r2, [r6, #0]
 80030ea:	ea33 0308 	bics.w	r3, r3, r8
 80030ee:	d112      	bne.n	8003116 <_dtoa_r+0x9e>
 80030f0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80030f4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80030f6:	6013      	str	r3, [r2, #0]
 80030f8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80030fc:	4323      	orrs	r3, r4
 80030fe:	f000 8550 	beq.w	8003ba2 <_dtoa_r+0xb2a>
 8003102:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003104:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800334c <_dtoa_r+0x2d4>
 8003108:	2b00      	cmp	r3, #0
 800310a:	f000 8552 	beq.w	8003bb2 <_dtoa_r+0xb3a>
 800310e:	f10a 0303 	add.w	r3, sl, #3
 8003112:	f000 bd4c 	b.w	8003bae <_dtoa_r+0xb36>
 8003116:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800311a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800311e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003122:	2200      	movs	r2, #0
 8003124:	2300      	movs	r3, #0
 8003126:	f7fd fc3f 	bl	80009a8 <__aeabi_dcmpeq>
 800312a:	4607      	mov	r7, r0
 800312c:	b158      	cbz	r0, 8003146 <_dtoa_r+0xce>
 800312e:	2301      	movs	r3, #1
 8003130:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8003132:	6013      	str	r3, [r2, #0]
 8003134:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003136:	b113      	cbz	r3, 800313e <_dtoa_r+0xc6>
 8003138:	4b85      	ldr	r3, [pc, #532]	@ (8003350 <_dtoa_r+0x2d8>)
 800313a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800313c:	6013      	str	r3, [r2, #0]
 800313e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8003354 <_dtoa_r+0x2dc>
 8003142:	f000 bd36 	b.w	8003bb2 <_dtoa_r+0xb3a>
 8003146:	ab14      	add	r3, sp, #80	@ 0x50
 8003148:	9301      	str	r3, [sp, #4]
 800314a:	ab15      	add	r3, sp, #84	@ 0x54
 800314c:	9300      	str	r3, [sp, #0]
 800314e:	4658      	mov	r0, fp
 8003150:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8003154:	f001 fa30 	bl	80045b8 <__d2b>
 8003158:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800315c:	4681      	mov	r9, r0
 800315e:	2e00      	cmp	r6, #0
 8003160:	d077      	beq.n	8003252 <_dtoa_r+0x1da>
 8003162:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003166:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003168:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800316c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003170:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8003174:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8003178:	9712      	str	r7, [sp, #72]	@ 0x48
 800317a:	4619      	mov	r1, r3
 800317c:	2200      	movs	r2, #0
 800317e:	4b76      	ldr	r3, [pc, #472]	@ (8003358 <_dtoa_r+0x2e0>)
 8003180:	f7fc fff2 	bl	8000168 <__aeabi_dsub>
 8003184:	a368      	add	r3, pc, #416	@ (adr r3, 8003328 <_dtoa_r+0x2b0>)
 8003186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800318a:	f7fd f9a5 	bl	80004d8 <__aeabi_dmul>
 800318e:	a368      	add	r3, pc, #416	@ (adr r3, 8003330 <_dtoa_r+0x2b8>)
 8003190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003194:	f7fc ffea 	bl	800016c <__adddf3>
 8003198:	4604      	mov	r4, r0
 800319a:	4630      	mov	r0, r6
 800319c:	460d      	mov	r5, r1
 800319e:	f7fd f931 	bl	8000404 <__aeabi_i2d>
 80031a2:	a365      	add	r3, pc, #404	@ (adr r3, 8003338 <_dtoa_r+0x2c0>)
 80031a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a8:	f7fd f996 	bl	80004d8 <__aeabi_dmul>
 80031ac:	4602      	mov	r2, r0
 80031ae:	460b      	mov	r3, r1
 80031b0:	4620      	mov	r0, r4
 80031b2:	4629      	mov	r1, r5
 80031b4:	f7fc ffda 	bl	800016c <__adddf3>
 80031b8:	4604      	mov	r4, r0
 80031ba:	460d      	mov	r5, r1
 80031bc:	f7fd fc3c 	bl	8000a38 <__aeabi_d2iz>
 80031c0:	2200      	movs	r2, #0
 80031c2:	4607      	mov	r7, r0
 80031c4:	2300      	movs	r3, #0
 80031c6:	4620      	mov	r0, r4
 80031c8:	4629      	mov	r1, r5
 80031ca:	f7fd fbf7 	bl	80009bc <__aeabi_dcmplt>
 80031ce:	b140      	cbz	r0, 80031e2 <_dtoa_r+0x16a>
 80031d0:	4638      	mov	r0, r7
 80031d2:	f7fd f917 	bl	8000404 <__aeabi_i2d>
 80031d6:	4622      	mov	r2, r4
 80031d8:	462b      	mov	r3, r5
 80031da:	f7fd fbe5 	bl	80009a8 <__aeabi_dcmpeq>
 80031de:	b900      	cbnz	r0, 80031e2 <_dtoa_r+0x16a>
 80031e0:	3f01      	subs	r7, #1
 80031e2:	2f16      	cmp	r7, #22
 80031e4:	d853      	bhi.n	800328e <_dtoa_r+0x216>
 80031e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80031ea:	4b5c      	ldr	r3, [pc, #368]	@ (800335c <_dtoa_r+0x2e4>)
 80031ec:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80031f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f4:	f7fd fbe2 	bl	80009bc <__aeabi_dcmplt>
 80031f8:	2800      	cmp	r0, #0
 80031fa:	d04a      	beq.n	8003292 <_dtoa_r+0x21a>
 80031fc:	2300      	movs	r3, #0
 80031fe:	3f01      	subs	r7, #1
 8003200:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003202:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003204:	1b9b      	subs	r3, r3, r6
 8003206:	1e5a      	subs	r2, r3, #1
 8003208:	bf46      	itte	mi
 800320a:	f1c3 0801 	rsbmi	r8, r3, #1
 800320e:	2300      	movmi	r3, #0
 8003210:	f04f 0800 	movpl.w	r8, #0
 8003214:	9209      	str	r2, [sp, #36]	@ 0x24
 8003216:	bf48      	it	mi
 8003218:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800321a:	2f00      	cmp	r7, #0
 800321c:	db3b      	blt.n	8003296 <_dtoa_r+0x21e>
 800321e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003220:	970e      	str	r7, [sp, #56]	@ 0x38
 8003222:	443b      	add	r3, r7
 8003224:	9309      	str	r3, [sp, #36]	@ 0x24
 8003226:	2300      	movs	r3, #0
 8003228:	930a      	str	r3, [sp, #40]	@ 0x28
 800322a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800322c:	2b09      	cmp	r3, #9
 800322e:	d866      	bhi.n	80032fe <_dtoa_r+0x286>
 8003230:	2b05      	cmp	r3, #5
 8003232:	bfc4      	itt	gt
 8003234:	3b04      	subgt	r3, #4
 8003236:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8003238:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800323a:	bfc8      	it	gt
 800323c:	2400      	movgt	r4, #0
 800323e:	f1a3 0302 	sub.w	r3, r3, #2
 8003242:	bfd8      	it	le
 8003244:	2401      	movle	r4, #1
 8003246:	2b03      	cmp	r3, #3
 8003248:	d864      	bhi.n	8003314 <_dtoa_r+0x29c>
 800324a:	e8df f003 	tbb	[pc, r3]
 800324e:	382b      	.short	0x382b
 8003250:	5636      	.short	0x5636
 8003252:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8003256:	441e      	add	r6, r3
 8003258:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800325c:	2b20      	cmp	r3, #32
 800325e:	bfc1      	itttt	gt
 8003260:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8003264:	fa08 f803 	lslgt.w	r8, r8, r3
 8003268:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800326c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8003270:	bfd6      	itet	le
 8003272:	f1c3 0320 	rsble	r3, r3, #32
 8003276:	ea48 0003 	orrgt.w	r0, r8, r3
 800327a:	fa04 f003 	lslle.w	r0, r4, r3
 800327e:	f7fd f8b1 	bl	80003e4 <__aeabi_ui2d>
 8003282:	2201      	movs	r2, #1
 8003284:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8003288:	3e01      	subs	r6, #1
 800328a:	9212      	str	r2, [sp, #72]	@ 0x48
 800328c:	e775      	b.n	800317a <_dtoa_r+0x102>
 800328e:	2301      	movs	r3, #1
 8003290:	e7b6      	b.n	8003200 <_dtoa_r+0x188>
 8003292:	900f      	str	r0, [sp, #60]	@ 0x3c
 8003294:	e7b5      	b.n	8003202 <_dtoa_r+0x18a>
 8003296:	427b      	negs	r3, r7
 8003298:	930a      	str	r3, [sp, #40]	@ 0x28
 800329a:	2300      	movs	r3, #0
 800329c:	eba8 0807 	sub.w	r8, r8, r7
 80032a0:	930e      	str	r3, [sp, #56]	@ 0x38
 80032a2:	e7c2      	b.n	800322a <_dtoa_r+0x1b2>
 80032a4:	2300      	movs	r3, #0
 80032a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80032a8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	dc35      	bgt.n	800331a <_dtoa_r+0x2a2>
 80032ae:	2301      	movs	r3, #1
 80032b0:	461a      	mov	r2, r3
 80032b2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80032b6:	9221      	str	r2, [sp, #132]	@ 0x84
 80032b8:	e00b      	b.n	80032d2 <_dtoa_r+0x25a>
 80032ba:	2301      	movs	r3, #1
 80032bc:	e7f3      	b.n	80032a6 <_dtoa_r+0x22e>
 80032be:	2300      	movs	r3, #0
 80032c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80032c2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80032c4:	18fb      	adds	r3, r7, r3
 80032c6:	9308      	str	r3, [sp, #32]
 80032c8:	3301      	adds	r3, #1
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	9307      	str	r3, [sp, #28]
 80032ce:	bfb8      	it	lt
 80032d0:	2301      	movlt	r3, #1
 80032d2:	2100      	movs	r1, #0
 80032d4:	2204      	movs	r2, #4
 80032d6:	f8db 001c 	ldr.w	r0, [fp, #28]
 80032da:	f102 0514 	add.w	r5, r2, #20
 80032de:	429d      	cmp	r5, r3
 80032e0:	d91f      	bls.n	8003322 <_dtoa_r+0x2aa>
 80032e2:	6041      	str	r1, [r0, #4]
 80032e4:	4658      	mov	r0, fp
 80032e6:	f000 fd8d 	bl	8003e04 <_Balloc>
 80032ea:	4682      	mov	sl, r0
 80032ec:	2800      	cmp	r0, #0
 80032ee:	d139      	bne.n	8003364 <_dtoa_r+0x2ec>
 80032f0:	4602      	mov	r2, r0
 80032f2:	f240 11af 	movw	r1, #431	@ 0x1af
 80032f6:	4b1a      	ldr	r3, [pc, #104]	@ (8003360 <_dtoa_r+0x2e8>)
 80032f8:	e6d2      	b.n	80030a0 <_dtoa_r+0x28>
 80032fa:	2301      	movs	r3, #1
 80032fc:	e7e0      	b.n	80032c0 <_dtoa_r+0x248>
 80032fe:	2401      	movs	r4, #1
 8003300:	2300      	movs	r3, #0
 8003302:	940b      	str	r4, [sp, #44]	@ 0x2c
 8003304:	9320      	str	r3, [sp, #128]	@ 0x80
 8003306:	f04f 33ff 	mov.w	r3, #4294967295
 800330a:	2200      	movs	r2, #0
 800330c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003310:	2312      	movs	r3, #18
 8003312:	e7d0      	b.n	80032b6 <_dtoa_r+0x23e>
 8003314:	2301      	movs	r3, #1
 8003316:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003318:	e7f5      	b.n	8003306 <_dtoa_r+0x28e>
 800331a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800331c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003320:	e7d7      	b.n	80032d2 <_dtoa_r+0x25a>
 8003322:	3101      	adds	r1, #1
 8003324:	0052      	lsls	r2, r2, #1
 8003326:	e7d8      	b.n	80032da <_dtoa_r+0x262>
 8003328:	636f4361 	.word	0x636f4361
 800332c:	3fd287a7 	.word	0x3fd287a7
 8003330:	8b60c8b3 	.word	0x8b60c8b3
 8003334:	3fc68a28 	.word	0x3fc68a28
 8003338:	509f79fb 	.word	0x509f79fb
 800333c:	3fd34413 	.word	0x3fd34413
 8003340:	08006658 	.word	0x08006658
 8003344:	0800666f 	.word	0x0800666f
 8003348:	7ff00000 	.word	0x7ff00000
 800334c:	08006654 	.word	0x08006654
 8003350:	08006623 	.word	0x08006623
 8003354:	08006622 	.word	0x08006622
 8003358:	3ff80000 	.word	0x3ff80000
 800335c:	08006768 	.word	0x08006768
 8003360:	080066c7 	.word	0x080066c7
 8003364:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003368:	6018      	str	r0, [r3, #0]
 800336a:	9b07      	ldr	r3, [sp, #28]
 800336c:	2b0e      	cmp	r3, #14
 800336e:	f200 80a4 	bhi.w	80034ba <_dtoa_r+0x442>
 8003372:	2c00      	cmp	r4, #0
 8003374:	f000 80a1 	beq.w	80034ba <_dtoa_r+0x442>
 8003378:	2f00      	cmp	r7, #0
 800337a:	dd33      	ble.n	80033e4 <_dtoa_r+0x36c>
 800337c:	4b86      	ldr	r3, [pc, #536]	@ (8003598 <_dtoa_r+0x520>)
 800337e:	f007 020f 	and.w	r2, r7, #15
 8003382:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003386:	05f8      	lsls	r0, r7, #23
 8003388:	e9d3 3400 	ldrd	r3, r4, [r3]
 800338c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003390:	ea4f 1427 	mov.w	r4, r7, asr #4
 8003394:	d516      	bpl.n	80033c4 <_dtoa_r+0x34c>
 8003396:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800339a:	4b80      	ldr	r3, [pc, #512]	@ (800359c <_dtoa_r+0x524>)
 800339c:	2603      	movs	r6, #3
 800339e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80033a2:	f7fd f9c3 	bl	800072c <__aeabi_ddiv>
 80033a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80033aa:	f004 040f 	and.w	r4, r4, #15
 80033ae:	4d7b      	ldr	r5, [pc, #492]	@ (800359c <_dtoa_r+0x524>)
 80033b0:	b954      	cbnz	r4, 80033c8 <_dtoa_r+0x350>
 80033b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80033b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80033ba:	f7fd f9b7 	bl	800072c <__aeabi_ddiv>
 80033be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80033c2:	e028      	b.n	8003416 <_dtoa_r+0x39e>
 80033c4:	2602      	movs	r6, #2
 80033c6:	e7f2      	b.n	80033ae <_dtoa_r+0x336>
 80033c8:	07e1      	lsls	r1, r4, #31
 80033ca:	d508      	bpl.n	80033de <_dtoa_r+0x366>
 80033cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80033d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80033d4:	f7fd f880 	bl	80004d8 <__aeabi_dmul>
 80033d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80033dc:	3601      	adds	r6, #1
 80033de:	1064      	asrs	r4, r4, #1
 80033e0:	3508      	adds	r5, #8
 80033e2:	e7e5      	b.n	80033b0 <_dtoa_r+0x338>
 80033e4:	f000 80d2 	beq.w	800358c <_dtoa_r+0x514>
 80033e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80033ec:	427c      	negs	r4, r7
 80033ee:	4b6a      	ldr	r3, [pc, #424]	@ (8003598 <_dtoa_r+0x520>)
 80033f0:	f004 020f 	and.w	r2, r4, #15
 80033f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80033f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033fc:	f7fd f86c 	bl	80004d8 <__aeabi_dmul>
 8003400:	2602      	movs	r6, #2
 8003402:	2300      	movs	r3, #0
 8003404:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003408:	4d64      	ldr	r5, [pc, #400]	@ (800359c <_dtoa_r+0x524>)
 800340a:	1124      	asrs	r4, r4, #4
 800340c:	2c00      	cmp	r4, #0
 800340e:	f040 80b2 	bne.w	8003576 <_dtoa_r+0x4fe>
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1d3      	bne.n	80033be <_dtoa_r+0x346>
 8003416:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800341a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800341c:	2b00      	cmp	r3, #0
 800341e:	f000 80b7 	beq.w	8003590 <_dtoa_r+0x518>
 8003422:	2200      	movs	r2, #0
 8003424:	4620      	mov	r0, r4
 8003426:	4629      	mov	r1, r5
 8003428:	4b5d      	ldr	r3, [pc, #372]	@ (80035a0 <_dtoa_r+0x528>)
 800342a:	f7fd fac7 	bl	80009bc <__aeabi_dcmplt>
 800342e:	2800      	cmp	r0, #0
 8003430:	f000 80ae 	beq.w	8003590 <_dtoa_r+0x518>
 8003434:	9b07      	ldr	r3, [sp, #28]
 8003436:	2b00      	cmp	r3, #0
 8003438:	f000 80aa 	beq.w	8003590 <_dtoa_r+0x518>
 800343c:	9b08      	ldr	r3, [sp, #32]
 800343e:	2b00      	cmp	r3, #0
 8003440:	dd37      	ble.n	80034b2 <_dtoa_r+0x43a>
 8003442:	1e7b      	subs	r3, r7, #1
 8003444:	4620      	mov	r0, r4
 8003446:	9304      	str	r3, [sp, #16]
 8003448:	2200      	movs	r2, #0
 800344a:	4629      	mov	r1, r5
 800344c:	4b55      	ldr	r3, [pc, #340]	@ (80035a4 <_dtoa_r+0x52c>)
 800344e:	f7fd f843 	bl	80004d8 <__aeabi_dmul>
 8003452:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003456:	9c08      	ldr	r4, [sp, #32]
 8003458:	3601      	adds	r6, #1
 800345a:	4630      	mov	r0, r6
 800345c:	f7fc ffd2 	bl	8000404 <__aeabi_i2d>
 8003460:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003464:	f7fd f838 	bl	80004d8 <__aeabi_dmul>
 8003468:	2200      	movs	r2, #0
 800346a:	4b4f      	ldr	r3, [pc, #316]	@ (80035a8 <_dtoa_r+0x530>)
 800346c:	f7fc fe7e 	bl	800016c <__adddf3>
 8003470:	4605      	mov	r5, r0
 8003472:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8003476:	2c00      	cmp	r4, #0
 8003478:	f040 809a 	bne.w	80035b0 <_dtoa_r+0x538>
 800347c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003480:	2200      	movs	r2, #0
 8003482:	4b4a      	ldr	r3, [pc, #296]	@ (80035ac <_dtoa_r+0x534>)
 8003484:	f7fc fe70 	bl	8000168 <__aeabi_dsub>
 8003488:	4602      	mov	r2, r0
 800348a:	460b      	mov	r3, r1
 800348c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003490:	462a      	mov	r2, r5
 8003492:	4633      	mov	r3, r6
 8003494:	f7fd fab0 	bl	80009f8 <__aeabi_dcmpgt>
 8003498:	2800      	cmp	r0, #0
 800349a:	f040 828e 	bne.w	80039ba <_dtoa_r+0x942>
 800349e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80034a2:	462a      	mov	r2, r5
 80034a4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80034a8:	f7fd fa88 	bl	80009bc <__aeabi_dcmplt>
 80034ac:	2800      	cmp	r0, #0
 80034ae:	f040 8127 	bne.w	8003700 <_dtoa_r+0x688>
 80034b2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80034b6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80034ba:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f2c0 8163 	blt.w	8003788 <_dtoa_r+0x710>
 80034c2:	2f0e      	cmp	r7, #14
 80034c4:	f300 8160 	bgt.w	8003788 <_dtoa_r+0x710>
 80034c8:	4b33      	ldr	r3, [pc, #204]	@ (8003598 <_dtoa_r+0x520>)
 80034ca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80034ce:	e9d3 3400 	ldrd	r3, r4, [r3]
 80034d2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80034d6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80034d8:	2b00      	cmp	r3, #0
 80034da:	da03      	bge.n	80034e4 <_dtoa_r+0x46c>
 80034dc:	9b07      	ldr	r3, [sp, #28]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f340 8100 	ble.w	80036e4 <_dtoa_r+0x66c>
 80034e4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80034e8:	4656      	mov	r6, sl
 80034ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80034ee:	4620      	mov	r0, r4
 80034f0:	4629      	mov	r1, r5
 80034f2:	f7fd f91b 	bl	800072c <__aeabi_ddiv>
 80034f6:	f7fd fa9f 	bl	8000a38 <__aeabi_d2iz>
 80034fa:	4680      	mov	r8, r0
 80034fc:	f7fc ff82 	bl	8000404 <__aeabi_i2d>
 8003500:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003504:	f7fc ffe8 	bl	80004d8 <__aeabi_dmul>
 8003508:	4602      	mov	r2, r0
 800350a:	460b      	mov	r3, r1
 800350c:	4620      	mov	r0, r4
 800350e:	4629      	mov	r1, r5
 8003510:	f7fc fe2a 	bl	8000168 <__aeabi_dsub>
 8003514:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8003518:	9d07      	ldr	r5, [sp, #28]
 800351a:	f806 4b01 	strb.w	r4, [r6], #1
 800351e:	eba6 040a 	sub.w	r4, r6, sl
 8003522:	42a5      	cmp	r5, r4
 8003524:	4602      	mov	r2, r0
 8003526:	460b      	mov	r3, r1
 8003528:	f040 8116 	bne.w	8003758 <_dtoa_r+0x6e0>
 800352c:	f7fc fe1e 	bl	800016c <__adddf3>
 8003530:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003534:	4604      	mov	r4, r0
 8003536:	460d      	mov	r5, r1
 8003538:	f7fd fa5e 	bl	80009f8 <__aeabi_dcmpgt>
 800353c:	2800      	cmp	r0, #0
 800353e:	f040 80f8 	bne.w	8003732 <_dtoa_r+0x6ba>
 8003542:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003546:	4620      	mov	r0, r4
 8003548:	4629      	mov	r1, r5
 800354a:	f7fd fa2d 	bl	80009a8 <__aeabi_dcmpeq>
 800354e:	b118      	cbz	r0, 8003558 <_dtoa_r+0x4e0>
 8003550:	f018 0f01 	tst.w	r8, #1
 8003554:	f040 80ed 	bne.w	8003732 <_dtoa_r+0x6ba>
 8003558:	4649      	mov	r1, r9
 800355a:	4658      	mov	r0, fp
 800355c:	f000 fc92 	bl	8003e84 <_Bfree>
 8003560:	2300      	movs	r3, #0
 8003562:	7033      	strb	r3, [r6, #0]
 8003564:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8003566:	3701      	adds	r7, #1
 8003568:	601f      	str	r7, [r3, #0]
 800356a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 8320 	beq.w	8003bb2 <_dtoa_r+0xb3a>
 8003572:	601e      	str	r6, [r3, #0]
 8003574:	e31d      	b.n	8003bb2 <_dtoa_r+0xb3a>
 8003576:	07e2      	lsls	r2, r4, #31
 8003578:	d505      	bpl.n	8003586 <_dtoa_r+0x50e>
 800357a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800357e:	f7fc ffab 	bl	80004d8 <__aeabi_dmul>
 8003582:	2301      	movs	r3, #1
 8003584:	3601      	adds	r6, #1
 8003586:	1064      	asrs	r4, r4, #1
 8003588:	3508      	adds	r5, #8
 800358a:	e73f      	b.n	800340c <_dtoa_r+0x394>
 800358c:	2602      	movs	r6, #2
 800358e:	e742      	b.n	8003416 <_dtoa_r+0x39e>
 8003590:	9c07      	ldr	r4, [sp, #28]
 8003592:	9704      	str	r7, [sp, #16]
 8003594:	e761      	b.n	800345a <_dtoa_r+0x3e2>
 8003596:	bf00      	nop
 8003598:	08006768 	.word	0x08006768
 800359c:	08006740 	.word	0x08006740
 80035a0:	3ff00000 	.word	0x3ff00000
 80035a4:	40240000 	.word	0x40240000
 80035a8:	401c0000 	.word	0x401c0000
 80035ac:	40140000 	.word	0x40140000
 80035b0:	4b70      	ldr	r3, [pc, #448]	@ (8003774 <_dtoa_r+0x6fc>)
 80035b2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80035b4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80035b8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80035bc:	4454      	add	r4, sl
 80035be:	2900      	cmp	r1, #0
 80035c0:	d045      	beq.n	800364e <_dtoa_r+0x5d6>
 80035c2:	2000      	movs	r0, #0
 80035c4:	496c      	ldr	r1, [pc, #432]	@ (8003778 <_dtoa_r+0x700>)
 80035c6:	f7fd f8b1 	bl	800072c <__aeabi_ddiv>
 80035ca:	4633      	mov	r3, r6
 80035cc:	462a      	mov	r2, r5
 80035ce:	f7fc fdcb 	bl	8000168 <__aeabi_dsub>
 80035d2:	4656      	mov	r6, sl
 80035d4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80035d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80035dc:	f7fd fa2c 	bl	8000a38 <__aeabi_d2iz>
 80035e0:	4605      	mov	r5, r0
 80035e2:	f7fc ff0f 	bl	8000404 <__aeabi_i2d>
 80035e6:	4602      	mov	r2, r0
 80035e8:	460b      	mov	r3, r1
 80035ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80035ee:	f7fc fdbb 	bl	8000168 <__aeabi_dsub>
 80035f2:	4602      	mov	r2, r0
 80035f4:	460b      	mov	r3, r1
 80035f6:	3530      	adds	r5, #48	@ 0x30
 80035f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80035fc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003600:	f806 5b01 	strb.w	r5, [r6], #1
 8003604:	f7fd f9da 	bl	80009bc <__aeabi_dcmplt>
 8003608:	2800      	cmp	r0, #0
 800360a:	d163      	bne.n	80036d4 <_dtoa_r+0x65c>
 800360c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003610:	2000      	movs	r0, #0
 8003612:	495a      	ldr	r1, [pc, #360]	@ (800377c <_dtoa_r+0x704>)
 8003614:	f7fc fda8 	bl	8000168 <__aeabi_dsub>
 8003618:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800361c:	f7fd f9ce 	bl	80009bc <__aeabi_dcmplt>
 8003620:	2800      	cmp	r0, #0
 8003622:	f040 8087 	bne.w	8003734 <_dtoa_r+0x6bc>
 8003626:	42a6      	cmp	r6, r4
 8003628:	f43f af43 	beq.w	80034b2 <_dtoa_r+0x43a>
 800362c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8003630:	2200      	movs	r2, #0
 8003632:	4b53      	ldr	r3, [pc, #332]	@ (8003780 <_dtoa_r+0x708>)
 8003634:	f7fc ff50 	bl	80004d8 <__aeabi_dmul>
 8003638:	2200      	movs	r2, #0
 800363a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800363e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003642:	4b4f      	ldr	r3, [pc, #316]	@ (8003780 <_dtoa_r+0x708>)
 8003644:	f7fc ff48 	bl	80004d8 <__aeabi_dmul>
 8003648:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800364c:	e7c4      	b.n	80035d8 <_dtoa_r+0x560>
 800364e:	4631      	mov	r1, r6
 8003650:	4628      	mov	r0, r5
 8003652:	f7fc ff41 	bl	80004d8 <__aeabi_dmul>
 8003656:	4656      	mov	r6, sl
 8003658:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800365c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800365e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003662:	f7fd f9e9 	bl	8000a38 <__aeabi_d2iz>
 8003666:	4605      	mov	r5, r0
 8003668:	f7fc fecc 	bl	8000404 <__aeabi_i2d>
 800366c:	4602      	mov	r2, r0
 800366e:	460b      	mov	r3, r1
 8003670:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003674:	f7fc fd78 	bl	8000168 <__aeabi_dsub>
 8003678:	4602      	mov	r2, r0
 800367a:	460b      	mov	r3, r1
 800367c:	3530      	adds	r5, #48	@ 0x30
 800367e:	f806 5b01 	strb.w	r5, [r6], #1
 8003682:	42a6      	cmp	r6, r4
 8003684:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003688:	f04f 0200 	mov.w	r2, #0
 800368c:	d124      	bne.n	80036d8 <_dtoa_r+0x660>
 800368e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8003692:	4b39      	ldr	r3, [pc, #228]	@ (8003778 <_dtoa_r+0x700>)
 8003694:	f7fc fd6a 	bl	800016c <__adddf3>
 8003698:	4602      	mov	r2, r0
 800369a:	460b      	mov	r3, r1
 800369c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80036a0:	f7fd f9aa 	bl	80009f8 <__aeabi_dcmpgt>
 80036a4:	2800      	cmp	r0, #0
 80036a6:	d145      	bne.n	8003734 <_dtoa_r+0x6bc>
 80036a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80036ac:	2000      	movs	r0, #0
 80036ae:	4932      	ldr	r1, [pc, #200]	@ (8003778 <_dtoa_r+0x700>)
 80036b0:	f7fc fd5a 	bl	8000168 <__aeabi_dsub>
 80036b4:	4602      	mov	r2, r0
 80036b6:	460b      	mov	r3, r1
 80036b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80036bc:	f7fd f97e 	bl	80009bc <__aeabi_dcmplt>
 80036c0:	2800      	cmp	r0, #0
 80036c2:	f43f aef6 	beq.w	80034b2 <_dtoa_r+0x43a>
 80036c6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80036c8:	1e73      	subs	r3, r6, #1
 80036ca:	9313      	str	r3, [sp, #76]	@ 0x4c
 80036cc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80036d0:	2b30      	cmp	r3, #48	@ 0x30
 80036d2:	d0f8      	beq.n	80036c6 <_dtoa_r+0x64e>
 80036d4:	9f04      	ldr	r7, [sp, #16]
 80036d6:	e73f      	b.n	8003558 <_dtoa_r+0x4e0>
 80036d8:	4b29      	ldr	r3, [pc, #164]	@ (8003780 <_dtoa_r+0x708>)
 80036da:	f7fc fefd 	bl	80004d8 <__aeabi_dmul>
 80036de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80036e2:	e7bc      	b.n	800365e <_dtoa_r+0x5e6>
 80036e4:	d10c      	bne.n	8003700 <_dtoa_r+0x688>
 80036e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80036ea:	2200      	movs	r2, #0
 80036ec:	4b25      	ldr	r3, [pc, #148]	@ (8003784 <_dtoa_r+0x70c>)
 80036ee:	f7fc fef3 	bl	80004d8 <__aeabi_dmul>
 80036f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80036f6:	f7fd f975 	bl	80009e4 <__aeabi_dcmpge>
 80036fa:	2800      	cmp	r0, #0
 80036fc:	f000 815b 	beq.w	80039b6 <_dtoa_r+0x93e>
 8003700:	2400      	movs	r4, #0
 8003702:	4625      	mov	r5, r4
 8003704:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003706:	4656      	mov	r6, sl
 8003708:	43db      	mvns	r3, r3
 800370a:	9304      	str	r3, [sp, #16]
 800370c:	2700      	movs	r7, #0
 800370e:	4621      	mov	r1, r4
 8003710:	4658      	mov	r0, fp
 8003712:	f000 fbb7 	bl	8003e84 <_Bfree>
 8003716:	2d00      	cmp	r5, #0
 8003718:	d0dc      	beq.n	80036d4 <_dtoa_r+0x65c>
 800371a:	b12f      	cbz	r7, 8003728 <_dtoa_r+0x6b0>
 800371c:	42af      	cmp	r7, r5
 800371e:	d003      	beq.n	8003728 <_dtoa_r+0x6b0>
 8003720:	4639      	mov	r1, r7
 8003722:	4658      	mov	r0, fp
 8003724:	f000 fbae 	bl	8003e84 <_Bfree>
 8003728:	4629      	mov	r1, r5
 800372a:	4658      	mov	r0, fp
 800372c:	f000 fbaa 	bl	8003e84 <_Bfree>
 8003730:	e7d0      	b.n	80036d4 <_dtoa_r+0x65c>
 8003732:	9704      	str	r7, [sp, #16]
 8003734:	4633      	mov	r3, r6
 8003736:	461e      	mov	r6, r3
 8003738:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800373c:	2a39      	cmp	r2, #57	@ 0x39
 800373e:	d107      	bne.n	8003750 <_dtoa_r+0x6d8>
 8003740:	459a      	cmp	sl, r3
 8003742:	d1f8      	bne.n	8003736 <_dtoa_r+0x6be>
 8003744:	9a04      	ldr	r2, [sp, #16]
 8003746:	3201      	adds	r2, #1
 8003748:	9204      	str	r2, [sp, #16]
 800374a:	2230      	movs	r2, #48	@ 0x30
 800374c:	f88a 2000 	strb.w	r2, [sl]
 8003750:	781a      	ldrb	r2, [r3, #0]
 8003752:	3201      	adds	r2, #1
 8003754:	701a      	strb	r2, [r3, #0]
 8003756:	e7bd      	b.n	80036d4 <_dtoa_r+0x65c>
 8003758:	2200      	movs	r2, #0
 800375a:	4b09      	ldr	r3, [pc, #36]	@ (8003780 <_dtoa_r+0x708>)
 800375c:	f7fc febc 	bl	80004d8 <__aeabi_dmul>
 8003760:	2200      	movs	r2, #0
 8003762:	2300      	movs	r3, #0
 8003764:	4604      	mov	r4, r0
 8003766:	460d      	mov	r5, r1
 8003768:	f7fd f91e 	bl	80009a8 <__aeabi_dcmpeq>
 800376c:	2800      	cmp	r0, #0
 800376e:	f43f aebc 	beq.w	80034ea <_dtoa_r+0x472>
 8003772:	e6f1      	b.n	8003558 <_dtoa_r+0x4e0>
 8003774:	08006768 	.word	0x08006768
 8003778:	3fe00000 	.word	0x3fe00000
 800377c:	3ff00000 	.word	0x3ff00000
 8003780:	40240000 	.word	0x40240000
 8003784:	40140000 	.word	0x40140000
 8003788:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800378a:	2a00      	cmp	r2, #0
 800378c:	f000 80db 	beq.w	8003946 <_dtoa_r+0x8ce>
 8003790:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003792:	2a01      	cmp	r2, #1
 8003794:	f300 80bf 	bgt.w	8003916 <_dtoa_r+0x89e>
 8003798:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800379a:	2a00      	cmp	r2, #0
 800379c:	f000 80b7 	beq.w	800390e <_dtoa_r+0x896>
 80037a0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80037a4:	4646      	mov	r6, r8
 80037a6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80037a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80037aa:	2101      	movs	r1, #1
 80037ac:	441a      	add	r2, r3
 80037ae:	4658      	mov	r0, fp
 80037b0:	4498      	add	r8, r3
 80037b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80037b4:	f000 fc64 	bl	8004080 <__i2b>
 80037b8:	4605      	mov	r5, r0
 80037ba:	b15e      	cbz	r6, 80037d4 <_dtoa_r+0x75c>
 80037bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80037be:	2b00      	cmp	r3, #0
 80037c0:	dd08      	ble.n	80037d4 <_dtoa_r+0x75c>
 80037c2:	42b3      	cmp	r3, r6
 80037c4:	bfa8      	it	ge
 80037c6:	4633      	movge	r3, r6
 80037c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80037ca:	eba8 0803 	sub.w	r8, r8, r3
 80037ce:	1af6      	subs	r6, r6, r3
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80037d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80037d6:	b1f3      	cbz	r3, 8003816 <_dtoa_r+0x79e>
 80037d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f000 80b7 	beq.w	800394e <_dtoa_r+0x8d6>
 80037e0:	b18c      	cbz	r4, 8003806 <_dtoa_r+0x78e>
 80037e2:	4629      	mov	r1, r5
 80037e4:	4622      	mov	r2, r4
 80037e6:	4658      	mov	r0, fp
 80037e8:	f000 fd08 	bl	80041fc <__pow5mult>
 80037ec:	464a      	mov	r2, r9
 80037ee:	4601      	mov	r1, r0
 80037f0:	4605      	mov	r5, r0
 80037f2:	4658      	mov	r0, fp
 80037f4:	f000 fc5a 	bl	80040ac <__multiply>
 80037f8:	4649      	mov	r1, r9
 80037fa:	9004      	str	r0, [sp, #16]
 80037fc:	4658      	mov	r0, fp
 80037fe:	f000 fb41 	bl	8003e84 <_Bfree>
 8003802:	9b04      	ldr	r3, [sp, #16]
 8003804:	4699      	mov	r9, r3
 8003806:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003808:	1b1a      	subs	r2, r3, r4
 800380a:	d004      	beq.n	8003816 <_dtoa_r+0x79e>
 800380c:	4649      	mov	r1, r9
 800380e:	4658      	mov	r0, fp
 8003810:	f000 fcf4 	bl	80041fc <__pow5mult>
 8003814:	4681      	mov	r9, r0
 8003816:	2101      	movs	r1, #1
 8003818:	4658      	mov	r0, fp
 800381a:	f000 fc31 	bl	8004080 <__i2b>
 800381e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003820:	4604      	mov	r4, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	f000 81c9 	beq.w	8003bba <_dtoa_r+0xb42>
 8003828:	461a      	mov	r2, r3
 800382a:	4601      	mov	r1, r0
 800382c:	4658      	mov	r0, fp
 800382e:	f000 fce5 	bl	80041fc <__pow5mult>
 8003832:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003834:	4604      	mov	r4, r0
 8003836:	2b01      	cmp	r3, #1
 8003838:	f300 808f 	bgt.w	800395a <_dtoa_r+0x8e2>
 800383c:	9b02      	ldr	r3, [sp, #8]
 800383e:	2b00      	cmp	r3, #0
 8003840:	f040 8087 	bne.w	8003952 <_dtoa_r+0x8da>
 8003844:	9b03      	ldr	r3, [sp, #12]
 8003846:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800384a:	2b00      	cmp	r3, #0
 800384c:	f040 8083 	bne.w	8003956 <_dtoa_r+0x8de>
 8003850:	9b03      	ldr	r3, [sp, #12]
 8003852:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003856:	0d1b      	lsrs	r3, r3, #20
 8003858:	051b      	lsls	r3, r3, #20
 800385a:	b12b      	cbz	r3, 8003868 <_dtoa_r+0x7f0>
 800385c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800385e:	f108 0801 	add.w	r8, r8, #1
 8003862:	3301      	adds	r3, #1
 8003864:	9309      	str	r3, [sp, #36]	@ 0x24
 8003866:	2301      	movs	r3, #1
 8003868:	930a      	str	r3, [sp, #40]	@ 0x28
 800386a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800386c:	2b00      	cmp	r3, #0
 800386e:	f000 81aa 	beq.w	8003bc6 <_dtoa_r+0xb4e>
 8003872:	6923      	ldr	r3, [r4, #16]
 8003874:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003878:	6918      	ldr	r0, [r3, #16]
 800387a:	f000 fbb5 	bl	8003fe8 <__hi0bits>
 800387e:	f1c0 0020 	rsb	r0, r0, #32
 8003882:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003884:	4418      	add	r0, r3
 8003886:	f010 001f 	ands.w	r0, r0, #31
 800388a:	d071      	beq.n	8003970 <_dtoa_r+0x8f8>
 800388c:	f1c0 0320 	rsb	r3, r0, #32
 8003890:	2b04      	cmp	r3, #4
 8003892:	dd65      	ble.n	8003960 <_dtoa_r+0x8e8>
 8003894:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003896:	f1c0 001c 	rsb	r0, r0, #28
 800389a:	4403      	add	r3, r0
 800389c:	4480      	add	r8, r0
 800389e:	4406      	add	r6, r0
 80038a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80038a2:	f1b8 0f00 	cmp.w	r8, #0
 80038a6:	dd05      	ble.n	80038b4 <_dtoa_r+0x83c>
 80038a8:	4649      	mov	r1, r9
 80038aa:	4642      	mov	r2, r8
 80038ac:	4658      	mov	r0, fp
 80038ae:	f000 fcff 	bl	80042b0 <__lshift>
 80038b2:	4681      	mov	r9, r0
 80038b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	dd05      	ble.n	80038c6 <_dtoa_r+0x84e>
 80038ba:	4621      	mov	r1, r4
 80038bc:	461a      	mov	r2, r3
 80038be:	4658      	mov	r0, fp
 80038c0:	f000 fcf6 	bl	80042b0 <__lshift>
 80038c4:	4604      	mov	r4, r0
 80038c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d053      	beq.n	8003974 <_dtoa_r+0x8fc>
 80038cc:	4621      	mov	r1, r4
 80038ce:	4648      	mov	r0, r9
 80038d0:	f000 fd5a 	bl	8004388 <__mcmp>
 80038d4:	2800      	cmp	r0, #0
 80038d6:	da4d      	bge.n	8003974 <_dtoa_r+0x8fc>
 80038d8:	1e7b      	subs	r3, r7, #1
 80038da:	4649      	mov	r1, r9
 80038dc:	9304      	str	r3, [sp, #16]
 80038de:	220a      	movs	r2, #10
 80038e0:	2300      	movs	r3, #0
 80038e2:	4658      	mov	r0, fp
 80038e4:	f000 faf0 	bl	8003ec8 <__multadd>
 80038e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80038ea:	4681      	mov	r9, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f000 816c 	beq.w	8003bca <_dtoa_r+0xb52>
 80038f2:	2300      	movs	r3, #0
 80038f4:	4629      	mov	r1, r5
 80038f6:	220a      	movs	r2, #10
 80038f8:	4658      	mov	r0, fp
 80038fa:	f000 fae5 	bl	8003ec8 <__multadd>
 80038fe:	9b08      	ldr	r3, [sp, #32]
 8003900:	4605      	mov	r5, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	dc61      	bgt.n	80039ca <_dtoa_r+0x952>
 8003906:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003908:	2b02      	cmp	r3, #2
 800390a:	dc3b      	bgt.n	8003984 <_dtoa_r+0x90c>
 800390c:	e05d      	b.n	80039ca <_dtoa_r+0x952>
 800390e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003910:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8003914:	e746      	b.n	80037a4 <_dtoa_r+0x72c>
 8003916:	9b07      	ldr	r3, [sp, #28]
 8003918:	1e5c      	subs	r4, r3, #1
 800391a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800391c:	42a3      	cmp	r3, r4
 800391e:	bfbf      	itttt	lt
 8003920:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8003922:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8003924:	1ae3      	sublt	r3, r4, r3
 8003926:	18d2      	addlt	r2, r2, r3
 8003928:	bfa8      	it	ge
 800392a:	1b1c      	subge	r4, r3, r4
 800392c:	9b07      	ldr	r3, [sp, #28]
 800392e:	bfbe      	ittt	lt
 8003930:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8003932:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8003934:	2400      	movlt	r4, #0
 8003936:	2b00      	cmp	r3, #0
 8003938:	bfb5      	itete	lt
 800393a:	eba8 0603 	sublt.w	r6, r8, r3
 800393e:	4646      	movge	r6, r8
 8003940:	2300      	movlt	r3, #0
 8003942:	9b07      	ldrge	r3, [sp, #28]
 8003944:	e730      	b.n	80037a8 <_dtoa_r+0x730>
 8003946:	4646      	mov	r6, r8
 8003948:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800394a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800394c:	e735      	b.n	80037ba <_dtoa_r+0x742>
 800394e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003950:	e75c      	b.n	800380c <_dtoa_r+0x794>
 8003952:	2300      	movs	r3, #0
 8003954:	e788      	b.n	8003868 <_dtoa_r+0x7f0>
 8003956:	9b02      	ldr	r3, [sp, #8]
 8003958:	e786      	b.n	8003868 <_dtoa_r+0x7f0>
 800395a:	2300      	movs	r3, #0
 800395c:	930a      	str	r3, [sp, #40]	@ 0x28
 800395e:	e788      	b.n	8003872 <_dtoa_r+0x7fa>
 8003960:	d09f      	beq.n	80038a2 <_dtoa_r+0x82a>
 8003962:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003964:	331c      	adds	r3, #28
 8003966:	441a      	add	r2, r3
 8003968:	4498      	add	r8, r3
 800396a:	441e      	add	r6, r3
 800396c:	9209      	str	r2, [sp, #36]	@ 0x24
 800396e:	e798      	b.n	80038a2 <_dtoa_r+0x82a>
 8003970:	4603      	mov	r3, r0
 8003972:	e7f6      	b.n	8003962 <_dtoa_r+0x8ea>
 8003974:	9b07      	ldr	r3, [sp, #28]
 8003976:	9704      	str	r7, [sp, #16]
 8003978:	2b00      	cmp	r3, #0
 800397a:	dc20      	bgt.n	80039be <_dtoa_r+0x946>
 800397c:	9308      	str	r3, [sp, #32]
 800397e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003980:	2b02      	cmp	r3, #2
 8003982:	dd1e      	ble.n	80039c2 <_dtoa_r+0x94a>
 8003984:	9b08      	ldr	r3, [sp, #32]
 8003986:	2b00      	cmp	r3, #0
 8003988:	f47f aebc 	bne.w	8003704 <_dtoa_r+0x68c>
 800398c:	4621      	mov	r1, r4
 800398e:	2205      	movs	r2, #5
 8003990:	4658      	mov	r0, fp
 8003992:	f000 fa99 	bl	8003ec8 <__multadd>
 8003996:	4601      	mov	r1, r0
 8003998:	4604      	mov	r4, r0
 800399a:	4648      	mov	r0, r9
 800399c:	f000 fcf4 	bl	8004388 <__mcmp>
 80039a0:	2800      	cmp	r0, #0
 80039a2:	f77f aeaf 	ble.w	8003704 <_dtoa_r+0x68c>
 80039a6:	2331      	movs	r3, #49	@ 0x31
 80039a8:	4656      	mov	r6, sl
 80039aa:	f806 3b01 	strb.w	r3, [r6], #1
 80039ae:	9b04      	ldr	r3, [sp, #16]
 80039b0:	3301      	adds	r3, #1
 80039b2:	9304      	str	r3, [sp, #16]
 80039b4:	e6aa      	b.n	800370c <_dtoa_r+0x694>
 80039b6:	9c07      	ldr	r4, [sp, #28]
 80039b8:	9704      	str	r7, [sp, #16]
 80039ba:	4625      	mov	r5, r4
 80039bc:	e7f3      	b.n	80039a6 <_dtoa_r+0x92e>
 80039be:	9b07      	ldr	r3, [sp, #28]
 80039c0:	9308      	str	r3, [sp, #32]
 80039c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	f000 8104 	beq.w	8003bd2 <_dtoa_r+0xb5a>
 80039ca:	2e00      	cmp	r6, #0
 80039cc:	dd05      	ble.n	80039da <_dtoa_r+0x962>
 80039ce:	4629      	mov	r1, r5
 80039d0:	4632      	mov	r2, r6
 80039d2:	4658      	mov	r0, fp
 80039d4:	f000 fc6c 	bl	80042b0 <__lshift>
 80039d8:	4605      	mov	r5, r0
 80039da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d05a      	beq.n	8003a96 <_dtoa_r+0xa1e>
 80039e0:	4658      	mov	r0, fp
 80039e2:	6869      	ldr	r1, [r5, #4]
 80039e4:	f000 fa0e 	bl	8003e04 <_Balloc>
 80039e8:	4606      	mov	r6, r0
 80039ea:	b928      	cbnz	r0, 80039f8 <_dtoa_r+0x980>
 80039ec:	4602      	mov	r2, r0
 80039ee:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80039f2:	4b83      	ldr	r3, [pc, #524]	@ (8003c00 <_dtoa_r+0xb88>)
 80039f4:	f7ff bb54 	b.w	80030a0 <_dtoa_r+0x28>
 80039f8:	692a      	ldr	r2, [r5, #16]
 80039fa:	f105 010c 	add.w	r1, r5, #12
 80039fe:	3202      	adds	r2, #2
 8003a00:	0092      	lsls	r2, r2, #2
 8003a02:	300c      	adds	r0, #12
 8003a04:	f001 ff5e 	bl	80058c4 <memcpy>
 8003a08:	2201      	movs	r2, #1
 8003a0a:	4631      	mov	r1, r6
 8003a0c:	4658      	mov	r0, fp
 8003a0e:	f000 fc4f 	bl	80042b0 <__lshift>
 8003a12:	462f      	mov	r7, r5
 8003a14:	4605      	mov	r5, r0
 8003a16:	f10a 0301 	add.w	r3, sl, #1
 8003a1a:	9307      	str	r3, [sp, #28]
 8003a1c:	9b08      	ldr	r3, [sp, #32]
 8003a1e:	4453      	add	r3, sl
 8003a20:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003a22:	9b02      	ldr	r3, [sp, #8]
 8003a24:	f003 0301 	and.w	r3, r3, #1
 8003a28:	930a      	str	r3, [sp, #40]	@ 0x28
 8003a2a:	9b07      	ldr	r3, [sp, #28]
 8003a2c:	4621      	mov	r1, r4
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	4648      	mov	r0, r9
 8003a32:	9302      	str	r3, [sp, #8]
 8003a34:	f7ff fa98 	bl	8002f68 <quorem>
 8003a38:	4639      	mov	r1, r7
 8003a3a:	9008      	str	r0, [sp, #32]
 8003a3c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8003a40:	4648      	mov	r0, r9
 8003a42:	f000 fca1 	bl	8004388 <__mcmp>
 8003a46:	462a      	mov	r2, r5
 8003a48:	9009      	str	r0, [sp, #36]	@ 0x24
 8003a4a:	4621      	mov	r1, r4
 8003a4c:	4658      	mov	r0, fp
 8003a4e:	f000 fcb7 	bl	80043c0 <__mdiff>
 8003a52:	68c2      	ldr	r2, [r0, #12]
 8003a54:	4606      	mov	r6, r0
 8003a56:	bb02      	cbnz	r2, 8003a9a <_dtoa_r+0xa22>
 8003a58:	4601      	mov	r1, r0
 8003a5a:	4648      	mov	r0, r9
 8003a5c:	f000 fc94 	bl	8004388 <__mcmp>
 8003a60:	4602      	mov	r2, r0
 8003a62:	4631      	mov	r1, r6
 8003a64:	4658      	mov	r0, fp
 8003a66:	920c      	str	r2, [sp, #48]	@ 0x30
 8003a68:	f000 fa0c 	bl	8003e84 <_Bfree>
 8003a6c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003a6e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8003a70:	9e07      	ldr	r6, [sp, #28]
 8003a72:	ea43 0102 	orr.w	r1, r3, r2
 8003a76:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003a78:	4319      	orrs	r1, r3
 8003a7a:	d110      	bne.n	8003a9e <_dtoa_r+0xa26>
 8003a7c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8003a80:	d029      	beq.n	8003ad6 <_dtoa_r+0xa5e>
 8003a82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	dd02      	ble.n	8003a8e <_dtoa_r+0xa16>
 8003a88:	9b08      	ldr	r3, [sp, #32]
 8003a8a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8003a8e:	9b02      	ldr	r3, [sp, #8]
 8003a90:	f883 8000 	strb.w	r8, [r3]
 8003a94:	e63b      	b.n	800370e <_dtoa_r+0x696>
 8003a96:	4628      	mov	r0, r5
 8003a98:	e7bb      	b.n	8003a12 <_dtoa_r+0x99a>
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	e7e1      	b.n	8003a62 <_dtoa_r+0x9ea>
 8003a9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	db04      	blt.n	8003aae <_dtoa_r+0xa36>
 8003aa4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8003aa6:	430b      	orrs	r3, r1
 8003aa8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003aaa:	430b      	orrs	r3, r1
 8003aac:	d120      	bne.n	8003af0 <_dtoa_r+0xa78>
 8003aae:	2a00      	cmp	r2, #0
 8003ab0:	dded      	ble.n	8003a8e <_dtoa_r+0xa16>
 8003ab2:	4649      	mov	r1, r9
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	4658      	mov	r0, fp
 8003ab8:	f000 fbfa 	bl	80042b0 <__lshift>
 8003abc:	4621      	mov	r1, r4
 8003abe:	4681      	mov	r9, r0
 8003ac0:	f000 fc62 	bl	8004388 <__mcmp>
 8003ac4:	2800      	cmp	r0, #0
 8003ac6:	dc03      	bgt.n	8003ad0 <_dtoa_r+0xa58>
 8003ac8:	d1e1      	bne.n	8003a8e <_dtoa_r+0xa16>
 8003aca:	f018 0f01 	tst.w	r8, #1
 8003ace:	d0de      	beq.n	8003a8e <_dtoa_r+0xa16>
 8003ad0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8003ad4:	d1d8      	bne.n	8003a88 <_dtoa_r+0xa10>
 8003ad6:	2339      	movs	r3, #57	@ 0x39
 8003ad8:	9a02      	ldr	r2, [sp, #8]
 8003ada:	7013      	strb	r3, [r2, #0]
 8003adc:	4633      	mov	r3, r6
 8003ade:	461e      	mov	r6, r3
 8003ae0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	2a39      	cmp	r2, #57	@ 0x39
 8003ae8:	d052      	beq.n	8003b90 <_dtoa_r+0xb18>
 8003aea:	3201      	adds	r2, #1
 8003aec:	701a      	strb	r2, [r3, #0]
 8003aee:	e60e      	b.n	800370e <_dtoa_r+0x696>
 8003af0:	2a00      	cmp	r2, #0
 8003af2:	dd07      	ble.n	8003b04 <_dtoa_r+0xa8c>
 8003af4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8003af8:	d0ed      	beq.n	8003ad6 <_dtoa_r+0xa5e>
 8003afa:	9a02      	ldr	r2, [sp, #8]
 8003afc:	f108 0301 	add.w	r3, r8, #1
 8003b00:	7013      	strb	r3, [r2, #0]
 8003b02:	e604      	b.n	800370e <_dtoa_r+0x696>
 8003b04:	9b07      	ldr	r3, [sp, #28]
 8003b06:	9a07      	ldr	r2, [sp, #28]
 8003b08:	f803 8c01 	strb.w	r8, [r3, #-1]
 8003b0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d028      	beq.n	8003b64 <_dtoa_r+0xaec>
 8003b12:	4649      	mov	r1, r9
 8003b14:	2300      	movs	r3, #0
 8003b16:	220a      	movs	r2, #10
 8003b18:	4658      	mov	r0, fp
 8003b1a:	f000 f9d5 	bl	8003ec8 <__multadd>
 8003b1e:	42af      	cmp	r7, r5
 8003b20:	4681      	mov	r9, r0
 8003b22:	f04f 0300 	mov.w	r3, #0
 8003b26:	f04f 020a 	mov.w	r2, #10
 8003b2a:	4639      	mov	r1, r7
 8003b2c:	4658      	mov	r0, fp
 8003b2e:	d107      	bne.n	8003b40 <_dtoa_r+0xac8>
 8003b30:	f000 f9ca 	bl	8003ec8 <__multadd>
 8003b34:	4607      	mov	r7, r0
 8003b36:	4605      	mov	r5, r0
 8003b38:	9b07      	ldr	r3, [sp, #28]
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	9307      	str	r3, [sp, #28]
 8003b3e:	e774      	b.n	8003a2a <_dtoa_r+0x9b2>
 8003b40:	f000 f9c2 	bl	8003ec8 <__multadd>
 8003b44:	4629      	mov	r1, r5
 8003b46:	4607      	mov	r7, r0
 8003b48:	2300      	movs	r3, #0
 8003b4a:	220a      	movs	r2, #10
 8003b4c:	4658      	mov	r0, fp
 8003b4e:	f000 f9bb 	bl	8003ec8 <__multadd>
 8003b52:	4605      	mov	r5, r0
 8003b54:	e7f0      	b.n	8003b38 <_dtoa_r+0xac0>
 8003b56:	9b08      	ldr	r3, [sp, #32]
 8003b58:	2700      	movs	r7, #0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	bfcc      	ite	gt
 8003b5e:	461e      	movgt	r6, r3
 8003b60:	2601      	movle	r6, #1
 8003b62:	4456      	add	r6, sl
 8003b64:	4649      	mov	r1, r9
 8003b66:	2201      	movs	r2, #1
 8003b68:	4658      	mov	r0, fp
 8003b6a:	f000 fba1 	bl	80042b0 <__lshift>
 8003b6e:	4621      	mov	r1, r4
 8003b70:	4681      	mov	r9, r0
 8003b72:	f000 fc09 	bl	8004388 <__mcmp>
 8003b76:	2800      	cmp	r0, #0
 8003b78:	dcb0      	bgt.n	8003adc <_dtoa_r+0xa64>
 8003b7a:	d102      	bne.n	8003b82 <_dtoa_r+0xb0a>
 8003b7c:	f018 0f01 	tst.w	r8, #1
 8003b80:	d1ac      	bne.n	8003adc <_dtoa_r+0xa64>
 8003b82:	4633      	mov	r3, r6
 8003b84:	461e      	mov	r6, r3
 8003b86:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003b8a:	2a30      	cmp	r2, #48	@ 0x30
 8003b8c:	d0fa      	beq.n	8003b84 <_dtoa_r+0xb0c>
 8003b8e:	e5be      	b.n	800370e <_dtoa_r+0x696>
 8003b90:	459a      	cmp	sl, r3
 8003b92:	d1a4      	bne.n	8003ade <_dtoa_r+0xa66>
 8003b94:	9b04      	ldr	r3, [sp, #16]
 8003b96:	3301      	adds	r3, #1
 8003b98:	9304      	str	r3, [sp, #16]
 8003b9a:	2331      	movs	r3, #49	@ 0x31
 8003b9c:	f88a 3000 	strb.w	r3, [sl]
 8003ba0:	e5b5      	b.n	800370e <_dtoa_r+0x696>
 8003ba2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003ba4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8003c04 <_dtoa_r+0xb8c>
 8003ba8:	b11b      	cbz	r3, 8003bb2 <_dtoa_r+0xb3a>
 8003baa:	f10a 0308 	add.w	r3, sl, #8
 8003bae:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8003bb0:	6013      	str	r3, [r2, #0]
 8003bb2:	4650      	mov	r0, sl
 8003bb4:	b017      	add	sp, #92	@ 0x5c
 8003bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	f77f ae3d 	ble.w	800383c <_dtoa_r+0x7c4>
 8003bc2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003bc4:	930a      	str	r3, [sp, #40]	@ 0x28
 8003bc6:	2001      	movs	r0, #1
 8003bc8:	e65b      	b.n	8003882 <_dtoa_r+0x80a>
 8003bca:	9b08      	ldr	r3, [sp, #32]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f77f aed6 	ble.w	800397e <_dtoa_r+0x906>
 8003bd2:	4656      	mov	r6, sl
 8003bd4:	4621      	mov	r1, r4
 8003bd6:	4648      	mov	r0, r9
 8003bd8:	f7ff f9c6 	bl	8002f68 <quorem>
 8003bdc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8003be0:	9b08      	ldr	r3, [sp, #32]
 8003be2:	f806 8b01 	strb.w	r8, [r6], #1
 8003be6:	eba6 020a 	sub.w	r2, r6, sl
 8003bea:	4293      	cmp	r3, r2
 8003bec:	ddb3      	ble.n	8003b56 <_dtoa_r+0xade>
 8003bee:	4649      	mov	r1, r9
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	220a      	movs	r2, #10
 8003bf4:	4658      	mov	r0, fp
 8003bf6:	f000 f967 	bl	8003ec8 <__multadd>
 8003bfa:	4681      	mov	r9, r0
 8003bfc:	e7ea      	b.n	8003bd4 <_dtoa_r+0xb5c>
 8003bfe:	bf00      	nop
 8003c00:	080066c7 	.word	0x080066c7
 8003c04:	0800664b 	.word	0x0800664b

08003c08 <_free_r>:
 8003c08:	b538      	push	{r3, r4, r5, lr}
 8003c0a:	4605      	mov	r5, r0
 8003c0c:	2900      	cmp	r1, #0
 8003c0e:	d040      	beq.n	8003c92 <_free_r+0x8a>
 8003c10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c14:	1f0c      	subs	r4, r1, #4
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	bfb8      	it	lt
 8003c1a:	18e4      	addlt	r4, r4, r3
 8003c1c:	f000 f8e6 	bl	8003dec <__malloc_lock>
 8003c20:	4a1c      	ldr	r2, [pc, #112]	@ (8003c94 <_free_r+0x8c>)
 8003c22:	6813      	ldr	r3, [r2, #0]
 8003c24:	b933      	cbnz	r3, 8003c34 <_free_r+0x2c>
 8003c26:	6063      	str	r3, [r4, #4]
 8003c28:	6014      	str	r4, [r2, #0]
 8003c2a:	4628      	mov	r0, r5
 8003c2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c30:	f000 b8e2 	b.w	8003df8 <__malloc_unlock>
 8003c34:	42a3      	cmp	r3, r4
 8003c36:	d908      	bls.n	8003c4a <_free_r+0x42>
 8003c38:	6820      	ldr	r0, [r4, #0]
 8003c3a:	1821      	adds	r1, r4, r0
 8003c3c:	428b      	cmp	r3, r1
 8003c3e:	bf01      	itttt	eq
 8003c40:	6819      	ldreq	r1, [r3, #0]
 8003c42:	685b      	ldreq	r3, [r3, #4]
 8003c44:	1809      	addeq	r1, r1, r0
 8003c46:	6021      	streq	r1, [r4, #0]
 8003c48:	e7ed      	b.n	8003c26 <_free_r+0x1e>
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	b10b      	cbz	r3, 8003c54 <_free_r+0x4c>
 8003c50:	42a3      	cmp	r3, r4
 8003c52:	d9fa      	bls.n	8003c4a <_free_r+0x42>
 8003c54:	6811      	ldr	r1, [r2, #0]
 8003c56:	1850      	adds	r0, r2, r1
 8003c58:	42a0      	cmp	r0, r4
 8003c5a:	d10b      	bne.n	8003c74 <_free_r+0x6c>
 8003c5c:	6820      	ldr	r0, [r4, #0]
 8003c5e:	4401      	add	r1, r0
 8003c60:	1850      	adds	r0, r2, r1
 8003c62:	4283      	cmp	r3, r0
 8003c64:	6011      	str	r1, [r2, #0]
 8003c66:	d1e0      	bne.n	8003c2a <_free_r+0x22>
 8003c68:	6818      	ldr	r0, [r3, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	4408      	add	r0, r1
 8003c6e:	6010      	str	r0, [r2, #0]
 8003c70:	6053      	str	r3, [r2, #4]
 8003c72:	e7da      	b.n	8003c2a <_free_r+0x22>
 8003c74:	d902      	bls.n	8003c7c <_free_r+0x74>
 8003c76:	230c      	movs	r3, #12
 8003c78:	602b      	str	r3, [r5, #0]
 8003c7a:	e7d6      	b.n	8003c2a <_free_r+0x22>
 8003c7c:	6820      	ldr	r0, [r4, #0]
 8003c7e:	1821      	adds	r1, r4, r0
 8003c80:	428b      	cmp	r3, r1
 8003c82:	bf01      	itttt	eq
 8003c84:	6819      	ldreq	r1, [r3, #0]
 8003c86:	685b      	ldreq	r3, [r3, #4]
 8003c88:	1809      	addeq	r1, r1, r0
 8003c8a:	6021      	streq	r1, [r4, #0]
 8003c8c:	6063      	str	r3, [r4, #4]
 8003c8e:	6054      	str	r4, [r2, #4]
 8003c90:	e7cb      	b.n	8003c2a <_free_r+0x22>
 8003c92:	bd38      	pop	{r3, r4, r5, pc}
 8003c94:	20000340 	.word	0x20000340

08003c98 <malloc>:
 8003c98:	4b02      	ldr	r3, [pc, #8]	@ (8003ca4 <malloc+0xc>)
 8003c9a:	4601      	mov	r1, r0
 8003c9c:	6818      	ldr	r0, [r3, #0]
 8003c9e:	f000 b825 	b.w	8003cec <_malloc_r>
 8003ca2:	bf00      	nop
 8003ca4:	20000018 	.word	0x20000018

08003ca8 <sbrk_aligned>:
 8003ca8:	b570      	push	{r4, r5, r6, lr}
 8003caa:	4e0f      	ldr	r6, [pc, #60]	@ (8003ce8 <sbrk_aligned+0x40>)
 8003cac:	460c      	mov	r4, r1
 8003cae:	6831      	ldr	r1, [r6, #0]
 8003cb0:	4605      	mov	r5, r0
 8003cb2:	b911      	cbnz	r1, 8003cba <sbrk_aligned+0x12>
 8003cb4:	f001 fdf6 	bl	80058a4 <_sbrk_r>
 8003cb8:	6030      	str	r0, [r6, #0]
 8003cba:	4621      	mov	r1, r4
 8003cbc:	4628      	mov	r0, r5
 8003cbe:	f001 fdf1 	bl	80058a4 <_sbrk_r>
 8003cc2:	1c43      	adds	r3, r0, #1
 8003cc4:	d103      	bne.n	8003cce <sbrk_aligned+0x26>
 8003cc6:	f04f 34ff 	mov.w	r4, #4294967295
 8003cca:	4620      	mov	r0, r4
 8003ccc:	bd70      	pop	{r4, r5, r6, pc}
 8003cce:	1cc4      	adds	r4, r0, #3
 8003cd0:	f024 0403 	bic.w	r4, r4, #3
 8003cd4:	42a0      	cmp	r0, r4
 8003cd6:	d0f8      	beq.n	8003cca <sbrk_aligned+0x22>
 8003cd8:	1a21      	subs	r1, r4, r0
 8003cda:	4628      	mov	r0, r5
 8003cdc:	f001 fde2 	bl	80058a4 <_sbrk_r>
 8003ce0:	3001      	adds	r0, #1
 8003ce2:	d1f2      	bne.n	8003cca <sbrk_aligned+0x22>
 8003ce4:	e7ef      	b.n	8003cc6 <sbrk_aligned+0x1e>
 8003ce6:	bf00      	nop
 8003ce8:	2000033c 	.word	0x2000033c

08003cec <_malloc_r>:
 8003cec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003cf0:	1ccd      	adds	r5, r1, #3
 8003cf2:	f025 0503 	bic.w	r5, r5, #3
 8003cf6:	3508      	adds	r5, #8
 8003cf8:	2d0c      	cmp	r5, #12
 8003cfa:	bf38      	it	cc
 8003cfc:	250c      	movcc	r5, #12
 8003cfe:	2d00      	cmp	r5, #0
 8003d00:	4606      	mov	r6, r0
 8003d02:	db01      	blt.n	8003d08 <_malloc_r+0x1c>
 8003d04:	42a9      	cmp	r1, r5
 8003d06:	d904      	bls.n	8003d12 <_malloc_r+0x26>
 8003d08:	230c      	movs	r3, #12
 8003d0a:	6033      	str	r3, [r6, #0]
 8003d0c:	2000      	movs	r0, #0
 8003d0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003de8 <_malloc_r+0xfc>
 8003d16:	f000 f869 	bl	8003dec <__malloc_lock>
 8003d1a:	f8d8 3000 	ldr.w	r3, [r8]
 8003d1e:	461c      	mov	r4, r3
 8003d20:	bb44      	cbnz	r4, 8003d74 <_malloc_r+0x88>
 8003d22:	4629      	mov	r1, r5
 8003d24:	4630      	mov	r0, r6
 8003d26:	f7ff ffbf 	bl	8003ca8 <sbrk_aligned>
 8003d2a:	1c43      	adds	r3, r0, #1
 8003d2c:	4604      	mov	r4, r0
 8003d2e:	d158      	bne.n	8003de2 <_malloc_r+0xf6>
 8003d30:	f8d8 4000 	ldr.w	r4, [r8]
 8003d34:	4627      	mov	r7, r4
 8003d36:	2f00      	cmp	r7, #0
 8003d38:	d143      	bne.n	8003dc2 <_malloc_r+0xd6>
 8003d3a:	2c00      	cmp	r4, #0
 8003d3c:	d04b      	beq.n	8003dd6 <_malloc_r+0xea>
 8003d3e:	6823      	ldr	r3, [r4, #0]
 8003d40:	4639      	mov	r1, r7
 8003d42:	4630      	mov	r0, r6
 8003d44:	eb04 0903 	add.w	r9, r4, r3
 8003d48:	f001 fdac 	bl	80058a4 <_sbrk_r>
 8003d4c:	4581      	cmp	r9, r0
 8003d4e:	d142      	bne.n	8003dd6 <_malloc_r+0xea>
 8003d50:	6821      	ldr	r1, [r4, #0]
 8003d52:	4630      	mov	r0, r6
 8003d54:	1a6d      	subs	r5, r5, r1
 8003d56:	4629      	mov	r1, r5
 8003d58:	f7ff ffa6 	bl	8003ca8 <sbrk_aligned>
 8003d5c:	3001      	adds	r0, #1
 8003d5e:	d03a      	beq.n	8003dd6 <_malloc_r+0xea>
 8003d60:	6823      	ldr	r3, [r4, #0]
 8003d62:	442b      	add	r3, r5
 8003d64:	6023      	str	r3, [r4, #0]
 8003d66:	f8d8 3000 	ldr.w	r3, [r8]
 8003d6a:	685a      	ldr	r2, [r3, #4]
 8003d6c:	bb62      	cbnz	r2, 8003dc8 <_malloc_r+0xdc>
 8003d6e:	f8c8 7000 	str.w	r7, [r8]
 8003d72:	e00f      	b.n	8003d94 <_malloc_r+0xa8>
 8003d74:	6822      	ldr	r2, [r4, #0]
 8003d76:	1b52      	subs	r2, r2, r5
 8003d78:	d420      	bmi.n	8003dbc <_malloc_r+0xd0>
 8003d7a:	2a0b      	cmp	r2, #11
 8003d7c:	d917      	bls.n	8003dae <_malloc_r+0xc2>
 8003d7e:	1961      	adds	r1, r4, r5
 8003d80:	42a3      	cmp	r3, r4
 8003d82:	6025      	str	r5, [r4, #0]
 8003d84:	bf18      	it	ne
 8003d86:	6059      	strne	r1, [r3, #4]
 8003d88:	6863      	ldr	r3, [r4, #4]
 8003d8a:	bf08      	it	eq
 8003d8c:	f8c8 1000 	streq.w	r1, [r8]
 8003d90:	5162      	str	r2, [r4, r5]
 8003d92:	604b      	str	r3, [r1, #4]
 8003d94:	4630      	mov	r0, r6
 8003d96:	f000 f82f 	bl	8003df8 <__malloc_unlock>
 8003d9a:	f104 000b 	add.w	r0, r4, #11
 8003d9e:	1d23      	adds	r3, r4, #4
 8003da0:	f020 0007 	bic.w	r0, r0, #7
 8003da4:	1ac2      	subs	r2, r0, r3
 8003da6:	bf1c      	itt	ne
 8003da8:	1a1b      	subne	r3, r3, r0
 8003daa:	50a3      	strne	r3, [r4, r2]
 8003dac:	e7af      	b.n	8003d0e <_malloc_r+0x22>
 8003dae:	6862      	ldr	r2, [r4, #4]
 8003db0:	42a3      	cmp	r3, r4
 8003db2:	bf0c      	ite	eq
 8003db4:	f8c8 2000 	streq.w	r2, [r8]
 8003db8:	605a      	strne	r2, [r3, #4]
 8003dba:	e7eb      	b.n	8003d94 <_malloc_r+0xa8>
 8003dbc:	4623      	mov	r3, r4
 8003dbe:	6864      	ldr	r4, [r4, #4]
 8003dc0:	e7ae      	b.n	8003d20 <_malloc_r+0x34>
 8003dc2:	463c      	mov	r4, r7
 8003dc4:	687f      	ldr	r7, [r7, #4]
 8003dc6:	e7b6      	b.n	8003d36 <_malloc_r+0x4a>
 8003dc8:	461a      	mov	r2, r3
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	42a3      	cmp	r3, r4
 8003dce:	d1fb      	bne.n	8003dc8 <_malloc_r+0xdc>
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	6053      	str	r3, [r2, #4]
 8003dd4:	e7de      	b.n	8003d94 <_malloc_r+0xa8>
 8003dd6:	230c      	movs	r3, #12
 8003dd8:	4630      	mov	r0, r6
 8003dda:	6033      	str	r3, [r6, #0]
 8003ddc:	f000 f80c 	bl	8003df8 <__malloc_unlock>
 8003de0:	e794      	b.n	8003d0c <_malloc_r+0x20>
 8003de2:	6005      	str	r5, [r0, #0]
 8003de4:	e7d6      	b.n	8003d94 <_malloc_r+0xa8>
 8003de6:	bf00      	nop
 8003de8:	20000340 	.word	0x20000340

08003dec <__malloc_lock>:
 8003dec:	4801      	ldr	r0, [pc, #4]	@ (8003df4 <__malloc_lock+0x8>)
 8003dee:	f7ff b8a6 	b.w	8002f3e <__retarget_lock_acquire_recursive>
 8003df2:	bf00      	nop
 8003df4:	20000338 	.word	0x20000338

08003df8 <__malloc_unlock>:
 8003df8:	4801      	ldr	r0, [pc, #4]	@ (8003e00 <__malloc_unlock+0x8>)
 8003dfa:	f7ff b8a1 	b.w	8002f40 <__retarget_lock_release_recursive>
 8003dfe:	bf00      	nop
 8003e00:	20000338 	.word	0x20000338

08003e04 <_Balloc>:
 8003e04:	b570      	push	{r4, r5, r6, lr}
 8003e06:	69c6      	ldr	r6, [r0, #28]
 8003e08:	4604      	mov	r4, r0
 8003e0a:	460d      	mov	r5, r1
 8003e0c:	b976      	cbnz	r6, 8003e2c <_Balloc+0x28>
 8003e0e:	2010      	movs	r0, #16
 8003e10:	f7ff ff42 	bl	8003c98 <malloc>
 8003e14:	4602      	mov	r2, r0
 8003e16:	61e0      	str	r0, [r4, #28]
 8003e18:	b920      	cbnz	r0, 8003e24 <_Balloc+0x20>
 8003e1a:	216b      	movs	r1, #107	@ 0x6b
 8003e1c:	4b17      	ldr	r3, [pc, #92]	@ (8003e7c <_Balloc+0x78>)
 8003e1e:	4818      	ldr	r0, [pc, #96]	@ (8003e80 <_Balloc+0x7c>)
 8003e20:	f001 fd64 	bl	80058ec <__assert_func>
 8003e24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003e28:	6006      	str	r6, [r0, #0]
 8003e2a:	60c6      	str	r6, [r0, #12]
 8003e2c:	69e6      	ldr	r6, [r4, #28]
 8003e2e:	68f3      	ldr	r3, [r6, #12]
 8003e30:	b183      	cbz	r3, 8003e54 <_Balloc+0x50>
 8003e32:	69e3      	ldr	r3, [r4, #28]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003e3a:	b9b8      	cbnz	r0, 8003e6c <_Balloc+0x68>
 8003e3c:	2101      	movs	r1, #1
 8003e3e:	fa01 f605 	lsl.w	r6, r1, r5
 8003e42:	1d72      	adds	r2, r6, #5
 8003e44:	4620      	mov	r0, r4
 8003e46:	0092      	lsls	r2, r2, #2
 8003e48:	f001 fd6e 	bl	8005928 <_calloc_r>
 8003e4c:	b160      	cbz	r0, 8003e68 <_Balloc+0x64>
 8003e4e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8003e52:	e00e      	b.n	8003e72 <_Balloc+0x6e>
 8003e54:	2221      	movs	r2, #33	@ 0x21
 8003e56:	2104      	movs	r1, #4
 8003e58:	4620      	mov	r0, r4
 8003e5a:	f001 fd65 	bl	8005928 <_calloc_r>
 8003e5e:	69e3      	ldr	r3, [r4, #28]
 8003e60:	60f0      	str	r0, [r6, #12]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1e4      	bne.n	8003e32 <_Balloc+0x2e>
 8003e68:	2000      	movs	r0, #0
 8003e6a:	bd70      	pop	{r4, r5, r6, pc}
 8003e6c:	6802      	ldr	r2, [r0, #0]
 8003e6e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8003e72:	2300      	movs	r3, #0
 8003e74:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003e78:	e7f7      	b.n	8003e6a <_Balloc+0x66>
 8003e7a:	bf00      	nop
 8003e7c:	08006658 	.word	0x08006658
 8003e80:	080066d8 	.word	0x080066d8

08003e84 <_Bfree>:
 8003e84:	b570      	push	{r4, r5, r6, lr}
 8003e86:	69c6      	ldr	r6, [r0, #28]
 8003e88:	4605      	mov	r5, r0
 8003e8a:	460c      	mov	r4, r1
 8003e8c:	b976      	cbnz	r6, 8003eac <_Bfree+0x28>
 8003e8e:	2010      	movs	r0, #16
 8003e90:	f7ff ff02 	bl	8003c98 <malloc>
 8003e94:	4602      	mov	r2, r0
 8003e96:	61e8      	str	r0, [r5, #28]
 8003e98:	b920      	cbnz	r0, 8003ea4 <_Bfree+0x20>
 8003e9a:	218f      	movs	r1, #143	@ 0x8f
 8003e9c:	4b08      	ldr	r3, [pc, #32]	@ (8003ec0 <_Bfree+0x3c>)
 8003e9e:	4809      	ldr	r0, [pc, #36]	@ (8003ec4 <_Bfree+0x40>)
 8003ea0:	f001 fd24 	bl	80058ec <__assert_func>
 8003ea4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003ea8:	6006      	str	r6, [r0, #0]
 8003eaa:	60c6      	str	r6, [r0, #12]
 8003eac:	b13c      	cbz	r4, 8003ebe <_Bfree+0x3a>
 8003eae:	69eb      	ldr	r3, [r5, #28]
 8003eb0:	6862      	ldr	r2, [r4, #4]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003eb8:	6021      	str	r1, [r4, #0]
 8003eba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8003ebe:	bd70      	pop	{r4, r5, r6, pc}
 8003ec0:	08006658 	.word	0x08006658
 8003ec4:	080066d8 	.word	0x080066d8

08003ec8 <__multadd>:
 8003ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ecc:	4607      	mov	r7, r0
 8003ece:	460c      	mov	r4, r1
 8003ed0:	461e      	mov	r6, r3
 8003ed2:	2000      	movs	r0, #0
 8003ed4:	690d      	ldr	r5, [r1, #16]
 8003ed6:	f101 0c14 	add.w	ip, r1, #20
 8003eda:	f8dc 3000 	ldr.w	r3, [ip]
 8003ede:	3001      	adds	r0, #1
 8003ee0:	b299      	uxth	r1, r3
 8003ee2:	fb02 6101 	mla	r1, r2, r1, r6
 8003ee6:	0c1e      	lsrs	r6, r3, #16
 8003ee8:	0c0b      	lsrs	r3, r1, #16
 8003eea:	fb02 3306 	mla	r3, r2, r6, r3
 8003eee:	b289      	uxth	r1, r1
 8003ef0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8003ef4:	4285      	cmp	r5, r0
 8003ef6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8003efa:	f84c 1b04 	str.w	r1, [ip], #4
 8003efe:	dcec      	bgt.n	8003eda <__multadd+0x12>
 8003f00:	b30e      	cbz	r6, 8003f46 <__multadd+0x7e>
 8003f02:	68a3      	ldr	r3, [r4, #8]
 8003f04:	42ab      	cmp	r3, r5
 8003f06:	dc19      	bgt.n	8003f3c <__multadd+0x74>
 8003f08:	6861      	ldr	r1, [r4, #4]
 8003f0a:	4638      	mov	r0, r7
 8003f0c:	3101      	adds	r1, #1
 8003f0e:	f7ff ff79 	bl	8003e04 <_Balloc>
 8003f12:	4680      	mov	r8, r0
 8003f14:	b928      	cbnz	r0, 8003f22 <__multadd+0x5a>
 8003f16:	4602      	mov	r2, r0
 8003f18:	21ba      	movs	r1, #186	@ 0xba
 8003f1a:	4b0c      	ldr	r3, [pc, #48]	@ (8003f4c <__multadd+0x84>)
 8003f1c:	480c      	ldr	r0, [pc, #48]	@ (8003f50 <__multadd+0x88>)
 8003f1e:	f001 fce5 	bl	80058ec <__assert_func>
 8003f22:	6922      	ldr	r2, [r4, #16]
 8003f24:	f104 010c 	add.w	r1, r4, #12
 8003f28:	3202      	adds	r2, #2
 8003f2a:	0092      	lsls	r2, r2, #2
 8003f2c:	300c      	adds	r0, #12
 8003f2e:	f001 fcc9 	bl	80058c4 <memcpy>
 8003f32:	4621      	mov	r1, r4
 8003f34:	4638      	mov	r0, r7
 8003f36:	f7ff ffa5 	bl	8003e84 <_Bfree>
 8003f3a:	4644      	mov	r4, r8
 8003f3c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003f40:	3501      	adds	r5, #1
 8003f42:	615e      	str	r6, [r3, #20]
 8003f44:	6125      	str	r5, [r4, #16]
 8003f46:	4620      	mov	r0, r4
 8003f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f4c:	080066c7 	.word	0x080066c7
 8003f50:	080066d8 	.word	0x080066d8

08003f54 <__s2b>:
 8003f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f58:	4615      	mov	r5, r2
 8003f5a:	2209      	movs	r2, #9
 8003f5c:	461f      	mov	r7, r3
 8003f5e:	3308      	adds	r3, #8
 8003f60:	460c      	mov	r4, r1
 8003f62:	fb93 f3f2 	sdiv	r3, r3, r2
 8003f66:	4606      	mov	r6, r0
 8003f68:	2201      	movs	r2, #1
 8003f6a:	2100      	movs	r1, #0
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	db09      	blt.n	8003f84 <__s2b+0x30>
 8003f70:	4630      	mov	r0, r6
 8003f72:	f7ff ff47 	bl	8003e04 <_Balloc>
 8003f76:	b940      	cbnz	r0, 8003f8a <__s2b+0x36>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	21d3      	movs	r1, #211	@ 0xd3
 8003f7c:	4b18      	ldr	r3, [pc, #96]	@ (8003fe0 <__s2b+0x8c>)
 8003f7e:	4819      	ldr	r0, [pc, #100]	@ (8003fe4 <__s2b+0x90>)
 8003f80:	f001 fcb4 	bl	80058ec <__assert_func>
 8003f84:	0052      	lsls	r2, r2, #1
 8003f86:	3101      	adds	r1, #1
 8003f88:	e7f0      	b.n	8003f6c <__s2b+0x18>
 8003f8a:	9b08      	ldr	r3, [sp, #32]
 8003f8c:	2d09      	cmp	r5, #9
 8003f8e:	6143      	str	r3, [r0, #20]
 8003f90:	f04f 0301 	mov.w	r3, #1
 8003f94:	6103      	str	r3, [r0, #16]
 8003f96:	dd16      	ble.n	8003fc6 <__s2b+0x72>
 8003f98:	f104 0909 	add.w	r9, r4, #9
 8003f9c:	46c8      	mov	r8, r9
 8003f9e:	442c      	add	r4, r5
 8003fa0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8003fa4:	4601      	mov	r1, r0
 8003fa6:	220a      	movs	r2, #10
 8003fa8:	4630      	mov	r0, r6
 8003faa:	3b30      	subs	r3, #48	@ 0x30
 8003fac:	f7ff ff8c 	bl	8003ec8 <__multadd>
 8003fb0:	45a0      	cmp	r8, r4
 8003fb2:	d1f5      	bne.n	8003fa0 <__s2b+0x4c>
 8003fb4:	f1a5 0408 	sub.w	r4, r5, #8
 8003fb8:	444c      	add	r4, r9
 8003fba:	1b2d      	subs	r5, r5, r4
 8003fbc:	1963      	adds	r3, r4, r5
 8003fbe:	42bb      	cmp	r3, r7
 8003fc0:	db04      	blt.n	8003fcc <__s2b+0x78>
 8003fc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003fc6:	2509      	movs	r5, #9
 8003fc8:	340a      	adds	r4, #10
 8003fca:	e7f6      	b.n	8003fba <__s2b+0x66>
 8003fcc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003fd0:	4601      	mov	r1, r0
 8003fd2:	220a      	movs	r2, #10
 8003fd4:	4630      	mov	r0, r6
 8003fd6:	3b30      	subs	r3, #48	@ 0x30
 8003fd8:	f7ff ff76 	bl	8003ec8 <__multadd>
 8003fdc:	e7ee      	b.n	8003fbc <__s2b+0x68>
 8003fde:	bf00      	nop
 8003fe0:	080066c7 	.word	0x080066c7
 8003fe4:	080066d8 	.word	0x080066d8

08003fe8 <__hi0bits>:
 8003fe8:	4603      	mov	r3, r0
 8003fea:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8003fee:	bf3a      	itte	cc
 8003ff0:	0403      	lslcc	r3, r0, #16
 8003ff2:	2010      	movcc	r0, #16
 8003ff4:	2000      	movcs	r0, #0
 8003ff6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ffa:	bf3c      	itt	cc
 8003ffc:	021b      	lslcc	r3, r3, #8
 8003ffe:	3008      	addcc	r0, #8
 8004000:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004004:	bf3c      	itt	cc
 8004006:	011b      	lslcc	r3, r3, #4
 8004008:	3004      	addcc	r0, #4
 800400a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800400e:	bf3c      	itt	cc
 8004010:	009b      	lslcc	r3, r3, #2
 8004012:	3002      	addcc	r0, #2
 8004014:	2b00      	cmp	r3, #0
 8004016:	db05      	blt.n	8004024 <__hi0bits+0x3c>
 8004018:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800401c:	f100 0001 	add.w	r0, r0, #1
 8004020:	bf08      	it	eq
 8004022:	2020      	moveq	r0, #32
 8004024:	4770      	bx	lr

08004026 <__lo0bits>:
 8004026:	6803      	ldr	r3, [r0, #0]
 8004028:	4602      	mov	r2, r0
 800402a:	f013 0007 	ands.w	r0, r3, #7
 800402e:	d00b      	beq.n	8004048 <__lo0bits+0x22>
 8004030:	07d9      	lsls	r1, r3, #31
 8004032:	d421      	bmi.n	8004078 <__lo0bits+0x52>
 8004034:	0798      	lsls	r0, r3, #30
 8004036:	bf49      	itett	mi
 8004038:	085b      	lsrmi	r3, r3, #1
 800403a:	089b      	lsrpl	r3, r3, #2
 800403c:	2001      	movmi	r0, #1
 800403e:	6013      	strmi	r3, [r2, #0]
 8004040:	bf5c      	itt	pl
 8004042:	2002      	movpl	r0, #2
 8004044:	6013      	strpl	r3, [r2, #0]
 8004046:	4770      	bx	lr
 8004048:	b299      	uxth	r1, r3
 800404a:	b909      	cbnz	r1, 8004050 <__lo0bits+0x2a>
 800404c:	2010      	movs	r0, #16
 800404e:	0c1b      	lsrs	r3, r3, #16
 8004050:	b2d9      	uxtb	r1, r3
 8004052:	b909      	cbnz	r1, 8004058 <__lo0bits+0x32>
 8004054:	3008      	adds	r0, #8
 8004056:	0a1b      	lsrs	r3, r3, #8
 8004058:	0719      	lsls	r1, r3, #28
 800405a:	bf04      	itt	eq
 800405c:	091b      	lsreq	r3, r3, #4
 800405e:	3004      	addeq	r0, #4
 8004060:	0799      	lsls	r1, r3, #30
 8004062:	bf04      	itt	eq
 8004064:	089b      	lsreq	r3, r3, #2
 8004066:	3002      	addeq	r0, #2
 8004068:	07d9      	lsls	r1, r3, #31
 800406a:	d403      	bmi.n	8004074 <__lo0bits+0x4e>
 800406c:	085b      	lsrs	r3, r3, #1
 800406e:	f100 0001 	add.w	r0, r0, #1
 8004072:	d003      	beq.n	800407c <__lo0bits+0x56>
 8004074:	6013      	str	r3, [r2, #0]
 8004076:	4770      	bx	lr
 8004078:	2000      	movs	r0, #0
 800407a:	4770      	bx	lr
 800407c:	2020      	movs	r0, #32
 800407e:	4770      	bx	lr

08004080 <__i2b>:
 8004080:	b510      	push	{r4, lr}
 8004082:	460c      	mov	r4, r1
 8004084:	2101      	movs	r1, #1
 8004086:	f7ff febd 	bl	8003e04 <_Balloc>
 800408a:	4602      	mov	r2, r0
 800408c:	b928      	cbnz	r0, 800409a <__i2b+0x1a>
 800408e:	f240 1145 	movw	r1, #325	@ 0x145
 8004092:	4b04      	ldr	r3, [pc, #16]	@ (80040a4 <__i2b+0x24>)
 8004094:	4804      	ldr	r0, [pc, #16]	@ (80040a8 <__i2b+0x28>)
 8004096:	f001 fc29 	bl	80058ec <__assert_func>
 800409a:	2301      	movs	r3, #1
 800409c:	6144      	str	r4, [r0, #20]
 800409e:	6103      	str	r3, [r0, #16]
 80040a0:	bd10      	pop	{r4, pc}
 80040a2:	bf00      	nop
 80040a4:	080066c7 	.word	0x080066c7
 80040a8:	080066d8 	.word	0x080066d8

080040ac <__multiply>:
 80040ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040b0:	4614      	mov	r4, r2
 80040b2:	690a      	ldr	r2, [r1, #16]
 80040b4:	6923      	ldr	r3, [r4, #16]
 80040b6:	460f      	mov	r7, r1
 80040b8:	429a      	cmp	r2, r3
 80040ba:	bfa2      	ittt	ge
 80040bc:	4623      	movge	r3, r4
 80040be:	460c      	movge	r4, r1
 80040c0:	461f      	movge	r7, r3
 80040c2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80040c6:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80040ca:	68a3      	ldr	r3, [r4, #8]
 80040cc:	6861      	ldr	r1, [r4, #4]
 80040ce:	eb0a 0609 	add.w	r6, sl, r9
 80040d2:	42b3      	cmp	r3, r6
 80040d4:	b085      	sub	sp, #20
 80040d6:	bfb8      	it	lt
 80040d8:	3101      	addlt	r1, #1
 80040da:	f7ff fe93 	bl	8003e04 <_Balloc>
 80040de:	b930      	cbnz	r0, 80040ee <__multiply+0x42>
 80040e0:	4602      	mov	r2, r0
 80040e2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80040e6:	4b43      	ldr	r3, [pc, #268]	@ (80041f4 <__multiply+0x148>)
 80040e8:	4843      	ldr	r0, [pc, #268]	@ (80041f8 <__multiply+0x14c>)
 80040ea:	f001 fbff 	bl	80058ec <__assert_func>
 80040ee:	f100 0514 	add.w	r5, r0, #20
 80040f2:	462b      	mov	r3, r5
 80040f4:	2200      	movs	r2, #0
 80040f6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80040fa:	4543      	cmp	r3, r8
 80040fc:	d321      	bcc.n	8004142 <__multiply+0x96>
 80040fe:	f107 0114 	add.w	r1, r7, #20
 8004102:	f104 0214 	add.w	r2, r4, #20
 8004106:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800410a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800410e:	9302      	str	r3, [sp, #8]
 8004110:	1b13      	subs	r3, r2, r4
 8004112:	3b15      	subs	r3, #21
 8004114:	f023 0303 	bic.w	r3, r3, #3
 8004118:	3304      	adds	r3, #4
 800411a:	f104 0715 	add.w	r7, r4, #21
 800411e:	42ba      	cmp	r2, r7
 8004120:	bf38      	it	cc
 8004122:	2304      	movcc	r3, #4
 8004124:	9301      	str	r3, [sp, #4]
 8004126:	9b02      	ldr	r3, [sp, #8]
 8004128:	9103      	str	r1, [sp, #12]
 800412a:	428b      	cmp	r3, r1
 800412c:	d80c      	bhi.n	8004148 <__multiply+0x9c>
 800412e:	2e00      	cmp	r6, #0
 8004130:	dd03      	ble.n	800413a <__multiply+0x8e>
 8004132:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004136:	2b00      	cmp	r3, #0
 8004138:	d05a      	beq.n	80041f0 <__multiply+0x144>
 800413a:	6106      	str	r6, [r0, #16]
 800413c:	b005      	add	sp, #20
 800413e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004142:	f843 2b04 	str.w	r2, [r3], #4
 8004146:	e7d8      	b.n	80040fa <__multiply+0x4e>
 8004148:	f8b1 a000 	ldrh.w	sl, [r1]
 800414c:	f1ba 0f00 	cmp.w	sl, #0
 8004150:	d023      	beq.n	800419a <__multiply+0xee>
 8004152:	46a9      	mov	r9, r5
 8004154:	f04f 0c00 	mov.w	ip, #0
 8004158:	f104 0e14 	add.w	lr, r4, #20
 800415c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8004160:	f8d9 3000 	ldr.w	r3, [r9]
 8004164:	fa1f fb87 	uxth.w	fp, r7
 8004168:	b29b      	uxth	r3, r3
 800416a:	fb0a 330b 	mla	r3, sl, fp, r3
 800416e:	4463      	add	r3, ip
 8004170:	f8d9 c000 	ldr.w	ip, [r9]
 8004174:	0c3f      	lsrs	r7, r7, #16
 8004176:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800417a:	fb0a c707 	mla	r7, sl, r7, ip
 800417e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8004182:	b29b      	uxth	r3, r3
 8004184:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004188:	4572      	cmp	r2, lr
 800418a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800418e:	f849 3b04 	str.w	r3, [r9], #4
 8004192:	d8e3      	bhi.n	800415c <__multiply+0xb0>
 8004194:	9b01      	ldr	r3, [sp, #4]
 8004196:	f845 c003 	str.w	ip, [r5, r3]
 800419a:	9b03      	ldr	r3, [sp, #12]
 800419c:	3104      	adds	r1, #4
 800419e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80041a2:	f1b9 0f00 	cmp.w	r9, #0
 80041a6:	d021      	beq.n	80041ec <__multiply+0x140>
 80041a8:	46ae      	mov	lr, r5
 80041aa:	f04f 0a00 	mov.w	sl, #0
 80041ae:	682b      	ldr	r3, [r5, #0]
 80041b0:	f104 0c14 	add.w	ip, r4, #20
 80041b4:	f8bc b000 	ldrh.w	fp, [ip]
 80041b8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80041bc:	b29b      	uxth	r3, r3
 80041be:	fb09 770b 	mla	r7, r9, fp, r7
 80041c2:	4457      	add	r7, sl
 80041c4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80041c8:	f84e 3b04 	str.w	r3, [lr], #4
 80041cc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80041d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80041d4:	f8be 3000 	ldrh.w	r3, [lr]
 80041d8:	4562      	cmp	r2, ip
 80041da:	fb09 330a 	mla	r3, r9, sl, r3
 80041de:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80041e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80041e6:	d8e5      	bhi.n	80041b4 <__multiply+0x108>
 80041e8:	9f01      	ldr	r7, [sp, #4]
 80041ea:	51eb      	str	r3, [r5, r7]
 80041ec:	3504      	adds	r5, #4
 80041ee:	e79a      	b.n	8004126 <__multiply+0x7a>
 80041f0:	3e01      	subs	r6, #1
 80041f2:	e79c      	b.n	800412e <__multiply+0x82>
 80041f4:	080066c7 	.word	0x080066c7
 80041f8:	080066d8 	.word	0x080066d8

080041fc <__pow5mult>:
 80041fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004200:	4615      	mov	r5, r2
 8004202:	f012 0203 	ands.w	r2, r2, #3
 8004206:	4607      	mov	r7, r0
 8004208:	460e      	mov	r6, r1
 800420a:	d007      	beq.n	800421c <__pow5mult+0x20>
 800420c:	4c25      	ldr	r4, [pc, #148]	@ (80042a4 <__pow5mult+0xa8>)
 800420e:	3a01      	subs	r2, #1
 8004210:	2300      	movs	r3, #0
 8004212:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004216:	f7ff fe57 	bl	8003ec8 <__multadd>
 800421a:	4606      	mov	r6, r0
 800421c:	10ad      	asrs	r5, r5, #2
 800421e:	d03d      	beq.n	800429c <__pow5mult+0xa0>
 8004220:	69fc      	ldr	r4, [r7, #28]
 8004222:	b97c      	cbnz	r4, 8004244 <__pow5mult+0x48>
 8004224:	2010      	movs	r0, #16
 8004226:	f7ff fd37 	bl	8003c98 <malloc>
 800422a:	4602      	mov	r2, r0
 800422c:	61f8      	str	r0, [r7, #28]
 800422e:	b928      	cbnz	r0, 800423c <__pow5mult+0x40>
 8004230:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8004234:	4b1c      	ldr	r3, [pc, #112]	@ (80042a8 <__pow5mult+0xac>)
 8004236:	481d      	ldr	r0, [pc, #116]	@ (80042ac <__pow5mult+0xb0>)
 8004238:	f001 fb58 	bl	80058ec <__assert_func>
 800423c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004240:	6004      	str	r4, [r0, #0]
 8004242:	60c4      	str	r4, [r0, #12]
 8004244:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8004248:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800424c:	b94c      	cbnz	r4, 8004262 <__pow5mult+0x66>
 800424e:	f240 2171 	movw	r1, #625	@ 0x271
 8004252:	4638      	mov	r0, r7
 8004254:	f7ff ff14 	bl	8004080 <__i2b>
 8004258:	2300      	movs	r3, #0
 800425a:	4604      	mov	r4, r0
 800425c:	f8c8 0008 	str.w	r0, [r8, #8]
 8004260:	6003      	str	r3, [r0, #0]
 8004262:	f04f 0900 	mov.w	r9, #0
 8004266:	07eb      	lsls	r3, r5, #31
 8004268:	d50a      	bpl.n	8004280 <__pow5mult+0x84>
 800426a:	4631      	mov	r1, r6
 800426c:	4622      	mov	r2, r4
 800426e:	4638      	mov	r0, r7
 8004270:	f7ff ff1c 	bl	80040ac <__multiply>
 8004274:	4680      	mov	r8, r0
 8004276:	4631      	mov	r1, r6
 8004278:	4638      	mov	r0, r7
 800427a:	f7ff fe03 	bl	8003e84 <_Bfree>
 800427e:	4646      	mov	r6, r8
 8004280:	106d      	asrs	r5, r5, #1
 8004282:	d00b      	beq.n	800429c <__pow5mult+0xa0>
 8004284:	6820      	ldr	r0, [r4, #0]
 8004286:	b938      	cbnz	r0, 8004298 <__pow5mult+0x9c>
 8004288:	4622      	mov	r2, r4
 800428a:	4621      	mov	r1, r4
 800428c:	4638      	mov	r0, r7
 800428e:	f7ff ff0d 	bl	80040ac <__multiply>
 8004292:	6020      	str	r0, [r4, #0]
 8004294:	f8c0 9000 	str.w	r9, [r0]
 8004298:	4604      	mov	r4, r0
 800429a:	e7e4      	b.n	8004266 <__pow5mult+0x6a>
 800429c:	4630      	mov	r0, r6
 800429e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042a2:	bf00      	nop
 80042a4:	08006734 	.word	0x08006734
 80042a8:	08006658 	.word	0x08006658
 80042ac:	080066d8 	.word	0x080066d8

080042b0 <__lshift>:
 80042b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042b4:	460c      	mov	r4, r1
 80042b6:	4607      	mov	r7, r0
 80042b8:	4691      	mov	r9, r2
 80042ba:	6923      	ldr	r3, [r4, #16]
 80042bc:	6849      	ldr	r1, [r1, #4]
 80042be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80042c2:	68a3      	ldr	r3, [r4, #8]
 80042c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80042c8:	f108 0601 	add.w	r6, r8, #1
 80042cc:	42b3      	cmp	r3, r6
 80042ce:	db0b      	blt.n	80042e8 <__lshift+0x38>
 80042d0:	4638      	mov	r0, r7
 80042d2:	f7ff fd97 	bl	8003e04 <_Balloc>
 80042d6:	4605      	mov	r5, r0
 80042d8:	b948      	cbnz	r0, 80042ee <__lshift+0x3e>
 80042da:	4602      	mov	r2, r0
 80042dc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80042e0:	4b27      	ldr	r3, [pc, #156]	@ (8004380 <__lshift+0xd0>)
 80042e2:	4828      	ldr	r0, [pc, #160]	@ (8004384 <__lshift+0xd4>)
 80042e4:	f001 fb02 	bl	80058ec <__assert_func>
 80042e8:	3101      	adds	r1, #1
 80042ea:	005b      	lsls	r3, r3, #1
 80042ec:	e7ee      	b.n	80042cc <__lshift+0x1c>
 80042ee:	2300      	movs	r3, #0
 80042f0:	f100 0114 	add.w	r1, r0, #20
 80042f4:	f100 0210 	add.w	r2, r0, #16
 80042f8:	4618      	mov	r0, r3
 80042fa:	4553      	cmp	r3, sl
 80042fc:	db33      	blt.n	8004366 <__lshift+0xb6>
 80042fe:	6920      	ldr	r0, [r4, #16]
 8004300:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004304:	f104 0314 	add.w	r3, r4, #20
 8004308:	f019 091f 	ands.w	r9, r9, #31
 800430c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004310:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004314:	d02b      	beq.n	800436e <__lshift+0xbe>
 8004316:	468a      	mov	sl, r1
 8004318:	2200      	movs	r2, #0
 800431a:	f1c9 0e20 	rsb	lr, r9, #32
 800431e:	6818      	ldr	r0, [r3, #0]
 8004320:	fa00 f009 	lsl.w	r0, r0, r9
 8004324:	4310      	orrs	r0, r2
 8004326:	f84a 0b04 	str.w	r0, [sl], #4
 800432a:	f853 2b04 	ldr.w	r2, [r3], #4
 800432e:	459c      	cmp	ip, r3
 8004330:	fa22 f20e 	lsr.w	r2, r2, lr
 8004334:	d8f3      	bhi.n	800431e <__lshift+0x6e>
 8004336:	ebac 0304 	sub.w	r3, ip, r4
 800433a:	3b15      	subs	r3, #21
 800433c:	f023 0303 	bic.w	r3, r3, #3
 8004340:	3304      	adds	r3, #4
 8004342:	f104 0015 	add.w	r0, r4, #21
 8004346:	4584      	cmp	ip, r0
 8004348:	bf38      	it	cc
 800434a:	2304      	movcc	r3, #4
 800434c:	50ca      	str	r2, [r1, r3]
 800434e:	b10a      	cbz	r2, 8004354 <__lshift+0xa4>
 8004350:	f108 0602 	add.w	r6, r8, #2
 8004354:	3e01      	subs	r6, #1
 8004356:	4638      	mov	r0, r7
 8004358:	4621      	mov	r1, r4
 800435a:	612e      	str	r6, [r5, #16]
 800435c:	f7ff fd92 	bl	8003e84 <_Bfree>
 8004360:	4628      	mov	r0, r5
 8004362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004366:	f842 0f04 	str.w	r0, [r2, #4]!
 800436a:	3301      	adds	r3, #1
 800436c:	e7c5      	b.n	80042fa <__lshift+0x4a>
 800436e:	3904      	subs	r1, #4
 8004370:	f853 2b04 	ldr.w	r2, [r3], #4
 8004374:	459c      	cmp	ip, r3
 8004376:	f841 2f04 	str.w	r2, [r1, #4]!
 800437a:	d8f9      	bhi.n	8004370 <__lshift+0xc0>
 800437c:	e7ea      	b.n	8004354 <__lshift+0xa4>
 800437e:	bf00      	nop
 8004380:	080066c7 	.word	0x080066c7
 8004384:	080066d8 	.word	0x080066d8

08004388 <__mcmp>:
 8004388:	4603      	mov	r3, r0
 800438a:	690a      	ldr	r2, [r1, #16]
 800438c:	6900      	ldr	r0, [r0, #16]
 800438e:	b530      	push	{r4, r5, lr}
 8004390:	1a80      	subs	r0, r0, r2
 8004392:	d10e      	bne.n	80043b2 <__mcmp+0x2a>
 8004394:	3314      	adds	r3, #20
 8004396:	3114      	adds	r1, #20
 8004398:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800439c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80043a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80043a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80043a8:	4295      	cmp	r5, r2
 80043aa:	d003      	beq.n	80043b4 <__mcmp+0x2c>
 80043ac:	d205      	bcs.n	80043ba <__mcmp+0x32>
 80043ae:	f04f 30ff 	mov.w	r0, #4294967295
 80043b2:	bd30      	pop	{r4, r5, pc}
 80043b4:	42a3      	cmp	r3, r4
 80043b6:	d3f3      	bcc.n	80043a0 <__mcmp+0x18>
 80043b8:	e7fb      	b.n	80043b2 <__mcmp+0x2a>
 80043ba:	2001      	movs	r0, #1
 80043bc:	e7f9      	b.n	80043b2 <__mcmp+0x2a>
	...

080043c0 <__mdiff>:
 80043c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043c4:	4689      	mov	r9, r1
 80043c6:	4606      	mov	r6, r0
 80043c8:	4611      	mov	r1, r2
 80043ca:	4648      	mov	r0, r9
 80043cc:	4614      	mov	r4, r2
 80043ce:	f7ff ffdb 	bl	8004388 <__mcmp>
 80043d2:	1e05      	subs	r5, r0, #0
 80043d4:	d112      	bne.n	80043fc <__mdiff+0x3c>
 80043d6:	4629      	mov	r1, r5
 80043d8:	4630      	mov	r0, r6
 80043da:	f7ff fd13 	bl	8003e04 <_Balloc>
 80043de:	4602      	mov	r2, r0
 80043e0:	b928      	cbnz	r0, 80043ee <__mdiff+0x2e>
 80043e2:	f240 2137 	movw	r1, #567	@ 0x237
 80043e6:	4b3e      	ldr	r3, [pc, #248]	@ (80044e0 <__mdiff+0x120>)
 80043e8:	483e      	ldr	r0, [pc, #248]	@ (80044e4 <__mdiff+0x124>)
 80043ea:	f001 fa7f 	bl	80058ec <__assert_func>
 80043ee:	2301      	movs	r3, #1
 80043f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80043f4:	4610      	mov	r0, r2
 80043f6:	b003      	add	sp, #12
 80043f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043fc:	bfbc      	itt	lt
 80043fe:	464b      	movlt	r3, r9
 8004400:	46a1      	movlt	r9, r4
 8004402:	4630      	mov	r0, r6
 8004404:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004408:	bfba      	itte	lt
 800440a:	461c      	movlt	r4, r3
 800440c:	2501      	movlt	r5, #1
 800440e:	2500      	movge	r5, #0
 8004410:	f7ff fcf8 	bl	8003e04 <_Balloc>
 8004414:	4602      	mov	r2, r0
 8004416:	b918      	cbnz	r0, 8004420 <__mdiff+0x60>
 8004418:	f240 2145 	movw	r1, #581	@ 0x245
 800441c:	4b30      	ldr	r3, [pc, #192]	@ (80044e0 <__mdiff+0x120>)
 800441e:	e7e3      	b.n	80043e8 <__mdiff+0x28>
 8004420:	f100 0b14 	add.w	fp, r0, #20
 8004424:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004428:	f109 0310 	add.w	r3, r9, #16
 800442c:	60c5      	str	r5, [r0, #12]
 800442e:	f04f 0c00 	mov.w	ip, #0
 8004432:	f109 0514 	add.w	r5, r9, #20
 8004436:	46d9      	mov	r9, fp
 8004438:	6926      	ldr	r6, [r4, #16]
 800443a:	f104 0e14 	add.w	lr, r4, #20
 800443e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8004442:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8004446:	9301      	str	r3, [sp, #4]
 8004448:	9b01      	ldr	r3, [sp, #4]
 800444a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800444e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8004452:	b281      	uxth	r1, r0
 8004454:	9301      	str	r3, [sp, #4]
 8004456:	fa1f f38a 	uxth.w	r3, sl
 800445a:	1a5b      	subs	r3, r3, r1
 800445c:	0c00      	lsrs	r0, r0, #16
 800445e:	4463      	add	r3, ip
 8004460:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8004464:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8004468:	b29b      	uxth	r3, r3
 800446a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800446e:	4576      	cmp	r6, lr
 8004470:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004474:	f849 3b04 	str.w	r3, [r9], #4
 8004478:	d8e6      	bhi.n	8004448 <__mdiff+0x88>
 800447a:	1b33      	subs	r3, r6, r4
 800447c:	3b15      	subs	r3, #21
 800447e:	f023 0303 	bic.w	r3, r3, #3
 8004482:	3415      	adds	r4, #21
 8004484:	3304      	adds	r3, #4
 8004486:	42a6      	cmp	r6, r4
 8004488:	bf38      	it	cc
 800448a:	2304      	movcc	r3, #4
 800448c:	441d      	add	r5, r3
 800448e:	445b      	add	r3, fp
 8004490:	461e      	mov	r6, r3
 8004492:	462c      	mov	r4, r5
 8004494:	4544      	cmp	r4, r8
 8004496:	d30e      	bcc.n	80044b6 <__mdiff+0xf6>
 8004498:	f108 0103 	add.w	r1, r8, #3
 800449c:	1b49      	subs	r1, r1, r5
 800449e:	f021 0103 	bic.w	r1, r1, #3
 80044a2:	3d03      	subs	r5, #3
 80044a4:	45a8      	cmp	r8, r5
 80044a6:	bf38      	it	cc
 80044a8:	2100      	movcc	r1, #0
 80044aa:	440b      	add	r3, r1
 80044ac:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80044b0:	b199      	cbz	r1, 80044da <__mdiff+0x11a>
 80044b2:	6117      	str	r7, [r2, #16]
 80044b4:	e79e      	b.n	80043f4 <__mdiff+0x34>
 80044b6:	46e6      	mov	lr, ip
 80044b8:	f854 1b04 	ldr.w	r1, [r4], #4
 80044bc:	fa1f fc81 	uxth.w	ip, r1
 80044c0:	44f4      	add	ip, lr
 80044c2:	0c08      	lsrs	r0, r1, #16
 80044c4:	4471      	add	r1, lr
 80044c6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80044ca:	b289      	uxth	r1, r1
 80044cc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80044d0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80044d4:	f846 1b04 	str.w	r1, [r6], #4
 80044d8:	e7dc      	b.n	8004494 <__mdiff+0xd4>
 80044da:	3f01      	subs	r7, #1
 80044dc:	e7e6      	b.n	80044ac <__mdiff+0xec>
 80044de:	bf00      	nop
 80044e0:	080066c7 	.word	0x080066c7
 80044e4:	080066d8 	.word	0x080066d8

080044e8 <__ulp>:
 80044e8:	4b0e      	ldr	r3, [pc, #56]	@ (8004524 <__ulp+0x3c>)
 80044ea:	400b      	ands	r3, r1
 80044ec:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	dc08      	bgt.n	8004506 <__ulp+0x1e>
 80044f4:	425b      	negs	r3, r3
 80044f6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80044fa:	ea4f 5223 	mov.w	r2, r3, asr #20
 80044fe:	da04      	bge.n	800450a <__ulp+0x22>
 8004500:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004504:	4113      	asrs	r3, r2
 8004506:	2200      	movs	r2, #0
 8004508:	e008      	b.n	800451c <__ulp+0x34>
 800450a:	f1a2 0314 	sub.w	r3, r2, #20
 800450e:	2b1e      	cmp	r3, #30
 8004510:	bfd6      	itet	le
 8004512:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8004516:	2201      	movgt	r2, #1
 8004518:	40da      	lsrle	r2, r3
 800451a:	2300      	movs	r3, #0
 800451c:	4619      	mov	r1, r3
 800451e:	4610      	mov	r0, r2
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	7ff00000 	.word	0x7ff00000

08004528 <__b2d>:
 8004528:	6902      	ldr	r2, [r0, #16]
 800452a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800452c:	f100 0614 	add.w	r6, r0, #20
 8004530:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8004534:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8004538:	4f1e      	ldr	r7, [pc, #120]	@ (80045b4 <__b2d+0x8c>)
 800453a:	4620      	mov	r0, r4
 800453c:	f7ff fd54 	bl	8003fe8 <__hi0bits>
 8004540:	4603      	mov	r3, r0
 8004542:	f1c0 0020 	rsb	r0, r0, #32
 8004546:	2b0a      	cmp	r3, #10
 8004548:	f1a2 0504 	sub.w	r5, r2, #4
 800454c:	6008      	str	r0, [r1, #0]
 800454e:	dc12      	bgt.n	8004576 <__b2d+0x4e>
 8004550:	42ae      	cmp	r6, r5
 8004552:	bf2c      	ite	cs
 8004554:	2200      	movcs	r2, #0
 8004556:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800455a:	f1c3 0c0b 	rsb	ip, r3, #11
 800455e:	3315      	adds	r3, #21
 8004560:	fa24 fe0c 	lsr.w	lr, r4, ip
 8004564:	fa04 f303 	lsl.w	r3, r4, r3
 8004568:	fa22 f20c 	lsr.w	r2, r2, ip
 800456c:	ea4e 0107 	orr.w	r1, lr, r7
 8004570:	431a      	orrs	r2, r3
 8004572:	4610      	mov	r0, r2
 8004574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004576:	42ae      	cmp	r6, r5
 8004578:	bf36      	itet	cc
 800457a:	f1a2 0508 	subcc.w	r5, r2, #8
 800457e:	2200      	movcs	r2, #0
 8004580:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8004584:	3b0b      	subs	r3, #11
 8004586:	d012      	beq.n	80045ae <__b2d+0x86>
 8004588:	f1c3 0720 	rsb	r7, r3, #32
 800458c:	fa22 f107 	lsr.w	r1, r2, r7
 8004590:	409c      	lsls	r4, r3
 8004592:	430c      	orrs	r4, r1
 8004594:	42b5      	cmp	r5, r6
 8004596:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800459a:	bf94      	ite	ls
 800459c:	2400      	movls	r4, #0
 800459e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 80045a2:	409a      	lsls	r2, r3
 80045a4:	40fc      	lsrs	r4, r7
 80045a6:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80045aa:	4322      	orrs	r2, r4
 80045ac:	e7e1      	b.n	8004572 <__b2d+0x4a>
 80045ae:	ea44 0107 	orr.w	r1, r4, r7
 80045b2:	e7de      	b.n	8004572 <__b2d+0x4a>
 80045b4:	3ff00000 	.word	0x3ff00000

080045b8 <__d2b>:
 80045b8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80045bc:	2101      	movs	r1, #1
 80045be:	4690      	mov	r8, r2
 80045c0:	4699      	mov	r9, r3
 80045c2:	9e08      	ldr	r6, [sp, #32]
 80045c4:	f7ff fc1e 	bl	8003e04 <_Balloc>
 80045c8:	4604      	mov	r4, r0
 80045ca:	b930      	cbnz	r0, 80045da <__d2b+0x22>
 80045cc:	4602      	mov	r2, r0
 80045ce:	f240 310f 	movw	r1, #783	@ 0x30f
 80045d2:	4b23      	ldr	r3, [pc, #140]	@ (8004660 <__d2b+0xa8>)
 80045d4:	4823      	ldr	r0, [pc, #140]	@ (8004664 <__d2b+0xac>)
 80045d6:	f001 f989 	bl	80058ec <__assert_func>
 80045da:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80045de:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80045e2:	b10d      	cbz	r5, 80045e8 <__d2b+0x30>
 80045e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80045e8:	9301      	str	r3, [sp, #4]
 80045ea:	f1b8 0300 	subs.w	r3, r8, #0
 80045ee:	d024      	beq.n	800463a <__d2b+0x82>
 80045f0:	4668      	mov	r0, sp
 80045f2:	9300      	str	r3, [sp, #0]
 80045f4:	f7ff fd17 	bl	8004026 <__lo0bits>
 80045f8:	e9dd 1200 	ldrd	r1, r2, [sp]
 80045fc:	b1d8      	cbz	r0, 8004636 <__d2b+0x7e>
 80045fe:	f1c0 0320 	rsb	r3, r0, #32
 8004602:	fa02 f303 	lsl.w	r3, r2, r3
 8004606:	430b      	orrs	r3, r1
 8004608:	40c2      	lsrs	r2, r0
 800460a:	6163      	str	r3, [r4, #20]
 800460c:	9201      	str	r2, [sp, #4]
 800460e:	9b01      	ldr	r3, [sp, #4]
 8004610:	2b00      	cmp	r3, #0
 8004612:	bf0c      	ite	eq
 8004614:	2201      	moveq	r2, #1
 8004616:	2202      	movne	r2, #2
 8004618:	61a3      	str	r3, [r4, #24]
 800461a:	6122      	str	r2, [r4, #16]
 800461c:	b1ad      	cbz	r5, 800464a <__d2b+0x92>
 800461e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8004622:	4405      	add	r5, r0
 8004624:	6035      	str	r5, [r6, #0]
 8004626:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800462a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800462c:	6018      	str	r0, [r3, #0]
 800462e:	4620      	mov	r0, r4
 8004630:	b002      	add	sp, #8
 8004632:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8004636:	6161      	str	r1, [r4, #20]
 8004638:	e7e9      	b.n	800460e <__d2b+0x56>
 800463a:	a801      	add	r0, sp, #4
 800463c:	f7ff fcf3 	bl	8004026 <__lo0bits>
 8004640:	9b01      	ldr	r3, [sp, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	6163      	str	r3, [r4, #20]
 8004646:	3020      	adds	r0, #32
 8004648:	e7e7      	b.n	800461a <__d2b+0x62>
 800464a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800464e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004652:	6030      	str	r0, [r6, #0]
 8004654:	6918      	ldr	r0, [r3, #16]
 8004656:	f7ff fcc7 	bl	8003fe8 <__hi0bits>
 800465a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800465e:	e7e4      	b.n	800462a <__d2b+0x72>
 8004660:	080066c7 	.word	0x080066c7
 8004664:	080066d8 	.word	0x080066d8

08004668 <__ratio>:
 8004668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800466c:	b085      	sub	sp, #20
 800466e:	e9cd 1000 	strd	r1, r0, [sp]
 8004672:	a902      	add	r1, sp, #8
 8004674:	f7ff ff58 	bl	8004528 <__b2d>
 8004678:	468b      	mov	fp, r1
 800467a:	4606      	mov	r6, r0
 800467c:	460f      	mov	r7, r1
 800467e:	9800      	ldr	r0, [sp, #0]
 8004680:	a903      	add	r1, sp, #12
 8004682:	f7ff ff51 	bl	8004528 <__b2d>
 8004686:	460d      	mov	r5, r1
 8004688:	9b01      	ldr	r3, [sp, #4]
 800468a:	4689      	mov	r9, r1
 800468c:	6919      	ldr	r1, [r3, #16]
 800468e:	9b00      	ldr	r3, [sp, #0]
 8004690:	4604      	mov	r4, r0
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	4630      	mov	r0, r6
 8004696:	1ac9      	subs	r1, r1, r3
 8004698:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800469c:	1a9b      	subs	r3, r3, r2
 800469e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	bfcd      	iteet	gt
 80046a6:	463a      	movgt	r2, r7
 80046a8:	462a      	movle	r2, r5
 80046aa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80046ae:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80046b2:	bfd8      	it	le
 80046b4:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80046b8:	464b      	mov	r3, r9
 80046ba:	4622      	mov	r2, r4
 80046bc:	4659      	mov	r1, fp
 80046be:	f7fc f835 	bl	800072c <__aeabi_ddiv>
 80046c2:	b005      	add	sp, #20
 80046c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080046c8 <__copybits>:
 80046c8:	3901      	subs	r1, #1
 80046ca:	b570      	push	{r4, r5, r6, lr}
 80046cc:	1149      	asrs	r1, r1, #5
 80046ce:	6914      	ldr	r4, [r2, #16]
 80046d0:	3101      	adds	r1, #1
 80046d2:	f102 0314 	add.w	r3, r2, #20
 80046d6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80046da:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80046de:	1f05      	subs	r5, r0, #4
 80046e0:	42a3      	cmp	r3, r4
 80046e2:	d30c      	bcc.n	80046fe <__copybits+0x36>
 80046e4:	1aa3      	subs	r3, r4, r2
 80046e6:	3b11      	subs	r3, #17
 80046e8:	f023 0303 	bic.w	r3, r3, #3
 80046ec:	3211      	adds	r2, #17
 80046ee:	42a2      	cmp	r2, r4
 80046f0:	bf88      	it	hi
 80046f2:	2300      	movhi	r3, #0
 80046f4:	4418      	add	r0, r3
 80046f6:	2300      	movs	r3, #0
 80046f8:	4288      	cmp	r0, r1
 80046fa:	d305      	bcc.n	8004708 <__copybits+0x40>
 80046fc:	bd70      	pop	{r4, r5, r6, pc}
 80046fe:	f853 6b04 	ldr.w	r6, [r3], #4
 8004702:	f845 6f04 	str.w	r6, [r5, #4]!
 8004706:	e7eb      	b.n	80046e0 <__copybits+0x18>
 8004708:	f840 3b04 	str.w	r3, [r0], #4
 800470c:	e7f4      	b.n	80046f8 <__copybits+0x30>

0800470e <__any_on>:
 800470e:	f100 0214 	add.w	r2, r0, #20
 8004712:	6900      	ldr	r0, [r0, #16]
 8004714:	114b      	asrs	r3, r1, #5
 8004716:	4298      	cmp	r0, r3
 8004718:	b510      	push	{r4, lr}
 800471a:	db11      	blt.n	8004740 <__any_on+0x32>
 800471c:	dd0a      	ble.n	8004734 <__any_on+0x26>
 800471e:	f011 011f 	ands.w	r1, r1, #31
 8004722:	d007      	beq.n	8004734 <__any_on+0x26>
 8004724:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8004728:	fa24 f001 	lsr.w	r0, r4, r1
 800472c:	fa00 f101 	lsl.w	r1, r0, r1
 8004730:	428c      	cmp	r4, r1
 8004732:	d10b      	bne.n	800474c <__any_on+0x3e>
 8004734:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004738:	4293      	cmp	r3, r2
 800473a:	d803      	bhi.n	8004744 <__any_on+0x36>
 800473c:	2000      	movs	r0, #0
 800473e:	bd10      	pop	{r4, pc}
 8004740:	4603      	mov	r3, r0
 8004742:	e7f7      	b.n	8004734 <__any_on+0x26>
 8004744:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004748:	2900      	cmp	r1, #0
 800474a:	d0f5      	beq.n	8004738 <__any_on+0x2a>
 800474c:	2001      	movs	r0, #1
 800474e:	e7f6      	b.n	800473e <__any_on+0x30>

08004750 <sulp>:
 8004750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004754:	460f      	mov	r7, r1
 8004756:	4690      	mov	r8, r2
 8004758:	f7ff fec6 	bl	80044e8 <__ulp>
 800475c:	4604      	mov	r4, r0
 800475e:	460d      	mov	r5, r1
 8004760:	f1b8 0f00 	cmp.w	r8, #0
 8004764:	d011      	beq.n	800478a <sulp+0x3a>
 8004766:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800476a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800476e:	2b00      	cmp	r3, #0
 8004770:	dd0b      	ble.n	800478a <sulp+0x3a>
 8004772:	2400      	movs	r4, #0
 8004774:	051b      	lsls	r3, r3, #20
 8004776:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800477a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800477e:	4622      	mov	r2, r4
 8004780:	462b      	mov	r3, r5
 8004782:	f7fb fea9 	bl	80004d8 <__aeabi_dmul>
 8004786:	4604      	mov	r4, r0
 8004788:	460d      	mov	r5, r1
 800478a:	4620      	mov	r0, r4
 800478c:	4629      	mov	r1, r5
 800478e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004792:	0000      	movs	r0, r0
 8004794:	0000      	movs	r0, r0
	...

08004798 <_strtod_l>:
 8004798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800479c:	b09f      	sub	sp, #124	@ 0x7c
 800479e:	9217      	str	r2, [sp, #92]	@ 0x5c
 80047a0:	2200      	movs	r2, #0
 80047a2:	460c      	mov	r4, r1
 80047a4:	921a      	str	r2, [sp, #104]	@ 0x68
 80047a6:	f04f 0a00 	mov.w	sl, #0
 80047aa:	f04f 0b00 	mov.w	fp, #0
 80047ae:	460a      	mov	r2, r1
 80047b0:	9005      	str	r0, [sp, #20]
 80047b2:	9219      	str	r2, [sp, #100]	@ 0x64
 80047b4:	7811      	ldrb	r1, [r2, #0]
 80047b6:	292b      	cmp	r1, #43	@ 0x2b
 80047b8:	d048      	beq.n	800484c <_strtod_l+0xb4>
 80047ba:	d836      	bhi.n	800482a <_strtod_l+0x92>
 80047bc:	290d      	cmp	r1, #13
 80047be:	d830      	bhi.n	8004822 <_strtod_l+0x8a>
 80047c0:	2908      	cmp	r1, #8
 80047c2:	d830      	bhi.n	8004826 <_strtod_l+0x8e>
 80047c4:	2900      	cmp	r1, #0
 80047c6:	d039      	beq.n	800483c <_strtod_l+0xa4>
 80047c8:	2200      	movs	r2, #0
 80047ca:	920b      	str	r2, [sp, #44]	@ 0x2c
 80047cc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80047ce:	782a      	ldrb	r2, [r5, #0]
 80047d0:	2a30      	cmp	r2, #48	@ 0x30
 80047d2:	f040 80b1 	bne.w	8004938 <_strtod_l+0x1a0>
 80047d6:	786a      	ldrb	r2, [r5, #1]
 80047d8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80047dc:	2a58      	cmp	r2, #88	@ 0x58
 80047de:	d16c      	bne.n	80048ba <_strtod_l+0x122>
 80047e0:	9302      	str	r3, [sp, #8]
 80047e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80047e4:	4a8e      	ldr	r2, [pc, #568]	@ (8004a20 <_strtod_l+0x288>)
 80047e6:	9301      	str	r3, [sp, #4]
 80047e8:	ab1a      	add	r3, sp, #104	@ 0x68
 80047ea:	9300      	str	r3, [sp, #0]
 80047ec:	9805      	ldr	r0, [sp, #20]
 80047ee:	ab1b      	add	r3, sp, #108	@ 0x6c
 80047f0:	a919      	add	r1, sp, #100	@ 0x64
 80047f2:	f001 f915 	bl	8005a20 <__gethex>
 80047f6:	f010 060f 	ands.w	r6, r0, #15
 80047fa:	4604      	mov	r4, r0
 80047fc:	d005      	beq.n	800480a <_strtod_l+0x72>
 80047fe:	2e06      	cmp	r6, #6
 8004800:	d126      	bne.n	8004850 <_strtod_l+0xb8>
 8004802:	2300      	movs	r3, #0
 8004804:	3501      	adds	r5, #1
 8004806:	9519      	str	r5, [sp, #100]	@ 0x64
 8004808:	930b      	str	r3, [sp, #44]	@ 0x2c
 800480a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800480c:	2b00      	cmp	r3, #0
 800480e:	f040 8584 	bne.w	800531a <_strtod_l+0xb82>
 8004812:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004814:	b1bb      	cbz	r3, 8004846 <_strtod_l+0xae>
 8004816:	4650      	mov	r0, sl
 8004818:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800481c:	b01f      	add	sp, #124	@ 0x7c
 800481e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004822:	2920      	cmp	r1, #32
 8004824:	d1d0      	bne.n	80047c8 <_strtod_l+0x30>
 8004826:	3201      	adds	r2, #1
 8004828:	e7c3      	b.n	80047b2 <_strtod_l+0x1a>
 800482a:	292d      	cmp	r1, #45	@ 0x2d
 800482c:	d1cc      	bne.n	80047c8 <_strtod_l+0x30>
 800482e:	2101      	movs	r1, #1
 8004830:	910b      	str	r1, [sp, #44]	@ 0x2c
 8004832:	1c51      	adds	r1, r2, #1
 8004834:	9119      	str	r1, [sp, #100]	@ 0x64
 8004836:	7852      	ldrb	r2, [r2, #1]
 8004838:	2a00      	cmp	r2, #0
 800483a:	d1c7      	bne.n	80047cc <_strtod_l+0x34>
 800483c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800483e:	9419      	str	r4, [sp, #100]	@ 0x64
 8004840:	2b00      	cmp	r3, #0
 8004842:	f040 8568 	bne.w	8005316 <_strtod_l+0xb7e>
 8004846:	4650      	mov	r0, sl
 8004848:	4659      	mov	r1, fp
 800484a:	e7e7      	b.n	800481c <_strtod_l+0x84>
 800484c:	2100      	movs	r1, #0
 800484e:	e7ef      	b.n	8004830 <_strtod_l+0x98>
 8004850:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8004852:	b13a      	cbz	r2, 8004864 <_strtod_l+0xcc>
 8004854:	2135      	movs	r1, #53	@ 0x35
 8004856:	a81c      	add	r0, sp, #112	@ 0x70
 8004858:	f7ff ff36 	bl	80046c8 <__copybits>
 800485c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800485e:	9805      	ldr	r0, [sp, #20]
 8004860:	f7ff fb10 	bl	8003e84 <_Bfree>
 8004864:	3e01      	subs	r6, #1
 8004866:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8004868:	2e04      	cmp	r6, #4
 800486a:	d806      	bhi.n	800487a <_strtod_l+0xe2>
 800486c:	e8df f006 	tbb	[pc, r6]
 8004870:	201d0314 	.word	0x201d0314
 8004874:	14          	.byte	0x14
 8004875:	00          	.byte	0x00
 8004876:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800487a:	05e1      	lsls	r1, r4, #23
 800487c:	bf48      	it	mi
 800487e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8004882:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8004886:	0d1b      	lsrs	r3, r3, #20
 8004888:	051b      	lsls	r3, r3, #20
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1bd      	bne.n	800480a <_strtod_l+0x72>
 800488e:	f7fe fb2b 	bl	8002ee8 <__errno>
 8004892:	2322      	movs	r3, #34	@ 0x22
 8004894:	6003      	str	r3, [r0, #0]
 8004896:	e7b8      	b.n	800480a <_strtod_l+0x72>
 8004898:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800489c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80048a0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80048a4:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80048a8:	e7e7      	b.n	800487a <_strtod_l+0xe2>
 80048aa:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8004a24 <_strtod_l+0x28c>
 80048ae:	e7e4      	b.n	800487a <_strtod_l+0xe2>
 80048b0:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80048b4:	f04f 3aff 	mov.w	sl, #4294967295
 80048b8:	e7df      	b.n	800487a <_strtod_l+0xe2>
 80048ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80048bc:	1c5a      	adds	r2, r3, #1
 80048be:	9219      	str	r2, [sp, #100]	@ 0x64
 80048c0:	785b      	ldrb	r3, [r3, #1]
 80048c2:	2b30      	cmp	r3, #48	@ 0x30
 80048c4:	d0f9      	beq.n	80048ba <_strtod_l+0x122>
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d09f      	beq.n	800480a <_strtod_l+0x72>
 80048ca:	2301      	movs	r3, #1
 80048cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80048ce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80048d0:	220a      	movs	r2, #10
 80048d2:	930c      	str	r3, [sp, #48]	@ 0x30
 80048d4:	2300      	movs	r3, #0
 80048d6:	461f      	mov	r7, r3
 80048d8:	9308      	str	r3, [sp, #32]
 80048da:	930a      	str	r3, [sp, #40]	@ 0x28
 80048dc:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80048de:	7805      	ldrb	r5, [r0, #0]
 80048e0:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80048e4:	b2d9      	uxtb	r1, r3
 80048e6:	2909      	cmp	r1, #9
 80048e8:	d928      	bls.n	800493c <_strtod_l+0x1a4>
 80048ea:	2201      	movs	r2, #1
 80048ec:	494e      	ldr	r1, [pc, #312]	@ (8004a28 <_strtod_l+0x290>)
 80048ee:	f000 ffc7 	bl	8005880 <strncmp>
 80048f2:	2800      	cmp	r0, #0
 80048f4:	d032      	beq.n	800495c <_strtod_l+0x1c4>
 80048f6:	2000      	movs	r0, #0
 80048f8:	462a      	mov	r2, r5
 80048fa:	4681      	mov	r9, r0
 80048fc:	463d      	mov	r5, r7
 80048fe:	4603      	mov	r3, r0
 8004900:	2a65      	cmp	r2, #101	@ 0x65
 8004902:	d001      	beq.n	8004908 <_strtod_l+0x170>
 8004904:	2a45      	cmp	r2, #69	@ 0x45
 8004906:	d114      	bne.n	8004932 <_strtod_l+0x19a>
 8004908:	b91d      	cbnz	r5, 8004912 <_strtod_l+0x17a>
 800490a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800490c:	4302      	orrs	r2, r0
 800490e:	d095      	beq.n	800483c <_strtod_l+0xa4>
 8004910:	2500      	movs	r5, #0
 8004912:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8004914:	1c62      	adds	r2, r4, #1
 8004916:	9219      	str	r2, [sp, #100]	@ 0x64
 8004918:	7862      	ldrb	r2, [r4, #1]
 800491a:	2a2b      	cmp	r2, #43	@ 0x2b
 800491c:	d077      	beq.n	8004a0e <_strtod_l+0x276>
 800491e:	2a2d      	cmp	r2, #45	@ 0x2d
 8004920:	d07b      	beq.n	8004a1a <_strtod_l+0x282>
 8004922:	f04f 0c00 	mov.w	ip, #0
 8004926:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800492a:	2909      	cmp	r1, #9
 800492c:	f240 8082 	bls.w	8004a34 <_strtod_l+0x29c>
 8004930:	9419      	str	r4, [sp, #100]	@ 0x64
 8004932:	f04f 0800 	mov.w	r8, #0
 8004936:	e0a2      	b.n	8004a7e <_strtod_l+0x2e6>
 8004938:	2300      	movs	r3, #0
 800493a:	e7c7      	b.n	80048cc <_strtod_l+0x134>
 800493c:	2f08      	cmp	r7, #8
 800493e:	bfd5      	itete	le
 8004940:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8004942:	9908      	ldrgt	r1, [sp, #32]
 8004944:	fb02 3301 	mlale	r3, r2, r1, r3
 8004948:	fb02 3301 	mlagt	r3, r2, r1, r3
 800494c:	f100 0001 	add.w	r0, r0, #1
 8004950:	bfd4      	ite	le
 8004952:	930a      	strle	r3, [sp, #40]	@ 0x28
 8004954:	9308      	strgt	r3, [sp, #32]
 8004956:	3701      	adds	r7, #1
 8004958:	9019      	str	r0, [sp, #100]	@ 0x64
 800495a:	e7bf      	b.n	80048dc <_strtod_l+0x144>
 800495c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800495e:	1c5a      	adds	r2, r3, #1
 8004960:	9219      	str	r2, [sp, #100]	@ 0x64
 8004962:	785a      	ldrb	r2, [r3, #1]
 8004964:	b37f      	cbz	r7, 80049c6 <_strtod_l+0x22e>
 8004966:	4681      	mov	r9, r0
 8004968:	463d      	mov	r5, r7
 800496a:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800496e:	2b09      	cmp	r3, #9
 8004970:	d912      	bls.n	8004998 <_strtod_l+0x200>
 8004972:	2301      	movs	r3, #1
 8004974:	e7c4      	b.n	8004900 <_strtod_l+0x168>
 8004976:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004978:	3001      	adds	r0, #1
 800497a:	1c5a      	adds	r2, r3, #1
 800497c:	9219      	str	r2, [sp, #100]	@ 0x64
 800497e:	785a      	ldrb	r2, [r3, #1]
 8004980:	2a30      	cmp	r2, #48	@ 0x30
 8004982:	d0f8      	beq.n	8004976 <_strtod_l+0x1de>
 8004984:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8004988:	2b08      	cmp	r3, #8
 800498a:	f200 84cb 	bhi.w	8005324 <_strtod_l+0xb8c>
 800498e:	4681      	mov	r9, r0
 8004990:	2000      	movs	r0, #0
 8004992:	4605      	mov	r5, r0
 8004994:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004996:	930c      	str	r3, [sp, #48]	@ 0x30
 8004998:	3a30      	subs	r2, #48	@ 0x30
 800499a:	f100 0301 	add.w	r3, r0, #1
 800499e:	d02a      	beq.n	80049f6 <_strtod_l+0x25e>
 80049a0:	4499      	add	r9, r3
 80049a2:	210a      	movs	r1, #10
 80049a4:	462b      	mov	r3, r5
 80049a6:	eb00 0c05 	add.w	ip, r0, r5
 80049aa:	4563      	cmp	r3, ip
 80049ac:	d10d      	bne.n	80049ca <_strtod_l+0x232>
 80049ae:	1c69      	adds	r1, r5, #1
 80049b0:	4401      	add	r1, r0
 80049b2:	4428      	add	r0, r5
 80049b4:	2808      	cmp	r0, #8
 80049b6:	dc16      	bgt.n	80049e6 <_strtod_l+0x24e>
 80049b8:	230a      	movs	r3, #10
 80049ba:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80049bc:	fb03 2300 	mla	r3, r3, r0, r2
 80049c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80049c2:	2300      	movs	r3, #0
 80049c4:	e018      	b.n	80049f8 <_strtod_l+0x260>
 80049c6:	4638      	mov	r0, r7
 80049c8:	e7da      	b.n	8004980 <_strtod_l+0x1e8>
 80049ca:	2b08      	cmp	r3, #8
 80049cc:	f103 0301 	add.w	r3, r3, #1
 80049d0:	dc03      	bgt.n	80049da <_strtod_l+0x242>
 80049d2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80049d4:	434e      	muls	r6, r1
 80049d6:	960a      	str	r6, [sp, #40]	@ 0x28
 80049d8:	e7e7      	b.n	80049aa <_strtod_l+0x212>
 80049da:	2b10      	cmp	r3, #16
 80049dc:	bfde      	ittt	le
 80049de:	9e08      	ldrle	r6, [sp, #32]
 80049e0:	434e      	mulle	r6, r1
 80049e2:	9608      	strle	r6, [sp, #32]
 80049e4:	e7e1      	b.n	80049aa <_strtod_l+0x212>
 80049e6:	280f      	cmp	r0, #15
 80049e8:	dceb      	bgt.n	80049c2 <_strtod_l+0x22a>
 80049ea:	230a      	movs	r3, #10
 80049ec:	9808      	ldr	r0, [sp, #32]
 80049ee:	fb03 2300 	mla	r3, r3, r0, r2
 80049f2:	9308      	str	r3, [sp, #32]
 80049f4:	e7e5      	b.n	80049c2 <_strtod_l+0x22a>
 80049f6:	4629      	mov	r1, r5
 80049f8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80049fa:	460d      	mov	r5, r1
 80049fc:	1c50      	adds	r0, r2, #1
 80049fe:	9019      	str	r0, [sp, #100]	@ 0x64
 8004a00:	7852      	ldrb	r2, [r2, #1]
 8004a02:	4618      	mov	r0, r3
 8004a04:	e7b1      	b.n	800496a <_strtod_l+0x1d2>
 8004a06:	f04f 0900 	mov.w	r9, #0
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e77d      	b.n	800490a <_strtod_l+0x172>
 8004a0e:	f04f 0c00 	mov.w	ip, #0
 8004a12:	1ca2      	adds	r2, r4, #2
 8004a14:	9219      	str	r2, [sp, #100]	@ 0x64
 8004a16:	78a2      	ldrb	r2, [r4, #2]
 8004a18:	e785      	b.n	8004926 <_strtod_l+0x18e>
 8004a1a:	f04f 0c01 	mov.w	ip, #1
 8004a1e:	e7f8      	b.n	8004a12 <_strtod_l+0x27a>
 8004a20:	08006848 	.word	0x08006848
 8004a24:	7ff00000 	.word	0x7ff00000
 8004a28:	08006830 	.word	0x08006830
 8004a2c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004a2e:	1c51      	adds	r1, r2, #1
 8004a30:	9119      	str	r1, [sp, #100]	@ 0x64
 8004a32:	7852      	ldrb	r2, [r2, #1]
 8004a34:	2a30      	cmp	r2, #48	@ 0x30
 8004a36:	d0f9      	beq.n	8004a2c <_strtod_l+0x294>
 8004a38:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8004a3c:	2908      	cmp	r1, #8
 8004a3e:	f63f af78 	bhi.w	8004932 <_strtod_l+0x19a>
 8004a42:	f04f 080a 	mov.w	r8, #10
 8004a46:	3a30      	subs	r2, #48	@ 0x30
 8004a48:	920e      	str	r2, [sp, #56]	@ 0x38
 8004a4a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004a4c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8004a4e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004a50:	1c56      	adds	r6, r2, #1
 8004a52:	9619      	str	r6, [sp, #100]	@ 0x64
 8004a54:	7852      	ldrb	r2, [r2, #1]
 8004a56:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8004a5a:	f1be 0f09 	cmp.w	lr, #9
 8004a5e:	d939      	bls.n	8004ad4 <_strtod_l+0x33c>
 8004a60:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004a62:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8004a66:	1a76      	subs	r6, r6, r1
 8004a68:	2e08      	cmp	r6, #8
 8004a6a:	dc03      	bgt.n	8004a74 <_strtod_l+0x2dc>
 8004a6c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8004a6e:	4588      	cmp	r8, r1
 8004a70:	bfa8      	it	ge
 8004a72:	4688      	movge	r8, r1
 8004a74:	f1bc 0f00 	cmp.w	ip, #0
 8004a78:	d001      	beq.n	8004a7e <_strtod_l+0x2e6>
 8004a7a:	f1c8 0800 	rsb	r8, r8, #0
 8004a7e:	2d00      	cmp	r5, #0
 8004a80:	d14e      	bne.n	8004b20 <_strtod_l+0x388>
 8004a82:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004a84:	4308      	orrs	r0, r1
 8004a86:	f47f aec0 	bne.w	800480a <_strtod_l+0x72>
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	f47f aed6 	bne.w	800483c <_strtod_l+0xa4>
 8004a90:	2a69      	cmp	r2, #105	@ 0x69
 8004a92:	d028      	beq.n	8004ae6 <_strtod_l+0x34e>
 8004a94:	dc25      	bgt.n	8004ae2 <_strtod_l+0x34a>
 8004a96:	2a49      	cmp	r2, #73	@ 0x49
 8004a98:	d025      	beq.n	8004ae6 <_strtod_l+0x34e>
 8004a9a:	2a4e      	cmp	r2, #78	@ 0x4e
 8004a9c:	f47f aece 	bne.w	800483c <_strtod_l+0xa4>
 8004aa0:	499a      	ldr	r1, [pc, #616]	@ (8004d0c <_strtod_l+0x574>)
 8004aa2:	a819      	add	r0, sp, #100	@ 0x64
 8004aa4:	f001 f9de 	bl	8005e64 <__match>
 8004aa8:	2800      	cmp	r0, #0
 8004aaa:	f43f aec7 	beq.w	800483c <_strtod_l+0xa4>
 8004aae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	2b28      	cmp	r3, #40	@ 0x28
 8004ab4:	d12e      	bne.n	8004b14 <_strtod_l+0x37c>
 8004ab6:	4996      	ldr	r1, [pc, #600]	@ (8004d10 <_strtod_l+0x578>)
 8004ab8:	aa1c      	add	r2, sp, #112	@ 0x70
 8004aba:	a819      	add	r0, sp, #100	@ 0x64
 8004abc:	f001 f9e6 	bl	8005e8c <__hexnan>
 8004ac0:	2805      	cmp	r0, #5
 8004ac2:	d127      	bne.n	8004b14 <_strtod_l+0x37c>
 8004ac4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8004ac6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8004aca:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8004ace:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8004ad2:	e69a      	b.n	800480a <_strtod_l+0x72>
 8004ad4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8004ad6:	fb08 2101 	mla	r1, r8, r1, r2
 8004ada:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8004ade:	920e      	str	r2, [sp, #56]	@ 0x38
 8004ae0:	e7b5      	b.n	8004a4e <_strtod_l+0x2b6>
 8004ae2:	2a6e      	cmp	r2, #110	@ 0x6e
 8004ae4:	e7da      	b.n	8004a9c <_strtod_l+0x304>
 8004ae6:	498b      	ldr	r1, [pc, #556]	@ (8004d14 <_strtod_l+0x57c>)
 8004ae8:	a819      	add	r0, sp, #100	@ 0x64
 8004aea:	f001 f9bb 	bl	8005e64 <__match>
 8004aee:	2800      	cmp	r0, #0
 8004af0:	f43f aea4 	beq.w	800483c <_strtod_l+0xa4>
 8004af4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004af6:	4988      	ldr	r1, [pc, #544]	@ (8004d18 <_strtod_l+0x580>)
 8004af8:	3b01      	subs	r3, #1
 8004afa:	a819      	add	r0, sp, #100	@ 0x64
 8004afc:	9319      	str	r3, [sp, #100]	@ 0x64
 8004afe:	f001 f9b1 	bl	8005e64 <__match>
 8004b02:	b910      	cbnz	r0, 8004b0a <_strtod_l+0x372>
 8004b04:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004b06:	3301      	adds	r3, #1
 8004b08:	9319      	str	r3, [sp, #100]	@ 0x64
 8004b0a:	f04f 0a00 	mov.w	sl, #0
 8004b0e:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8004d1c <_strtod_l+0x584>
 8004b12:	e67a      	b.n	800480a <_strtod_l+0x72>
 8004b14:	4882      	ldr	r0, [pc, #520]	@ (8004d20 <_strtod_l+0x588>)
 8004b16:	f000 fee3 	bl	80058e0 <nan>
 8004b1a:	4682      	mov	sl, r0
 8004b1c:	468b      	mov	fp, r1
 8004b1e:	e674      	b.n	800480a <_strtod_l+0x72>
 8004b20:	eba8 0309 	sub.w	r3, r8, r9
 8004b24:	2f00      	cmp	r7, #0
 8004b26:	bf08      	it	eq
 8004b28:	462f      	moveq	r7, r5
 8004b2a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004b2c:	2d10      	cmp	r5, #16
 8004b2e:	462c      	mov	r4, r5
 8004b30:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b32:	bfa8      	it	ge
 8004b34:	2410      	movge	r4, #16
 8004b36:	f7fb fc55 	bl	80003e4 <__aeabi_ui2d>
 8004b3a:	2d09      	cmp	r5, #9
 8004b3c:	4682      	mov	sl, r0
 8004b3e:	468b      	mov	fp, r1
 8004b40:	dc11      	bgt.n	8004b66 <_strtod_l+0x3ce>
 8004b42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	f43f ae60 	beq.w	800480a <_strtod_l+0x72>
 8004b4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b4c:	dd76      	ble.n	8004c3c <_strtod_l+0x4a4>
 8004b4e:	2b16      	cmp	r3, #22
 8004b50:	dc5d      	bgt.n	8004c0e <_strtod_l+0x476>
 8004b52:	4974      	ldr	r1, [pc, #464]	@ (8004d24 <_strtod_l+0x58c>)
 8004b54:	4652      	mov	r2, sl
 8004b56:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004b5a:	465b      	mov	r3, fp
 8004b5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b60:	f7fb fcba 	bl	80004d8 <__aeabi_dmul>
 8004b64:	e7d9      	b.n	8004b1a <_strtod_l+0x382>
 8004b66:	4b6f      	ldr	r3, [pc, #444]	@ (8004d24 <_strtod_l+0x58c>)
 8004b68:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004b6c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8004b70:	f7fb fcb2 	bl	80004d8 <__aeabi_dmul>
 8004b74:	4682      	mov	sl, r0
 8004b76:	9808      	ldr	r0, [sp, #32]
 8004b78:	468b      	mov	fp, r1
 8004b7a:	f7fb fc33 	bl	80003e4 <__aeabi_ui2d>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	460b      	mov	r3, r1
 8004b82:	4650      	mov	r0, sl
 8004b84:	4659      	mov	r1, fp
 8004b86:	f7fb faf1 	bl	800016c <__adddf3>
 8004b8a:	2d0f      	cmp	r5, #15
 8004b8c:	4682      	mov	sl, r0
 8004b8e:	468b      	mov	fp, r1
 8004b90:	ddd7      	ble.n	8004b42 <_strtod_l+0x3aa>
 8004b92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b94:	1b2c      	subs	r4, r5, r4
 8004b96:	441c      	add	r4, r3
 8004b98:	2c00      	cmp	r4, #0
 8004b9a:	f340 8096 	ble.w	8004cca <_strtod_l+0x532>
 8004b9e:	f014 030f 	ands.w	r3, r4, #15
 8004ba2:	d00a      	beq.n	8004bba <_strtod_l+0x422>
 8004ba4:	495f      	ldr	r1, [pc, #380]	@ (8004d24 <_strtod_l+0x58c>)
 8004ba6:	4652      	mov	r2, sl
 8004ba8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004bac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004bb0:	465b      	mov	r3, fp
 8004bb2:	f7fb fc91 	bl	80004d8 <__aeabi_dmul>
 8004bb6:	4682      	mov	sl, r0
 8004bb8:	468b      	mov	fp, r1
 8004bba:	f034 040f 	bics.w	r4, r4, #15
 8004bbe:	d073      	beq.n	8004ca8 <_strtod_l+0x510>
 8004bc0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8004bc4:	dd48      	ble.n	8004c58 <_strtod_l+0x4c0>
 8004bc6:	2400      	movs	r4, #0
 8004bc8:	46a0      	mov	r8, r4
 8004bca:	46a1      	mov	r9, r4
 8004bcc:	940a      	str	r4, [sp, #40]	@ 0x28
 8004bce:	2322      	movs	r3, #34	@ 0x22
 8004bd0:	f04f 0a00 	mov.w	sl, #0
 8004bd4:	9a05      	ldr	r2, [sp, #20]
 8004bd6:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8004d1c <_strtod_l+0x584>
 8004bda:	6013      	str	r3, [r2, #0]
 8004bdc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	f43f ae13 	beq.w	800480a <_strtod_l+0x72>
 8004be4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004be6:	9805      	ldr	r0, [sp, #20]
 8004be8:	f7ff f94c 	bl	8003e84 <_Bfree>
 8004bec:	4649      	mov	r1, r9
 8004bee:	9805      	ldr	r0, [sp, #20]
 8004bf0:	f7ff f948 	bl	8003e84 <_Bfree>
 8004bf4:	4641      	mov	r1, r8
 8004bf6:	9805      	ldr	r0, [sp, #20]
 8004bf8:	f7ff f944 	bl	8003e84 <_Bfree>
 8004bfc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004bfe:	9805      	ldr	r0, [sp, #20]
 8004c00:	f7ff f940 	bl	8003e84 <_Bfree>
 8004c04:	4621      	mov	r1, r4
 8004c06:	9805      	ldr	r0, [sp, #20]
 8004c08:	f7ff f93c 	bl	8003e84 <_Bfree>
 8004c0c:	e5fd      	b.n	800480a <_strtod_l+0x72>
 8004c0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c10:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8004c14:	4293      	cmp	r3, r2
 8004c16:	dbbc      	blt.n	8004b92 <_strtod_l+0x3fa>
 8004c18:	4c42      	ldr	r4, [pc, #264]	@ (8004d24 <_strtod_l+0x58c>)
 8004c1a:	f1c5 050f 	rsb	r5, r5, #15
 8004c1e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8004c22:	4652      	mov	r2, sl
 8004c24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c28:	465b      	mov	r3, fp
 8004c2a:	f7fb fc55 	bl	80004d8 <__aeabi_dmul>
 8004c2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c30:	1b5d      	subs	r5, r3, r5
 8004c32:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8004c36:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004c3a:	e791      	b.n	8004b60 <_strtod_l+0x3c8>
 8004c3c:	3316      	adds	r3, #22
 8004c3e:	dba8      	blt.n	8004b92 <_strtod_l+0x3fa>
 8004c40:	4b38      	ldr	r3, [pc, #224]	@ (8004d24 <_strtod_l+0x58c>)
 8004c42:	eba9 0808 	sub.w	r8, r9, r8
 8004c46:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8004c4a:	4650      	mov	r0, sl
 8004c4c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8004c50:	4659      	mov	r1, fp
 8004c52:	f7fb fd6b 	bl	800072c <__aeabi_ddiv>
 8004c56:	e760      	b.n	8004b1a <_strtod_l+0x382>
 8004c58:	4b33      	ldr	r3, [pc, #204]	@ (8004d28 <_strtod_l+0x590>)
 8004c5a:	4650      	mov	r0, sl
 8004c5c:	9308      	str	r3, [sp, #32]
 8004c5e:	2300      	movs	r3, #0
 8004c60:	4659      	mov	r1, fp
 8004c62:	461e      	mov	r6, r3
 8004c64:	1124      	asrs	r4, r4, #4
 8004c66:	2c01      	cmp	r4, #1
 8004c68:	dc21      	bgt.n	8004cae <_strtod_l+0x516>
 8004c6a:	b10b      	cbz	r3, 8004c70 <_strtod_l+0x4d8>
 8004c6c:	4682      	mov	sl, r0
 8004c6e:	468b      	mov	fp, r1
 8004c70:	492d      	ldr	r1, [pc, #180]	@ (8004d28 <_strtod_l+0x590>)
 8004c72:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8004c76:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8004c7a:	4652      	mov	r2, sl
 8004c7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c80:	465b      	mov	r3, fp
 8004c82:	f7fb fc29 	bl	80004d8 <__aeabi_dmul>
 8004c86:	4b25      	ldr	r3, [pc, #148]	@ (8004d1c <_strtod_l+0x584>)
 8004c88:	460a      	mov	r2, r1
 8004c8a:	400b      	ands	r3, r1
 8004c8c:	4927      	ldr	r1, [pc, #156]	@ (8004d2c <_strtod_l+0x594>)
 8004c8e:	4682      	mov	sl, r0
 8004c90:	428b      	cmp	r3, r1
 8004c92:	d898      	bhi.n	8004bc6 <_strtod_l+0x42e>
 8004c94:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8004c98:	428b      	cmp	r3, r1
 8004c9a:	bf86      	itte	hi
 8004c9c:	f04f 3aff 	movhi.w	sl, #4294967295
 8004ca0:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8004d30 <_strtod_l+0x598>
 8004ca4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8004ca8:	2300      	movs	r3, #0
 8004caa:	9308      	str	r3, [sp, #32]
 8004cac:	e07a      	b.n	8004da4 <_strtod_l+0x60c>
 8004cae:	07e2      	lsls	r2, r4, #31
 8004cb0:	d505      	bpl.n	8004cbe <_strtod_l+0x526>
 8004cb2:	9b08      	ldr	r3, [sp, #32]
 8004cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb8:	f7fb fc0e 	bl	80004d8 <__aeabi_dmul>
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	9a08      	ldr	r2, [sp, #32]
 8004cc0:	3601      	adds	r6, #1
 8004cc2:	3208      	adds	r2, #8
 8004cc4:	1064      	asrs	r4, r4, #1
 8004cc6:	9208      	str	r2, [sp, #32]
 8004cc8:	e7cd      	b.n	8004c66 <_strtod_l+0x4ce>
 8004cca:	d0ed      	beq.n	8004ca8 <_strtod_l+0x510>
 8004ccc:	4264      	negs	r4, r4
 8004cce:	f014 020f 	ands.w	r2, r4, #15
 8004cd2:	d00a      	beq.n	8004cea <_strtod_l+0x552>
 8004cd4:	4b13      	ldr	r3, [pc, #76]	@ (8004d24 <_strtod_l+0x58c>)
 8004cd6:	4650      	mov	r0, sl
 8004cd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004cdc:	4659      	mov	r1, fp
 8004cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce2:	f7fb fd23 	bl	800072c <__aeabi_ddiv>
 8004ce6:	4682      	mov	sl, r0
 8004ce8:	468b      	mov	fp, r1
 8004cea:	1124      	asrs	r4, r4, #4
 8004cec:	d0dc      	beq.n	8004ca8 <_strtod_l+0x510>
 8004cee:	2c1f      	cmp	r4, #31
 8004cf0:	dd20      	ble.n	8004d34 <_strtod_l+0x59c>
 8004cf2:	2400      	movs	r4, #0
 8004cf4:	46a0      	mov	r8, r4
 8004cf6:	46a1      	mov	r9, r4
 8004cf8:	940a      	str	r4, [sp, #40]	@ 0x28
 8004cfa:	2322      	movs	r3, #34	@ 0x22
 8004cfc:	9a05      	ldr	r2, [sp, #20]
 8004cfe:	f04f 0a00 	mov.w	sl, #0
 8004d02:	f04f 0b00 	mov.w	fp, #0
 8004d06:	6013      	str	r3, [r2, #0]
 8004d08:	e768      	b.n	8004bdc <_strtod_l+0x444>
 8004d0a:	bf00      	nop
 8004d0c:	0800661f 	.word	0x0800661f
 8004d10:	08006834 	.word	0x08006834
 8004d14:	08006617 	.word	0x08006617
 8004d18:	0800664e 	.word	0x0800664e
 8004d1c:	7ff00000 	.word	0x7ff00000
 8004d20:	080069dd 	.word	0x080069dd
 8004d24:	08006768 	.word	0x08006768
 8004d28:	08006740 	.word	0x08006740
 8004d2c:	7ca00000 	.word	0x7ca00000
 8004d30:	7fefffff 	.word	0x7fefffff
 8004d34:	f014 0310 	ands.w	r3, r4, #16
 8004d38:	bf18      	it	ne
 8004d3a:	236a      	movne	r3, #106	@ 0x6a
 8004d3c:	4650      	mov	r0, sl
 8004d3e:	9308      	str	r3, [sp, #32]
 8004d40:	4659      	mov	r1, fp
 8004d42:	2300      	movs	r3, #0
 8004d44:	4ea9      	ldr	r6, [pc, #676]	@ (8004fec <_strtod_l+0x854>)
 8004d46:	07e2      	lsls	r2, r4, #31
 8004d48:	d504      	bpl.n	8004d54 <_strtod_l+0x5bc>
 8004d4a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004d4e:	f7fb fbc3 	bl	80004d8 <__aeabi_dmul>
 8004d52:	2301      	movs	r3, #1
 8004d54:	1064      	asrs	r4, r4, #1
 8004d56:	f106 0608 	add.w	r6, r6, #8
 8004d5a:	d1f4      	bne.n	8004d46 <_strtod_l+0x5ae>
 8004d5c:	b10b      	cbz	r3, 8004d62 <_strtod_l+0x5ca>
 8004d5e:	4682      	mov	sl, r0
 8004d60:	468b      	mov	fp, r1
 8004d62:	9b08      	ldr	r3, [sp, #32]
 8004d64:	b1b3      	cbz	r3, 8004d94 <_strtod_l+0x5fc>
 8004d66:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8004d6a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	4659      	mov	r1, fp
 8004d72:	dd0f      	ble.n	8004d94 <_strtod_l+0x5fc>
 8004d74:	2b1f      	cmp	r3, #31
 8004d76:	dd57      	ble.n	8004e28 <_strtod_l+0x690>
 8004d78:	2b34      	cmp	r3, #52	@ 0x34
 8004d7a:	bfd8      	it	le
 8004d7c:	f04f 33ff 	movle.w	r3, #4294967295
 8004d80:	f04f 0a00 	mov.w	sl, #0
 8004d84:	bfcf      	iteee	gt
 8004d86:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8004d8a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8004d8e:	4093      	lslle	r3, r2
 8004d90:	ea03 0b01 	andle.w	fp, r3, r1
 8004d94:	2200      	movs	r2, #0
 8004d96:	2300      	movs	r3, #0
 8004d98:	4650      	mov	r0, sl
 8004d9a:	4659      	mov	r1, fp
 8004d9c:	f7fb fe04 	bl	80009a8 <__aeabi_dcmpeq>
 8004da0:	2800      	cmp	r0, #0
 8004da2:	d1a6      	bne.n	8004cf2 <_strtod_l+0x55a>
 8004da4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004da6:	463a      	mov	r2, r7
 8004da8:	9300      	str	r3, [sp, #0]
 8004daa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8004dac:	462b      	mov	r3, r5
 8004dae:	9805      	ldr	r0, [sp, #20]
 8004db0:	f7ff f8d0 	bl	8003f54 <__s2b>
 8004db4:	900a      	str	r0, [sp, #40]	@ 0x28
 8004db6:	2800      	cmp	r0, #0
 8004db8:	f43f af05 	beq.w	8004bc6 <_strtod_l+0x42e>
 8004dbc:	2400      	movs	r4, #0
 8004dbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004dc0:	eba9 0308 	sub.w	r3, r9, r8
 8004dc4:	2a00      	cmp	r2, #0
 8004dc6:	bfa8      	it	ge
 8004dc8:	2300      	movge	r3, #0
 8004dca:	46a0      	mov	r8, r4
 8004dcc:	9312      	str	r3, [sp, #72]	@ 0x48
 8004dce:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8004dd2:	9316      	str	r3, [sp, #88]	@ 0x58
 8004dd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004dd6:	9805      	ldr	r0, [sp, #20]
 8004dd8:	6859      	ldr	r1, [r3, #4]
 8004dda:	f7ff f813 	bl	8003e04 <_Balloc>
 8004dde:	4681      	mov	r9, r0
 8004de0:	2800      	cmp	r0, #0
 8004de2:	f43f aef4 	beq.w	8004bce <_strtod_l+0x436>
 8004de6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004de8:	300c      	adds	r0, #12
 8004dea:	691a      	ldr	r2, [r3, #16]
 8004dec:	f103 010c 	add.w	r1, r3, #12
 8004df0:	3202      	adds	r2, #2
 8004df2:	0092      	lsls	r2, r2, #2
 8004df4:	f000 fd66 	bl	80058c4 <memcpy>
 8004df8:	ab1c      	add	r3, sp, #112	@ 0x70
 8004dfa:	9301      	str	r3, [sp, #4]
 8004dfc:	ab1b      	add	r3, sp, #108	@ 0x6c
 8004dfe:	9300      	str	r3, [sp, #0]
 8004e00:	4652      	mov	r2, sl
 8004e02:	465b      	mov	r3, fp
 8004e04:	9805      	ldr	r0, [sp, #20]
 8004e06:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8004e0a:	f7ff fbd5 	bl	80045b8 <__d2b>
 8004e0e:	901a      	str	r0, [sp, #104]	@ 0x68
 8004e10:	2800      	cmp	r0, #0
 8004e12:	f43f aedc 	beq.w	8004bce <_strtod_l+0x436>
 8004e16:	2101      	movs	r1, #1
 8004e18:	9805      	ldr	r0, [sp, #20]
 8004e1a:	f7ff f931 	bl	8004080 <__i2b>
 8004e1e:	4680      	mov	r8, r0
 8004e20:	b948      	cbnz	r0, 8004e36 <_strtod_l+0x69e>
 8004e22:	f04f 0800 	mov.w	r8, #0
 8004e26:	e6d2      	b.n	8004bce <_strtod_l+0x436>
 8004e28:	f04f 32ff 	mov.w	r2, #4294967295
 8004e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e30:	ea03 0a0a 	and.w	sl, r3, sl
 8004e34:	e7ae      	b.n	8004d94 <_strtod_l+0x5fc>
 8004e36:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8004e38:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8004e3a:	2d00      	cmp	r5, #0
 8004e3c:	bfab      	itete	ge
 8004e3e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8004e40:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8004e42:	18ef      	addge	r7, r5, r3
 8004e44:	1b5e      	sublt	r6, r3, r5
 8004e46:	9b08      	ldr	r3, [sp, #32]
 8004e48:	bfa8      	it	ge
 8004e4a:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8004e4c:	eba5 0503 	sub.w	r5, r5, r3
 8004e50:	4415      	add	r5, r2
 8004e52:	4b67      	ldr	r3, [pc, #412]	@ (8004ff0 <_strtod_l+0x858>)
 8004e54:	f105 35ff 	add.w	r5, r5, #4294967295
 8004e58:	bfb8      	it	lt
 8004e5a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8004e5c:	429d      	cmp	r5, r3
 8004e5e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8004e62:	da50      	bge.n	8004f06 <_strtod_l+0x76e>
 8004e64:	1b5b      	subs	r3, r3, r5
 8004e66:	2b1f      	cmp	r3, #31
 8004e68:	f04f 0101 	mov.w	r1, #1
 8004e6c:	eba2 0203 	sub.w	r2, r2, r3
 8004e70:	dc3d      	bgt.n	8004eee <_strtod_l+0x756>
 8004e72:	fa01 f303 	lsl.w	r3, r1, r3
 8004e76:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004e78:	2300      	movs	r3, #0
 8004e7a:	9310      	str	r3, [sp, #64]	@ 0x40
 8004e7c:	18bd      	adds	r5, r7, r2
 8004e7e:	9b08      	ldr	r3, [sp, #32]
 8004e80:	42af      	cmp	r7, r5
 8004e82:	4416      	add	r6, r2
 8004e84:	441e      	add	r6, r3
 8004e86:	463b      	mov	r3, r7
 8004e88:	bfa8      	it	ge
 8004e8a:	462b      	movge	r3, r5
 8004e8c:	42b3      	cmp	r3, r6
 8004e8e:	bfa8      	it	ge
 8004e90:	4633      	movge	r3, r6
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	bfc2      	ittt	gt
 8004e96:	1aed      	subgt	r5, r5, r3
 8004e98:	1af6      	subgt	r6, r6, r3
 8004e9a:	1aff      	subgt	r7, r7, r3
 8004e9c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	dd16      	ble.n	8004ed0 <_strtod_l+0x738>
 8004ea2:	4641      	mov	r1, r8
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	9805      	ldr	r0, [sp, #20]
 8004ea8:	f7ff f9a8 	bl	80041fc <__pow5mult>
 8004eac:	4680      	mov	r8, r0
 8004eae:	2800      	cmp	r0, #0
 8004eb0:	d0b7      	beq.n	8004e22 <_strtod_l+0x68a>
 8004eb2:	4601      	mov	r1, r0
 8004eb4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8004eb6:	9805      	ldr	r0, [sp, #20]
 8004eb8:	f7ff f8f8 	bl	80040ac <__multiply>
 8004ebc:	900e      	str	r0, [sp, #56]	@ 0x38
 8004ebe:	2800      	cmp	r0, #0
 8004ec0:	f43f ae85 	beq.w	8004bce <_strtod_l+0x436>
 8004ec4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004ec6:	9805      	ldr	r0, [sp, #20]
 8004ec8:	f7fe ffdc 	bl	8003e84 <_Bfree>
 8004ecc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004ece:	931a      	str	r3, [sp, #104]	@ 0x68
 8004ed0:	2d00      	cmp	r5, #0
 8004ed2:	dc1d      	bgt.n	8004f10 <_strtod_l+0x778>
 8004ed4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	dd23      	ble.n	8004f22 <_strtod_l+0x78a>
 8004eda:	4649      	mov	r1, r9
 8004edc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8004ede:	9805      	ldr	r0, [sp, #20]
 8004ee0:	f7ff f98c 	bl	80041fc <__pow5mult>
 8004ee4:	4681      	mov	r9, r0
 8004ee6:	b9e0      	cbnz	r0, 8004f22 <_strtod_l+0x78a>
 8004ee8:	f04f 0900 	mov.w	r9, #0
 8004eec:	e66f      	b.n	8004bce <_strtod_l+0x436>
 8004eee:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8004ef2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8004ef6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8004efa:	35e2      	adds	r5, #226	@ 0xe2
 8004efc:	fa01 f305 	lsl.w	r3, r1, r5
 8004f00:	9310      	str	r3, [sp, #64]	@ 0x40
 8004f02:	9113      	str	r1, [sp, #76]	@ 0x4c
 8004f04:	e7ba      	b.n	8004e7c <_strtod_l+0x6e4>
 8004f06:	2300      	movs	r3, #0
 8004f08:	9310      	str	r3, [sp, #64]	@ 0x40
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004f0e:	e7b5      	b.n	8004e7c <_strtod_l+0x6e4>
 8004f10:	462a      	mov	r2, r5
 8004f12:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004f14:	9805      	ldr	r0, [sp, #20]
 8004f16:	f7ff f9cb 	bl	80042b0 <__lshift>
 8004f1a:	901a      	str	r0, [sp, #104]	@ 0x68
 8004f1c:	2800      	cmp	r0, #0
 8004f1e:	d1d9      	bne.n	8004ed4 <_strtod_l+0x73c>
 8004f20:	e655      	b.n	8004bce <_strtod_l+0x436>
 8004f22:	2e00      	cmp	r6, #0
 8004f24:	dd07      	ble.n	8004f36 <_strtod_l+0x79e>
 8004f26:	4649      	mov	r1, r9
 8004f28:	4632      	mov	r2, r6
 8004f2a:	9805      	ldr	r0, [sp, #20]
 8004f2c:	f7ff f9c0 	bl	80042b0 <__lshift>
 8004f30:	4681      	mov	r9, r0
 8004f32:	2800      	cmp	r0, #0
 8004f34:	d0d8      	beq.n	8004ee8 <_strtod_l+0x750>
 8004f36:	2f00      	cmp	r7, #0
 8004f38:	dd08      	ble.n	8004f4c <_strtod_l+0x7b4>
 8004f3a:	4641      	mov	r1, r8
 8004f3c:	463a      	mov	r2, r7
 8004f3e:	9805      	ldr	r0, [sp, #20]
 8004f40:	f7ff f9b6 	bl	80042b0 <__lshift>
 8004f44:	4680      	mov	r8, r0
 8004f46:	2800      	cmp	r0, #0
 8004f48:	f43f ae41 	beq.w	8004bce <_strtod_l+0x436>
 8004f4c:	464a      	mov	r2, r9
 8004f4e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004f50:	9805      	ldr	r0, [sp, #20]
 8004f52:	f7ff fa35 	bl	80043c0 <__mdiff>
 8004f56:	4604      	mov	r4, r0
 8004f58:	2800      	cmp	r0, #0
 8004f5a:	f43f ae38 	beq.w	8004bce <_strtod_l+0x436>
 8004f5e:	68c3      	ldr	r3, [r0, #12]
 8004f60:	4641      	mov	r1, r8
 8004f62:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004f64:	2300      	movs	r3, #0
 8004f66:	60c3      	str	r3, [r0, #12]
 8004f68:	f7ff fa0e 	bl	8004388 <__mcmp>
 8004f6c:	2800      	cmp	r0, #0
 8004f6e:	da45      	bge.n	8004ffc <_strtod_l+0x864>
 8004f70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004f72:	ea53 030a 	orrs.w	r3, r3, sl
 8004f76:	d16b      	bne.n	8005050 <_strtod_l+0x8b8>
 8004f78:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d167      	bne.n	8005050 <_strtod_l+0x8b8>
 8004f80:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8004f84:	0d1b      	lsrs	r3, r3, #20
 8004f86:	051b      	lsls	r3, r3, #20
 8004f88:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8004f8c:	d960      	bls.n	8005050 <_strtod_l+0x8b8>
 8004f8e:	6963      	ldr	r3, [r4, #20]
 8004f90:	b913      	cbnz	r3, 8004f98 <_strtod_l+0x800>
 8004f92:	6923      	ldr	r3, [r4, #16]
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	dd5b      	ble.n	8005050 <_strtod_l+0x8b8>
 8004f98:	4621      	mov	r1, r4
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	9805      	ldr	r0, [sp, #20]
 8004f9e:	f7ff f987 	bl	80042b0 <__lshift>
 8004fa2:	4641      	mov	r1, r8
 8004fa4:	4604      	mov	r4, r0
 8004fa6:	f7ff f9ef 	bl	8004388 <__mcmp>
 8004faa:	2800      	cmp	r0, #0
 8004fac:	dd50      	ble.n	8005050 <_strtod_l+0x8b8>
 8004fae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8004fb2:	9a08      	ldr	r2, [sp, #32]
 8004fb4:	0d1b      	lsrs	r3, r3, #20
 8004fb6:	051b      	lsls	r3, r3, #20
 8004fb8:	2a00      	cmp	r2, #0
 8004fba:	d06a      	beq.n	8005092 <_strtod_l+0x8fa>
 8004fbc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8004fc0:	d867      	bhi.n	8005092 <_strtod_l+0x8fa>
 8004fc2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8004fc6:	f67f ae98 	bls.w	8004cfa <_strtod_l+0x562>
 8004fca:	4650      	mov	r0, sl
 8004fcc:	4659      	mov	r1, fp
 8004fce:	4b09      	ldr	r3, [pc, #36]	@ (8004ff4 <_strtod_l+0x85c>)
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f7fb fa81 	bl	80004d8 <__aeabi_dmul>
 8004fd6:	4b08      	ldr	r3, [pc, #32]	@ (8004ff8 <_strtod_l+0x860>)
 8004fd8:	4682      	mov	sl, r0
 8004fda:	400b      	ands	r3, r1
 8004fdc:	468b      	mov	fp, r1
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	f47f ae00 	bne.w	8004be4 <_strtod_l+0x44c>
 8004fe4:	2322      	movs	r3, #34	@ 0x22
 8004fe6:	9a05      	ldr	r2, [sp, #20]
 8004fe8:	6013      	str	r3, [r2, #0]
 8004fea:	e5fb      	b.n	8004be4 <_strtod_l+0x44c>
 8004fec:	08006860 	.word	0x08006860
 8004ff0:	fffffc02 	.word	0xfffffc02
 8004ff4:	39500000 	.word	0x39500000
 8004ff8:	7ff00000 	.word	0x7ff00000
 8004ffc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8005000:	d165      	bne.n	80050ce <_strtod_l+0x936>
 8005002:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005004:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005008:	b35a      	cbz	r2, 8005062 <_strtod_l+0x8ca>
 800500a:	4a99      	ldr	r2, [pc, #612]	@ (8005270 <_strtod_l+0xad8>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d12b      	bne.n	8005068 <_strtod_l+0x8d0>
 8005010:	9b08      	ldr	r3, [sp, #32]
 8005012:	4651      	mov	r1, sl
 8005014:	b303      	cbz	r3, 8005058 <_strtod_l+0x8c0>
 8005016:	465a      	mov	r2, fp
 8005018:	4b96      	ldr	r3, [pc, #600]	@ (8005274 <_strtod_l+0xadc>)
 800501a:	4013      	ands	r3, r2
 800501c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8005020:	f04f 32ff 	mov.w	r2, #4294967295
 8005024:	d81b      	bhi.n	800505e <_strtod_l+0x8c6>
 8005026:	0d1b      	lsrs	r3, r3, #20
 8005028:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800502c:	fa02 f303 	lsl.w	r3, r2, r3
 8005030:	4299      	cmp	r1, r3
 8005032:	d119      	bne.n	8005068 <_strtod_l+0x8d0>
 8005034:	4b90      	ldr	r3, [pc, #576]	@ (8005278 <_strtod_l+0xae0>)
 8005036:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005038:	429a      	cmp	r2, r3
 800503a:	d102      	bne.n	8005042 <_strtod_l+0x8aa>
 800503c:	3101      	adds	r1, #1
 800503e:	f43f adc6 	beq.w	8004bce <_strtod_l+0x436>
 8005042:	f04f 0a00 	mov.w	sl, #0
 8005046:	4b8b      	ldr	r3, [pc, #556]	@ (8005274 <_strtod_l+0xadc>)
 8005048:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800504a:	401a      	ands	r2, r3
 800504c:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8005050:	9b08      	ldr	r3, [sp, #32]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d1b9      	bne.n	8004fca <_strtod_l+0x832>
 8005056:	e5c5      	b.n	8004be4 <_strtod_l+0x44c>
 8005058:	f04f 33ff 	mov.w	r3, #4294967295
 800505c:	e7e8      	b.n	8005030 <_strtod_l+0x898>
 800505e:	4613      	mov	r3, r2
 8005060:	e7e6      	b.n	8005030 <_strtod_l+0x898>
 8005062:	ea53 030a 	orrs.w	r3, r3, sl
 8005066:	d0a2      	beq.n	8004fae <_strtod_l+0x816>
 8005068:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800506a:	b1db      	cbz	r3, 80050a4 <_strtod_l+0x90c>
 800506c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800506e:	4213      	tst	r3, r2
 8005070:	d0ee      	beq.n	8005050 <_strtod_l+0x8b8>
 8005072:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005074:	4650      	mov	r0, sl
 8005076:	4659      	mov	r1, fp
 8005078:	9a08      	ldr	r2, [sp, #32]
 800507a:	b1bb      	cbz	r3, 80050ac <_strtod_l+0x914>
 800507c:	f7ff fb68 	bl	8004750 <sulp>
 8005080:	4602      	mov	r2, r0
 8005082:	460b      	mov	r3, r1
 8005084:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005088:	f7fb f870 	bl	800016c <__adddf3>
 800508c:	4682      	mov	sl, r0
 800508e:	468b      	mov	fp, r1
 8005090:	e7de      	b.n	8005050 <_strtod_l+0x8b8>
 8005092:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8005096:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800509a:	f04f 3aff 	mov.w	sl, #4294967295
 800509e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80050a2:	e7d5      	b.n	8005050 <_strtod_l+0x8b8>
 80050a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80050a6:	ea13 0f0a 	tst.w	r3, sl
 80050aa:	e7e1      	b.n	8005070 <_strtod_l+0x8d8>
 80050ac:	f7ff fb50 	bl	8004750 <sulp>
 80050b0:	4602      	mov	r2, r0
 80050b2:	460b      	mov	r3, r1
 80050b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80050b8:	f7fb f856 	bl	8000168 <__aeabi_dsub>
 80050bc:	2200      	movs	r2, #0
 80050be:	2300      	movs	r3, #0
 80050c0:	4682      	mov	sl, r0
 80050c2:	468b      	mov	fp, r1
 80050c4:	f7fb fc70 	bl	80009a8 <__aeabi_dcmpeq>
 80050c8:	2800      	cmp	r0, #0
 80050ca:	d0c1      	beq.n	8005050 <_strtod_l+0x8b8>
 80050cc:	e615      	b.n	8004cfa <_strtod_l+0x562>
 80050ce:	4641      	mov	r1, r8
 80050d0:	4620      	mov	r0, r4
 80050d2:	f7ff fac9 	bl	8004668 <__ratio>
 80050d6:	2200      	movs	r2, #0
 80050d8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80050dc:	4606      	mov	r6, r0
 80050de:	460f      	mov	r7, r1
 80050e0:	f7fb fc76 	bl	80009d0 <__aeabi_dcmple>
 80050e4:	2800      	cmp	r0, #0
 80050e6:	d06d      	beq.n	80051c4 <_strtod_l+0xa2c>
 80050e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d178      	bne.n	80051e0 <_strtod_l+0xa48>
 80050ee:	f1ba 0f00 	cmp.w	sl, #0
 80050f2:	d156      	bne.n	80051a2 <_strtod_l+0xa0a>
 80050f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80050f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d158      	bne.n	80051b0 <_strtod_l+0xa18>
 80050fe:	2200      	movs	r2, #0
 8005100:	4630      	mov	r0, r6
 8005102:	4639      	mov	r1, r7
 8005104:	4b5d      	ldr	r3, [pc, #372]	@ (800527c <_strtod_l+0xae4>)
 8005106:	f7fb fc59 	bl	80009bc <__aeabi_dcmplt>
 800510a:	2800      	cmp	r0, #0
 800510c:	d157      	bne.n	80051be <_strtod_l+0xa26>
 800510e:	4630      	mov	r0, r6
 8005110:	4639      	mov	r1, r7
 8005112:	2200      	movs	r2, #0
 8005114:	4b5a      	ldr	r3, [pc, #360]	@ (8005280 <_strtod_l+0xae8>)
 8005116:	f7fb f9df 	bl	80004d8 <__aeabi_dmul>
 800511a:	4606      	mov	r6, r0
 800511c:	460f      	mov	r7, r1
 800511e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8005122:	9606      	str	r6, [sp, #24]
 8005124:	9307      	str	r3, [sp, #28]
 8005126:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800512a:	4d52      	ldr	r5, [pc, #328]	@ (8005274 <_strtod_l+0xadc>)
 800512c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005130:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005132:	401d      	ands	r5, r3
 8005134:	4b53      	ldr	r3, [pc, #332]	@ (8005284 <_strtod_l+0xaec>)
 8005136:	429d      	cmp	r5, r3
 8005138:	f040 80aa 	bne.w	8005290 <_strtod_l+0xaf8>
 800513c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800513e:	4650      	mov	r0, sl
 8005140:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8005144:	4659      	mov	r1, fp
 8005146:	f7ff f9cf 	bl	80044e8 <__ulp>
 800514a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800514e:	f7fb f9c3 	bl	80004d8 <__aeabi_dmul>
 8005152:	4652      	mov	r2, sl
 8005154:	465b      	mov	r3, fp
 8005156:	f7fb f809 	bl	800016c <__adddf3>
 800515a:	460b      	mov	r3, r1
 800515c:	4945      	ldr	r1, [pc, #276]	@ (8005274 <_strtod_l+0xadc>)
 800515e:	4a4a      	ldr	r2, [pc, #296]	@ (8005288 <_strtod_l+0xaf0>)
 8005160:	4019      	ands	r1, r3
 8005162:	4291      	cmp	r1, r2
 8005164:	4682      	mov	sl, r0
 8005166:	d942      	bls.n	80051ee <_strtod_l+0xa56>
 8005168:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800516a:	4b43      	ldr	r3, [pc, #268]	@ (8005278 <_strtod_l+0xae0>)
 800516c:	429a      	cmp	r2, r3
 800516e:	d103      	bne.n	8005178 <_strtod_l+0x9e0>
 8005170:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005172:	3301      	adds	r3, #1
 8005174:	f43f ad2b 	beq.w	8004bce <_strtod_l+0x436>
 8005178:	f04f 3aff 	mov.w	sl, #4294967295
 800517c:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8005278 <_strtod_l+0xae0>
 8005180:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005182:	9805      	ldr	r0, [sp, #20]
 8005184:	f7fe fe7e 	bl	8003e84 <_Bfree>
 8005188:	4649      	mov	r1, r9
 800518a:	9805      	ldr	r0, [sp, #20]
 800518c:	f7fe fe7a 	bl	8003e84 <_Bfree>
 8005190:	4641      	mov	r1, r8
 8005192:	9805      	ldr	r0, [sp, #20]
 8005194:	f7fe fe76 	bl	8003e84 <_Bfree>
 8005198:	4621      	mov	r1, r4
 800519a:	9805      	ldr	r0, [sp, #20]
 800519c:	f7fe fe72 	bl	8003e84 <_Bfree>
 80051a0:	e618      	b.n	8004dd4 <_strtod_l+0x63c>
 80051a2:	f1ba 0f01 	cmp.w	sl, #1
 80051a6:	d103      	bne.n	80051b0 <_strtod_l+0xa18>
 80051a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	f43f ada5 	beq.w	8004cfa <_strtod_l+0x562>
 80051b0:	2200      	movs	r2, #0
 80051b2:	4b36      	ldr	r3, [pc, #216]	@ (800528c <_strtod_l+0xaf4>)
 80051b4:	2600      	movs	r6, #0
 80051b6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80051ba:	4f30      	ldr	r7, [pc, #192]	@ (800527c <_strtod_l+0xae4>)
 80051bc:	e7b3      	b.n	8005126 <_strtod_l+0x98e>
 80051be:	2600      	movs	r6, #0
 80051c0:	4f2f      	ldr	r7, [pc, #188]	@ (8005280 <_strtod_l+0xae8>)
 80051c2:	e7ac      	b.n	800511e <_strtod_l+0x986>
 80051c4:	4630      	mov	r0, r6
 80051c6:	4639      	mov	r1, r7
 80051c8:	4b2d      	ldr	r3, [pc, #180]	@ (8005280 <_strtod_l+0xae8>)
 80051ca:	2200      	movs	r2, #0
 80051cc:	f7fb f984 	bl	80004d8 <__aeabi_dmul>
 80051d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80051d2:	4606      	mov	r6, r0
 80051d4:	460f      	mov	r7, r1
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d0a1      	beq.n	800511e <_strtod_l+0x986>
 80051da:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80051de:	e7a2      	b.n	8005126 <_strtod_l+0x98e>
 80051e0:	2200      	movs	r2, #0
 80051e2:	4b26      	ldr	r3, [pc, #152]	@ (800527c <_strtod_l+0xae4>)
 80051e4:	4616      	mov	r6, r2
 80051e6:	461f      	mov	r7, r3
 80051e8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80051ec:	e79b      	b.n	8005126 <_strtod_l+0x98e>
 80051ee:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80051f2:	9b08      	ldr	r3, [sp, #32]
 80051f4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d1c1      	bne.n	8005180 <_strtod_l+0x9e8>
 80051fc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005200:	0d1b      	lsrs	r3, r3, #20
 8005202:	051b      	lsls	r3, r3, #20
 8005204:	429d      	cmp	r5, r3
 8005206:	d1bb      	bne.n	8005180 <_strtod_l+0x9e8>
 8005208:	4630      	mov	r0, r6
 800520a:	4639      	mov	r1, r7
 800520c:	f7fb fcac 	bl	8000b68 <__aeabi_d2lz>
 8005210:	f7fb f934 	bl	800047c <__aeabi_l2d>
 8005214:	4602      	mov	r2, r0
 8005216:	460b      	mov	r3, r1
 8005218:	4630      	mov	r0, r6
 800521a:	4639      	mov	r1, r7
 800521c:	f7fa ffa4 	bl	8000168 <__aeabi_dsub>
 8005220:	460b      	mov	r3, r1
 8005222:	4602      	mov	r2, r0
 8005224:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8005228:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800522c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800522e:	ea46 060a 	orr.w	r6, r6, sl
 8005232:	431e      	orrs	r6, r3
 8005234:	d069      	beq.n	800530a <_strtod_l+0xb72>
 8005236:	a30a      	add	r3, pc, #40	@ (adr r3, 8005260 <_strtod_l+0xac8>)
 8005238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523c:	f7fb fbbe 	bl	80009bc <__aeabi_dcmplt>
 8005240:	2800      	cmp	r0, #0
 8005242:	f47f accf 	bne.w	8004be4 <_strtod_l+0x44c>
 8005246:	a308      	add	r3, pc, #32	@ (adr r3, 8005268 <_strtod_l+0xad0>)
 8005248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800524c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005250:	f7fb fbd2 	bl	80009f8 <__aeabi_dcmpgt>
 8005254:	2800      	cmp	r0, #0
 8005256:	d093      	beq.n	8005180 <_strtod_l+0x9e8>
 8005258:	e4c4      	b.n	8004be4 <_strtod_l+0x44c>
 800525a:	bf00      	nop
 800525c:	f3af 8000 	nop.w
 8005260:	94a03595 	.word	0x94a03595
 8005264:	3fdfffff 	.word	0x3fdfffff
 8005268:	35afe535 	.word	0x35afe535
 800526c:	3fe00000 	.word	0x3fe00000
 8005270:	000fffff 	.word	0x000fffff
 8005274:	7ff00000 	.word	0x7ff00000
 8005278:	7fefffff 	.word	0x7fefffff
 800527c:	3ff00000 	.word	0x3ff00000
 8005280:	3fe00000 	.word	0x3fe00000
 8005284:	7fe00000 	.word	0x7fe00000
 8005288:	7c9fffff 	.word	0x7c9fffff
 800528c:	bff00000 	.word	0xbff00000
 8005290:	9b08      	ldr	r3, [sp, #32]
 8005292:	b323      	cbz	r3, 80052de <_strtod_l+0xb46>
 8005294:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8005298:	d821      	bhi.n	80052de <_strtod_l+0xb46>
 800529a:	a327      	add	r3, pc, #156	@ (adr r3, 8005338 <_strtod_l+0xba0>)
 800529c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a0:	4630      	mov	r0, r6
 80052a2:	4639      	mov	r1, r7
 80052a4:	f7fb fb94 	bl	80009d0 <__aeabi_dcmple>
 80052a8:	b1a0      	cbz	r0, 80052d4 <_strtod_l+0xb3c>
 80052aa:	4639      	mov	r1, r7
 80052ac:	4630      	mov	r0, r6
 80052ae:	f7fb fbeb 	bl	8000a88 <__aeabi_d2uiz>
 80052b2:	2801      	cmp	r0, #1
 80052b4:	bf38      	it	cc
 80052b6:	2001      	movcc	r0, #1
 80052b8:	f7fb f894 	bl	80003e4 <__aeabi_ui2d>
 80052bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80052be:	4606      	mov	r6, r0
 80052c0:	460f      	mov	r7, r1
 80052c2:	b9fb      	cbnz	r3, 8005304 <_strtod_l+0xb6c>
 80052c4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80052c8:	9014      	str	r0, [sp, #80]	@ 0x50
 80052ca:	9315      	str	r3, [sp, #84]	@ 0x54
 80052cc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80052d0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80052d4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80052d6:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80052da:	1b5b      	subs	r3, r3, r5
 80052dc:	9311      	str	r3, [sp, #68]	@ 0x44
 80052de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80052e2:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80052e6:	f7ff f8ff 	bl	80044e8 <__ulp>
 80052ea:	4602      	mov	r2, r0
 80052ec:	460b      	mov	r3, r1
 80052ee:	4650      	mov	r0, sl
 80052f0:	4659      	mov	r1, fp
 80052f2:	f7fb f8f1 	bl	80004d8 <__aeabi_dmul>
 80052f6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80052fa:	f7fa ff37 	bl	800016c <__adddf3>
 80052fe:	4682      	mov	sl, r0
 8005300:	468b      	mov	fp, r1
 8005302:	e776      	b.n	80051f2 <_strtod_l+0xa5a>
 8005304:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8005308:	e7e0      	b.n	80052cc <_strtod_l+0xb34>
 800530a:	a30d      	add	r3, pc, #52	@ (adr r3, 8005340 <_strtod_l+0xba8>)
 800530c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005310:	f7fb fb54 	bl	80009bc <__aeabi_dcmplt>
 8005314:	e79e      	b.n	8005254 <_strtod_l+0xabc>
 8005316:	2300      	movs	r3, #0
 8005318:	930b      	str	r3, [sp, #44]	@ 0x2c
 800531a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800531c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800531e:	6013      	str	r3, [r2, #0]
 8005320:	f7ff ba77 	b.w	8004812 <_strtod_l+0x7a>
 8005324:	2a65      	cmp	r2, #101	@ 0x65
 8005326:	f43f ab6e 	beq.w	8004a06 <_strtod_l+0x26e>
 800532a:	2a45      	cmp	r2, #69	@ 0x45
 800532c:	f43f ab6b 	beq.w	8004a06 <_strtod_l+0x26e>
 8005330:	2301      	movs	r3, #1
 8005332:	f7ff bba6 	b.w	8004a82 <_strtod_l+0x2ea>
 8005336:	bf00      	nop
 8005338:	ffc00000 	.word	0xffc00000
 800533c:	41dfffff 	.word	0x41dfffff
 8005340:	94a03595 	.word	0x94a03595
 8005344:	3fcfffff 	.word	0x3fcfffff

08005348 <_strtod_r>:
 8005348:	4b01      	ldr	r3, [pc, #4]	@ (8005350 <_strtod_r+0x8>)
 800534a:	f7ff ba25 	b.w	8004798 <_strtod_l>
 800534e:	bf00      	nop
 8005350:	20000068 	.word	0x20000068

08005354 <_strtol_l.constprop.0>:
 8005354:	2b24      	cmp	r3, #36	@ 0x24
 8005356:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800535a:	4686      	mov	lr, r0
 800535c:	4690      	mov	r8, r2
 800535e:	d801      	bhi.n	8005364 <_strtol_l.constprop.0+0x10>
 8005360:	2b01      	cmp	r3, #1
 8005362:	d106      	bne.n	8005372 <_strtol_l.constprop.0+0x1e>
 8005364:	f7fd fdc0 	bl	8002ee8 <__errno>
 8005368:	2316      	movs	r3, #22
 800536a:	6003      	str	r3, [r0, #0]
 800536c:	2000      	movs	r0, #0
 800536e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005372:	460d      	mov	r5, r1
 8005374:	4833      	ldr	r0, [pc, #204]	@ (8005444 <_strtol_l.constprop.0+0xf0>)
 8005376:	462a      	mov	r2, r5
 8005378:	f815 4b01 	ldrb.w	r4, [r5], #1
 800537c:	5d06      	ldrb	r6, [r0, r4]
 800537e:	f016 0608 	ands.w	r6, r6, #8
 8005382:	d1f8      	bne.n	8005376 <_strtol_l.constprop.0+0x22>
 8005384:	2c2d      	cmp	r4, #45	@ 0x2d
 8005386:	d12d      	bne.n	80053e4 <_strtol_l.constprop.0+0x90>
 8005388:	2601      	movs	r6, #1
 800538a:	782c      	ldrb	r4, [r5, #0]
 800538c:	1c95      	adds	r5, r2, #2
 800538e:	f033 0210 	bics.w	r2, r3, #16
 8005392:	d109      	bne.n	80053a8 <_strtol_l.constprop.0+0x54>
 8005394:	2c30      	cmp	r4, #48	@ 0x30
 8005396:	d12a      	bne.n	80053ee <_strtol_l.constprop.0+0x9a>
 8005398:	782a      	ldrb	r2, [r5, #0]
 800539a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800539e:	2a58      	cmp	r2, #88	@ 0x58
 80053a0:	d125      	bne.n	80053ee <_strtol_l.constprop.0+0x9a>
 80053a2:	2310      	movs	r3, #16
 80053a4:	786c      	ldrb	r4, [r5, #1]
 80053a6:	3502      	adds	r5, #2
 80053a8:	2200      	movs	r2, #0
 80053aa:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80053ae:	f10c 3cff 	add.w	ip, ip, #4294967295
 80053b2:	fbbc f9f3 	udiv	r9, ip, r3
 80053b6:	4610      	mov	r0, r2
 80053b8:	fb03 ca19 	mls	sl, r3, r9, ip
 80053bc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80053c0:	2f09      	cmp	r7, #9
 80053c2:	d81b      	bhi.n	80053fc <_strtol_l.constprop.0+0xa8>
 80053c4:	463c      	mov	r4, r7
 80053c6:	42a3      	cmp	r3, r4
 80053c8:	dd27      	ble.n	800541a <_strtol_l.constprop.0+0xc6>
 80053ca:	1c57      	adds	r7, r2, #1
 80053cc:	d007      	beq.n	80053de <_strtol_l.constprop.0+0x8a>
 80053ce:	4581      	cmp	r9, r0
 80053d0:	d320      	bcc.n	8005414 <_strtol_l.constprop.0+0xc0>
 80053d2:	d101      	bne.n	80053d8 <_strtol_l.constprop.0+0x84>
 80053d4:	45a2      	cmp	sl, r4
 80053d6:	db1d      	blt.n	8005414 <_strtol_l.constprop.0+0xc0>
 80053d8:	2201      	movs	r2, #1
 80053da:	fb00 4003 	mla	r0, r0, r3, r4
 80053de:	f815 4b01 	ldrb.w	r4, [r5], #1
 80053e2:	e7eb      	b.n	80053bc <_strtol_l.constprop.0+0x68>
 80053e4:	2c2b      	cmp	r4, #43	@ 0x2b
 80053e6:	bf04      	itt	eq
 80053e8:	782c      	ldrbeq	r4, [r5, #0]
 80053ea:	1c95      	addeq	r5, r2, #2
 80053ec:	e7cf      	b.n	800538e <_strtol_l.constprop.0+0x3a>
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d1da      	bne.n	80053a8 <_strtol_l.constprop.0+0x54>
 80053f2:	2c30      	cmp	r4, #48	@ 0x30
 80053f4:	bf0c      	ite	eq
 80053f6:	2308      	moveq	r3, #8
 80053f8:	230a      	movne	r3, #10
 80053fa:	e7d5      	b.n	80053a8 <_strtol_l.constprop.0+0x54>
 80053fc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005400:	2f19      	cmp	r7, #25
 8005402:	d801      	bhi.n	8005408 <_strtol_l.constprop.0+0xb4>
 8005404:	3c37      	subs	r4, #55	@ 0x37
 8005406:	e7de      	b.n	80053c6 <_strtol_l.constprop.0+0x72>
 8005408:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800540c:	2f19      	cmp	r7, #25
 800540e:	d804      	bhi.n	800541a <_strtol_l.constprop.0+0xc6>
 8005410:	3c57      	subs	r4, #87	@ 0x57
 8005412:	e7d8      	b.n	80053c6 <_strtol_l.constprop.0+0x72>
 8005414:	f04f 32ff 	mov.w	r2, #4294967295
 8005418:	e7e1      	b.n	80053de <_strtol_l.constprop.0+0x8a>
 800541a:	1c53      	adds	r3, r2, #1
 800541c:	d108      	bne.n	8005430 <_strtol_l.constprop.0+0xdc>
 800541e:	2322      	movs	r3, #34	@ 0x22
 8005420:	4660      	mov	r0, ip
 8005422:	f8ce 3000 	str.w	r3, [lr]
 8005426:	f1b8 0f00 	cmp.w	r8, #0
 800542a:	d0a0      	beq.n	800536e <_strtol_l.constprop.0+0x1a>
 800542c:	1e69      	subs	r1, r5, #1
 800542e:	e006      	b.n	800543e <_strtol_l.constprop.0+0xea>
 8005430:	b106      	cbz	r6, 8005434 <_strtol_l.constprop.0+0xe0>
 8005432:	4240      	negs	r0, r0
 8005434:	f1b8 0f00 	cmp.w	r8, #0
 8005438:	d099      	beq.n	800536e <_strtol_l.constprop.0+0x1a>
 800543a:	2a00      	cmp	r2, #0
 800543c:	d1f6      	bne.n	800542c <_strtol_l.constprop.0+0xd8>
 800543e:	f8c8 1000 	str.w	r1, [r8]
 8005442:	e794      	b.n	800536e <_strtol_l.constprop.0+0x1a>
 8005444:	08006889 	.word	0x08006889

08005448 <_strtol_r>:
 8005448:	f7ff bf84 	b.w	8005354 <_strtol_l.constprop.0>

0800544c <__ssputs_r>:
 800544c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005450:	461f      	mov	r7, r3
 8005452:	688e      	ldr	r6, [r1, #8]
 8005454:	4682      	mov	sl, r0
 8005456:	42be      	cmp	r6, r7
 8005458:	460c      	mov	r4, r1
 800545a:	4690      	mov	r8, r2
 800545c:	680b      	ldr	r3, [r1, #0]
 800545e:	d82d      	bhi.n	80054bc <__ssputs_r+0x70>
 8005460:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005464:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005468:	d026      	beq.n	80054b8 <__ssputs_r+0x6c>
 800546a:	6965      	ldr	r5, [r4, #20]
 800546c:	6909      	ldr	r1, [r1, #16]
 800546e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005472:	eba3 0901 	sub.w	r9, r3, r1
 8005476:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800547a:	1c7b      	adds	r3, r7, #1
 800547c:	444b      	add	r3, r9
 800547e:	106d      	asrs	r5, r5, #1
 8005480:	429d      	cmp	r5, r3
 8005482:	bf38      	it	cc
 8005484:	461d      	movcc	r5, r3
 8005486:	0553      	lsls	r3, r2, #21
 8005488:	d527      	bpl.n	80054da <__ssputs_r+0x8e>
 800548a:	4629      	mov	r1, r5
 800548c:	f7fe fc2e 	bl	8003cec <_malloc_r>
 8005490:	4606      	mov	r6, r0
 8005492:	b360      	cbz	r0, 80054ee <__ssputs_r+0xa2>
 8005494:	464a      	mov	r2, r9
 8005496:	6921      	ldr	r1, [r4, #16]
 8005498:	f000 fa14 	bl	80058c4 <memcpy>
 800549c:	89a3      	ldrh	r3, [r4, #12]
 800549e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80054a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054a6:	81a3      	strh	r3, [r4, #12]
 80054a8:	6126      	str	r6, [r4, #16]
 80054aa:	444e      	add	r6, r9
 80054ac:	6026      	str	r6, [r4, #0]
 80054ae:	463e      	mov	r6, r7
 80054b0:	6165      	str	r5, [r4, #20]
 80054b2:	eba5 0509 	sub.w	r5, r5, r9
 80054b6:	60a5      	str	r5, [r4, #8]
 80054b8:	42be      	cmp	r6, r7
 80054ba:	d900      	bls.n	80054be <__ssputs_r+0x72>
 80054bc:	463e      	mov	r6, r7
 80054be:	4632      	mov	r2, r6
 80054c0:	4641      	mov	r1, r8
 80054c2:	6820      	ldr	r0, [r4, #0]
 80054c4:	f000 f9c2 	bl	800584c <memmove>
 80054c8:	2000      	movs	r0, #0
 80054ca:	68a3      	ldr	r3, [r4, #8]
 80054cc:	1b9b      	subs	r3, r3, r6
 80054ce:	60a3      	str	r3, [r4, #8]
 80054d0:	6823      	ldr	r3, [r4, #0]
 80054d2:	4433      	add	r3, r6
 80054d4:	6023      	str	r3, [r4, #0]
 80054d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054da:	462a      	mov	r2, r5
 80054dc:	f000 fd83 	bl	8005fe6 <_realloc_r>
 80054e0:	4606      	mov	r6, r0
 80054e2:	2800      	cmp	r0, #0
 80054e4:	d1e0      	bne.n	80054a8 <__ssputs_r+0x5c>
 80054e6:	4650      	mov	r0, sl
 80054e8:	6921      	ldr	r1, [r4, #16]
 80054ea:	f7fe fb8d 	bl	8003c08 <_free_r>
 80054ee:	230c      	movs	r3, #12
 80054f0:	f8ca 3000 	str.w	r3, [sl]
 80054f4:	89a3      	ldrh	r3, [r4, #12]
 80054f6:	f04f 30ff 	mov.w	r0, #4294967295
 80054fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054fe:	81a3      	strh	r3, [r4, #12]
 8005500:	e7e9      	b.n	80054d6 <__ssputs_r+0x8a>
	...

08005504 <_svfiprintf_r>:
 8005504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005508:	4698      	mov	r8, r3
 800550a:	898b      	ldrh	r3, [r1, #12]
 800550c:	4607      	mov	r7, r0
 800550e:	061b      	lsls	r3, r3, #24
 8005510:	460d      	mov	r5, r1
 8005512:	4614      	mov	r4, r2
 8005514:	b09d      	sub	sp, #116	@ 0x74
 8005516:	d510      	bpl.n	800553a <_svfiprintf_r+0x36>
 8005518:	690b      	ldr	r3, [r1, #16]
 800551a:	b973      	cbnz	r3, 800553a <_svfiprintf_r+0x36>
 800551c:	2140      	movs	r1, #64	@ 0x40
 800551e:	f7fe fbe5 	bl	8003cec <_malloc_r>
 8005522:	6028      	str	r0, [r5, #0]
 8005524:	6128      	str	r0, [r5, #16]
 8005526:	b930      	cbnz	r0, 8005536 <_svfiprintf_r+0x32>
 8005528:	230c      	movs	r3, #12
 800552a:	603b      	str	r3, [r7, #0]
 800552c:	f04f 30ff 	mov.w	r0, #4294967295
 8005530:	b01d      	add	sp, #116	@ 0x74
 8005532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005536:	2340      	movs	r3, #64	@ 0x40
 8005538:	616b      	str	r3, [r5, #20]
 800553a:	2300      	movs	r3, #0
 800553c:	9309      	str	r3, [sp, #36]	@ 0x24
 800553e:	2320      	movs	r3, #32
 8005540:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005544:	2330      	movs	r3, #48	@ 0x30
 8005546:	f04f 0901 	mov.w	r9, #1
 800554a:	f8cd 800c 	str.w	r8, [sp, #12]
 800554e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80056e8 <_svfiprintf_r+0x1e4>
 8005552:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005556:	4623      	mov	r3, r4
 8005558:	469a      	mov	sl, r3
 800555a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800555e:	b10a      	cbz	r2, 8005564 <_svfiprintf_r+0x60>
 8005560:	2a25      	cmp	r2, #37	@ 0x25
 8005562:	d1f9      	bne.n	8005558 <_svfiprintf_r+0x54>
 8005564:	ebba 0b04 	subs.w	fp, sl, r4
 8005568:	d00b      	beq.n	8005582 <_svfiprintf_r+0x7e>
 800556a:	465b      	mov	r3, fp
 800556c:	4622      	mov	r2, r4
 800556e:	4629      	mov	r1, r5
 8005570:	4638      	mov	r0, r7
 8005572:	f7ff ff6b 	bl	800544c <__ssputs_r>
 8005576:	3001      	adds	r0, #1
 8005578:	f000 80a7 	beq.w	80056ca <_svfiprintf_r+0x1c6>
 800557c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800557e:	445a      	add	r2, fp
 8005580:	9209      	str	r2, [sp, #36]	@ 0x24
 8005582:	f89a 3000 	ldrb.w	r3, [sl]
 8005586:	2b00      	cmp	r3, #0
 8005588:	f000 809f 	beq.w	80056ca <_svfiprintf_r+0x1c6>
 800558c:	2300      	movs	r3, #0
 800558e:	f04f 32ff 	mov.w	r2, #4294967295
 8005592:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005596:	f10a 0a01 	add.w	sl, sl, #1
 800559a:	9304      	str	r3, [sp, #16]
 800559c:	9307      	str	r3, [sp, #28]
 800559e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80055a2:	931a      	str	r3, [sp, #104]	@ 0x68
 80055a4:	4654      	mov	r4, sl
 80055a6:	2205      	movs	r2, #5
 80055a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055ac:	484e      	ldr	r0, [pc, #312]	@ (80056e8 <_svfiprintf_r+0x1e4>)
 80055ae:	f7fd fcc8 	bl	8002f42 <memchr>
 80055b2:	9a04      	ldr	r2, [sp, #16]
 80055b4:	b9d8      	cbnz	r0, 80055ee <_svfiprintf_r+0xea>
 80055b6:	06d0      	lsls	r0, r2, #27
 80055b8:	bf44      	itt	mi
 80055ba:	2320      	movmi	r3, #32
 80055bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80055c0:	0711      	lsls	r1, r2, #28
 80055c2:	bf44      	itt	mi
 80055c4:	232b      	movmi	r3, #43	@ 0x2b
 80055c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80055ca:	f89a 3000 	ldrb.w	r3, [sl]
 80055ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80055d0:	d015      	beq.n	80055fe <_svfiprintf_r+0xfa>
 80055d2:	4654      	mov	r4, sl
 80055d4:	2000      	movs	r0, #0
 80055d6:	f04f 0c0a 	mov.w	ip, #10
 80055da:	9a07      	ldr	r2, [sp, #28]
 80055dc:	4621      	mov	r1, r4
 80055de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80055e2:	3b30      	subs	r3, #48	@ 0x30
 80055e4:	2b09      	cmp	r3, #9
 80055e6:	d94b      	bls.n	8005680 <_svfiprintf_r+0x17c>
 80055e8:	b1b0      	cbz	r0, 8005618 <_svfiprintf_r+0x114>
 80055ea:	9207      	str	r2, [sp, #28]
 80055ec:	e014      	b.n	8005618 <_svfiprintf_r+0x114>
 80055ee:	eba0 0308 	sub.w	r3, r0, r8
 80055f2:	fa09 f303 	lsl.w	r3, r9, r3
 80055f6:	4313      	orrs	r3, r2
 80055f8:	46a2      	mov	sl, r4
 80055fa:	9304      	str	r3, [sp, #16]
 80055fc:	e7d2      	b.n	80055a4 <_svfiprintf_r+0xa0>
 80055fe:	9b03      	ldr	r3, [sp, #12]
 8005600:	1d19      	adds	r1, r3, #4
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	9103      	str	r1, [sp, #12]
 8005606:	2b00      	cmp	r3, #0
 8005608:	bfbb      	ittet	lt
 800560a:	425b      	neglt	r3, r3
 800560c:	f042 0202 	orrlt.w	r2, r2, #2
 8005610:	9307      	strge	r3, [sp, #28]
 8005612:	9307      	strlt	r3, [sp, #28]
 8005614:	bfb8      	it	lt
 8005616:	9204      	strlt	r2, [sp, #16]
 8005618:	7823      	ldrb	r3, [r4, #0]
 800561a:	2b2e      	cmp	r3, #46	@ 0x2e
 800561c:	d10a      	bne.n	8005634 <_svfiprintf_r+0x130>
 800561e:	7863      	ldrb	r3, [r4, #1]
 8005620:	2b2a      	cmp	r3, #42	@ 0x2a
 8005622:	d132      	bne.n	800568a <_svfiprintf_r+0x186>
 8005624:	9b03      	ldr	r3, [sp, #12]
 8005626:	3402      	adds	r4, #2
 8005628:	1d1a      	adds	r2, r3, #4
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	9203      	str	r2, [sp, #12]
 800562e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005632:	9305      	str	r3, [sp, #20]
 8005634:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80056ec <_svfiprintf_r+0x1e8>
 8005638:	2203      	movs	r2, #3
 800563a:	4650      	mov	r0, sl
 800563c:	7821      	ldrb	r1, [r4, #0]
 800563e:	f7fd fc80 	bl	8002f42 <memchr>
 8005642:	b138      	cbz	r0, 8005654 <_svfiprintf_r+0x150>
 8005644:	2240      	movs	r2, #64	@ 0x40
 8005646:	9b04      	ldr	r3, [sp, #16]
 8005648:	eba0 000a 	sub.w	r0, r0, sl
 800564c:	4082      	lsls	r2, r0
 800564e:	4313      	orrs	r3, r2
 8005650:	3401      	adds	r4, #1
 8005652:	9304      	str	r3, [sp, #16]
 8005654:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005658:	2206      	movs	r2, #6
 800565a:	4825      	ldr	r0, [pc, #148]	@ (80056f0 <_svfiprintf_r+0x1ec>)
 800565c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005660:	f7fd fc6f 	bl	8002f42 <memchr>
 8005664:	2800      	cmp	r0, #0
 8005666:	d036      	beq.n	80056d6 <_svfiprintf_r+0x1d2>
 8005668:	4b22      	ldr	r3, [pc, #136]	@ (80056f4 <_svfiprintf_r+0x1f0>)
 800566a:	bb1b      	cbnz	r3, 80056b4 <_svfiprintf_r+0x1b0>
 800566c:	9b03      	ldr	r3, [sp, #12]
 800566e:	3307      	adds	r3, #7
 8005670:	f023 0307 	bic.w	r3, r3, #7
 8005674:	3308      	adds	r3, #8
 8005676:	9303      	str	r3, [sp, #12]
 8005678:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800567a:	4433      	add	r3, r6
 800567c:	9309      	str	r3, [sp, #36]	@ 0x24
 800567e:	e76a      	b.n	8005556 <_svfiprintf_r+0x52>
 8005680:	460c      	mov	r4, r1
 8005682:	2001      	movs	r0, #1
 8005684:	fb0c 3202 	mla	r2, ip, r2, r3
 8005688:	e7a8      	b.n	80055dc <_svfiprintf_r+0xd8>
 800568a:	2300      	movs	r3, #0
 800568c:	f04f 0c0a 	mov.w	ip, #10
 8005690:	4619      	mov	r1, r3
 8005692:	3401      	adds	r4, #1
 8005694:	9305      	str	r3, [sp, #20]
 8005696:	4620      	mov	r0, r4
 8005698:	f810 2b01 	ldrb.w	r2, [r0], #1
 800569c:	3a30      	subs	r2, #48	@ 0x30
 800569e:	2a09      	cmp	r2, #9
 80056a0:	d903      	bls.n	80056aa <_svfiprintf_r+0x1a6>
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d0c6      	beq.n	8005634 <_svfiprintf_r+0x130>
 80056a6:	9105      	str	r1, [sp, #20]
 80056a8:	e7c4      	b.n	8005634 <_svfiprintf_r+0x130>
 80056aa:	4604      	mov	r4, r0
 80056ac:	2301      	movs	r3, #1
 80056ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80056b2:	e7f0      	b.n	8005696 <_svfiprintf_r+0x192>
 80056b4:	ab03      	add	r3, sp, #12
 80056b6:	9300      	str	r3, [sp, #0]
 80056b8:	462a      	mov	r2, r5
 80056ba:	4638      	mov	r0, r7
 80056bc:	4b0e      	ldr	r3, [pc, #56]	@ (80056f8 <_svfiprintf_r+0x1f4>)
 80056be:	a904      	add	r1, sp, #16
 80056c0:	f7fc fccc 	bl	800205c <_printf_float>
 80056c4:	1c42      	adds	r2, r0, #1
 80056c6:	4606      	mov	r6, r0
 80056c8:	d1d6      	bne.n	8005678 <_svfiprintf_r+0x174>
 80056ca:	89ab      	ldrh	r3, [r5, #12]
 80056cc:	065b      	lsls	r3, r3, #25
 80056ce:	f53f af2d 	bmi.w	800552c <_svfiprintf_r+0x28>
 80056d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80056d4:	e72c      	b.n	8005530 <_svfiprintf_r+0x2c>
 80056d6:	ab03      	add	r3, sp, #12
 80056d8:	9300      	str	r3, [sp, #0]
 80056da:	462a      	mov	r2, r5
 80056dc:	4638      	mov	r0, r7
 80056de:	4b06      	ldr	r3, [pc, #24]	@ (80056f8 <_svfiprintf_r+0x1f4>)
 80056e0:	a904      	add	r1, sp, #16
 80056e2:	f7fc ff59 	bl	8002598 <_printf_i>
 80056e6:	e7ed      	b.n	80056c4 <_svfiprintf_r+0x1c0>
 80056e8:	08006989 	.word	0x08006989
 80056ec:	0800698f 	.word	0x0800698f
 80056f0:	08006993 	.word	0x08006993
 80056f4:	0800205d 	.word	0x0800205d
 80056f8:	0800544d 	.word	0x0800544d

080056fc <__sflush_r>:
 80056fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005702:	0716      	lsls	r6, r2, #28
 8005704:	4605      	mov	r5, r0
 8005706:	460c      	mov	r4, r1
 8005708:	d454      	bmi.n	80057b4 <__sflush_r+0xb8>
 800570a:	684b      	ldr	r3, [r1, #4]
 800570c:	2b00      	cmp	r3, #0
 800570e:	dc02      	bgt.n	8005716 <__sflush_r+0x1a>
 8005710:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005712:	2b00      	cmp	r3, #0
 8005714:	dd48      	ble.n	80057a8 <__sflush_r+0xac>
 8005716:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005718:	2e00      	cmp	r6, #0
 800571a:	d045      	beq.n	80057a8 <__sflush_r+0xac>
 800571c:	2300      	movs	r3, #0
 800571e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005722:	682f      	ldr	r7, [r5, #0]
 8005724:	6a21      	ldr	r1, [r4, #32]
 8005726:	602b      	str	r3, [r5, #0]
 8005728:	d030      	beq.n	800578c <__sflush_r+0x90>
 800572a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800572c:	89a3      	ldrh	r3, [r4, #12]
 800572e:	0759      	lsls	r1, r3, #29
 8005730:	d505      	bpl.n	800573e <__sflush_r+0x42>
 8005732:	6863      	ldr	r3, [r4, #4]
 8005734:	1ad2      	subs	r2, r2, r3
 8005736:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005738:	b10b      	cbz	r3, 800573e <__sflush_r+0x42>
 800573a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800573c:	1ad2      	subs	r2, r2, r3
 800573e:	2300      	movs	r3, #0
 8005740:	4628      	mov	r0, r5
 8005742:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005744:	6a21      	ldr	r1, [r4, #32]
 8005746:	47b0      	blx	r6
 8005748:	1c43      	adds	r3, r0, #1
 800574a:	89a3      	ldrh	r3, [r4, #12]
 800574c:	d106      	bne.n	800575c <__sflush_r+0x60>
 800574e:	6829      	ldr	r1, [r5, #0]
 8005750:	291d      	cmp	r1, #29
 8005752:	d82b      	bhi.n	80057ac <__sflush_r+0xb0>
 8005754:	4a28      	ldr	r2, [pc, #160]	@ (80057f8 <__sflush_r+0xfc>)
 8005756:	410a      	asrs	r2, r1
 8005758:	07d6      	lsls	r6, r2, #31
 800575a:	d427      	bmi.n	80057ac <__sflush_r+0xb0>
 800575c:	2200      	movs	r2, #0
 800575e:	6062      	str	r2, [r4, #4]
 8005760:	6922      	ldr	r2, [r4, #16]
 8005762:	04d9      	lsls	r1, r3, #19
 8005764:	6022      	str	r2, [r4, #0]
 8005766:	d504      	bpl.n	8005772 <__sflush_r+0x76>
 8005768:	1c42      	adds	r2, r0, #1
 800576a:	d101      	bne.n	8005770 <__sflush_r+0x74>
 800576c:	682b      	ldr	r3, [r5, #0]
 800576e:	b903      	cbnz	r3, 8005772 <__sflush_r+0x76>
 8005770:	6560      	str	r0, [r4, #84]	@ 0x54
 8005772:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005774:	602f      	str	r7, [r5, #0]
 8005776:	b1b9      	cbz	r1, 80057a8 <__sflush_r+0xac>
 8005778:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800577c:	4299      	cmp	r1, r3
 800577e:	d002      	beq.n	8005786 <__sflush_r+0x8a>
 8005780:	4628      	mov	r0, r5
 8005782:	f7fe fa41 	bl	8003c08 <_free_r>
 8005786:	2300      	movs	r3, #0
 8005788:	6363      	str	r3, [r4, #52]	@ 0x34
 800578a:	e00d      	b.n	80057a8 <__sflush_r+0xac>
 800578c:	2301      	movs	r3, #1
 800578e:	4628      	mov	r0, r5
 8005790:	47b0      	blx	r6
 8005792:	4602      	mov	r2, r0
 8005794:	1c50      	adds	r0, r2, #1
 8005796:	d1c9      	bne.n	800572c <__sflush_r+0x30>
 8005798:	682b      	ldr	r3, [r5, #0]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d0c6      	beq.n	800572c <__sflush_r+0x30>
 800579e:	2b1d      	cmp	r3, #29
 80057a0:	d001      	beq.n	80057a6 <__sflush_r+0xaa>
 80057a2:	2b16      	cmp	r3, #22
 80057a4:	d11d      	bne.n	80057e2 <__sflush_r+0xe6>
 80057a6:	602f      	str	r7, [r5, #0]
 80057a8:	2000      	movs	r0, #0
 80057aa:	e021      	b.n	80057f0 <__sflush_r+0xf4>
 80057ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057b0:	b21b      	sxth	r3, r3
 80057b2:	e01a      	b.n	80057ea <__sflush_r+0xee>
 80057b4:	690f      	ldr	r7, [r1, #16]
 80057b6:	2f00      	cmp	r7, #0
 80057b8:	d0f6      	beq.n	80057a8 <__sflush_r+0xac>
 80057ba:	0793      	lsls	r3, r2, #30
 80057bc:	bf18      	it	ne
 80057be:	2300      	movne	r3, #0
 80057c0:	680e      	ldr	r6, [r1, #0]
 80057c2:	bf08      	it	eq
 80057c4:	694b      	ldreq	r3, [r1, #20]
 80057c6:	1bf6      	subs	r6, r6, r7
 80057c8:	600f      	str	r7, [r1, #0]
 80057ca:	608b      	str	r3, [r1, #8]
 80057cc:	2e00      	cmp	r6, #0
 80057ce:	ddeb      	ble.n	80057a8 <__sflush_r+0xac>
 80057d0:	4633      	mov	r3, r6
 80057d2:	463a      	mov	r2, r7
 80057d4:	4628      	mov	r0, r5
 80057d6:	6a21      	ldr	r1, [r4, #32]
 80057d8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80057dc:	47e0      	blx	ip
 80057de:	2800      	cmp	r0, #0
 80057e0:	dc07      	bgt.n	80057f2 <__sflush_r+0xf6>
 80057e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057ea:	f04f 30ff 	mov.w	r0, #4294967295
 80057ee:	81a3      	strh	r3, [r4, #12]
 80057f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057f2:	4407      	add	r7, r0
 80057f4:	1a36      	subs	r6, r6, r0
 80057f6:	e7e9      	b.n	80057cc <__sflush_r+0xd0>
 80057f8:	dfbffffe 	.word	0xdfbffffe

080057fc <_fflush_r>:
 80057fc:	b538      	push	{r3, r4, r5, lr}
 80057fe:	690b      	ldr	r3, [r1, #16]
 8005800:	4605      	mov	r5, r0
 8005802:	460c      	mov	r4, r1
 8005804:	b913      	cbnz	r3, 800580c <_fflush_r+0x10>
 8005806:	2500      	movs	r5, #0
 8005808:	4628      	mov	r0, r5
 800580a:	bd38      	pop	{r3, r4, r5, pc}
 800580c:	b118      	cbz	r0, 8005816 <_fflush_r+0x1a>
 800580e:	6a03      	ldr	r3, [r0, #32]
 8005810:	b90b      	cbnz	r3, 8005816 <_fflush_r+0x1a>
 8005812:	f7fd fa7d 	bl	8002d10 <__sinit>
 8005816:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d0f3      	beq.n	8005806 <_fflush_r+0xa>
 800581e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005820:	07d0      	lsls	r0, r2, #31
 8005822:	d404      	bmi.n	800582e <_fflush_r+0x32>
 8005824:	0599      	lsls	r1, r3, #22
 8005826:	d402      	bmi.n	800582e <_fflush_r+0x32>
 8005828:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800582a:	f7fd fb88 	bl	8002f3e <__retarget_lock_acquire_recursive>
 800582e:	4628      	mov	r0, r5
 8005830:	4621      	mov	r1, r4
 8005832:	f7ff ff63 	bl	80056fc <__sflush_r>
 8005836:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005838:	4605      	mov	r5, r0
 800583a:	07da      	lsls	r2, r3, #31
 800583c:	d4e4      	bmi.n	8005808 <_fflush_r+0xc>
 800583e:	89a3      	ldrh	r3, [r4, #12]
 8005840:	059b      	lsls	r3, r3, #22
 8005842:	d4e1      	bmi.n	8005808 <_fflush_r+0xc>
 8005844:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005846:	f7fd fb7b 	bl	8002f40 <__retarget_lock_release_recursive>
 800584a:	e7dd      	b.n	8005808 <_fflush_r+0xc>

0800584c <memmove>:
 800584c:	4288      	cmp	r0, r1
 800584e:	b510      	push	{r4, lr}
 8005850:	eb01 0402 	add.w	r4, r1, r2
 8005854:	d902      	bls.n	800585c <memmove+0x10>
 8005856:	4284      	cmp	r4, r0
 8005858:	4623      	mov	r3, r4
 800585a:	d807      	bhi.n	800586c <memmove+0x20>
 800585c:	1e43      	subs	r3, r0, #1
 800585e:	42a1      	cmp	r1, r4
 8005860:	d008      	beq.n	8005874 <memmove+0x28>
 8005862:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005866:	f803 2f01 	strb.w	r2, [r3, #1]!
 800586a:	e7f8      	b.n	800585e <memmove+0x12>
 800586c:	4601      	mov	r1, r0
 800586e:	4402      	add	r2, r0
 8005870:	428a      	cmp	r2, r1
 8005872:	d100      	bne.n	8005876 <memmove+0x2a>
 8005874:	bd10      	pop	{r4, pc}
 8005876:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800587a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800587e:	e7f7      	b.n	8005870 <memmove+0x24>

08005880 <strncmp>:
 8005880:	b510      	push	{r4, lr}
 8005882:	b16a      	cbz	r2, 80058a0 <strncmp+0x20>
 8005884:	3901      	subs	r1, #1
 8005886:	1884      	adds	r4, r0, r2
 8005888:	f810 2b01 	ldrb.w	r2, [r0], #1
 800588c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8005890:	429a      	cmp	r2, r3
 8005892:	d103      	bne.n	800589c <strncmp+0x1c>
 8005894:	42a0      	cmp	r0, r4
 8005896:	d001      	beq.n	800589c <strncmp+0x1c>
 8005898:	2a00      	cmp	r2, #0
 800589a:	d1f5      	bne.n	8005888 <strncmp+0x8>
 800589c:	1ad0      	subs	r0, r2, r3
 800589e:	bd10      	pop	{r4, pc}
 80058a0:	4610      	mov	r0, r2
 80058a2:	e7fc      	b.n	800589e <strncmp+0x1e>

080058a4 <_sbrk_r>:
 80058a4:	b538      	push	{r3, r4, r5, lr}
 80058a6:	2300      	movs	r3, #0
 80058a8:	4d05      	ldr	r5, [pc, #20]	@ (80058c0 <_sbrk_r+0x1c>)
 80058aa:	4604      	mov	r4, r0
 80058ac:	4608      	mov	r0, r1
 80058ae:	602b      	str	r3, [r5, #0]
 80058b0:	f7fb fc04 	bl	80010bc <_sbrk>
 80058b4:	1c43      	adds	r3, r0, #1
 80058b6:	d102      	bne.n	80058be <_sbrk_r+0x1a>
 80058b8:	682b      	ldr	r3, [r5, #0]
 80058ba:	b103      	cbz	r3, 80058be <_sbrk_r+0x1a>
 80058bc:	6023      	str	r3, [r4, #0]
 80058be:	bd38      	pop	{r3, r4, r5, pc}
 80058c0:	20000334 	.word	0x20000334

080058c4 <memcpy>:
 80058c4:	440a      	add	r2, r1
 80058c6:	4291      	cmp	r1, r2
 80058c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80058cc:	d100      	bne.n	80058d0 <memcpy+0xc>
 80058ce:	4770      	bx	lr
 80058d0:	b510      	push	{r4, lr}
 80058d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058d6:	4291      	cmp	r1, r2
 80058d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058dc:	d1f9      	bne.n	80058d2 <memcpy+0xe>
 80058de:	bd10      	pop	{r4, pc}

080058e0 <nan>:
 80058e0:	2000      	movs	r0, #0
 80058e2:	4901      	ldr	r1, [pc, #4]	@ (80058e8 <nan+0x8>)
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop
 80058e8:	7ff80000 	.word	0x7ff80000

080058ec <__assert_func>:
 80058ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80058ee:	4614      	mov	r4, r2
 80058f0:	461a      	mov	r2, r3
 80058f2:	4b09      	ldr	r3, [pc, #36]	@ (8005918 <__assert_func+0x2c>)
 80058f4:	4605      	mov	r5, r0
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68d8      	ldr	r0, [r3, #12]
 80058fa:	b954      	cbnz	r4, 8005912 <__assert_func+0x26>
 80058fc:	4b07      	ldr	r3, [pc, #28]	@ (800591c <__assert_func+0x30>)
 80058fe:	461c      	mov	r4, r3
 8005900:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005904:	9100      	str	r1, [sp, #0]
 8005906:	462b      	mov	r3, r5
 8005908:	4905      	ldr	r1, [pc, #20]	@ (8005920 <__assert_func+0x34>)
 800590a:	f000 fba7 	bl	800605c <fiprintf>
 800590e:	f000 fbb7 	bl	8006080 <abort>
 8005912:	4b04      	ldr	r3, [pc, #16]	@ (8005924 <__assert_func+0x38>)
 8005914:	e7f4      	b.n	8005900 <__assert_func+0x14>
 8005916:	bf00      	nop
 8005918:	20000018 	.word	0x20000018
 800591c:	080069dd 	.word	0x080069dd
 8005920:	080069af 	.word	0x080069af
 8005924:	080069a2 	.word	0x080069a2

08005928 <_calloc_r>:
 8005928:	b570      	push	{r4, r5, r6, lr}
 800592a:	fba1 5402 	umull	r5, r4, r1, r2
 800592e:	b93c      	cbnz	r4, 8005940 <_calloc_r+0x18>
 8005930:	4629      	mov	r1, r5
 8005932:	f7fe f9db 	bl	8003cec <_malloc_r>
 8005936:	4606      	mov	r6, r0
 8005938:	b928      	cbnz	r0, 8005946 <_calloc_r+0x1e>
 800593a:	2600      	movs	r6, #0
 800593c:	4630      	mov	r0, r6
 800593e:	bd70      	pop	{r4, r5, r6, pc}
 8005940:	220c      	movs	r2, #12
 8005942:	6002      	str	r2, [r0, #0]
 8005944:	e7f9      	b.n	800593a <_calloc_r+0x12>
 8005946:	462a      	mov	r2, r5
 8005948:	4621      	mov	r1, r4
 800594a:	f7fd fa7a 	bl	8002e42 <memset>
 800594e:	e7f5      	b.n	800593c <_calloc_r+0x14>

08005950 <rshift>:
 8005950:	6903      	ldr	r3, [r0, #16]
 8005952:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005956:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800595a:	f100 0414 	add.w	r4, r0, #20
 800595e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8005962:	dd46      	ble.n	80059f2 <rshift+0xa2>
 8005964:	f011 011f 	ands.w	r1, r1, #31
 8005968:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800596c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8005970:	d10c      	bne.n	800598c <rshift+0x3c>
 8005972:	4629      	mov	r1, r5
 8005974:	f100 0710 	add.w	r7, r0, #16
 8005978:	42b1      	cmp	r1, r6
 800597a:	d335      	bcc.n	80059e8 <rshift+0x98>
 800597c:	1a9b      	subs	r3, r3, r2
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	1eea      	subs	r2, r5, #3
 8005982:	4296      	cmp	r6, r2
 8005984:	bf38      	it	cc
 8005986:	2300      	movcc	r3, #0
 8005988:	4423      	add	r3, r4
 800598a:	e015      	b.n	80059b8 <rshift+0x68>
 800598c:	46a1      	mov	r9, r4
 800598e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8005992:	f1c1 0820 	rsb	r8, r1, #32
 8005996:	40cf      	lsrs	r7, r1
 8005998:	f105 0e04 	add.w	lr, r5, #4
 800599c:	4576      	cmp	r6, lr
 800599e:	46f4      	mov	ip, lr
 80059a0:	d816      	bhi.n	80059d0 <rshift+0x80>
 80059a2:	1a9a      	subs	r2, r3, r2
 80059a4:	0092      	lsls	r2, r2, #2
 80059a6:	3a04      	subs	r2, #4
 80059a8:	3501      	adds	r5, #1
 80059aa:	42ae      	cmp	r6, r5
 80059ac:	bf38      	it	cc
 80059ae:	2200      	movcc	r2, #0
 80059b0:	18a3      	adds	r3, r4, r2
 80059b2:	50a7      	str	r7, [r4, r2]
 80059b4:	b107      	cbz	r7, 80059b8 <rshift+0x68>
 80059b6:	3304      	adds	r3, #4
 80059b8:	42a3      	cmp	r3, r4
 80059ba:	eba3 0204 	sub.w	r2, r3, r4
 80059be:	bf08      	it	eq
 80059c0:	2300      	moveq	r3, #0
 80059c2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80059c6:	6102      	str	r2, [r0, #16]
 80059c8:	bf08      	it	eq
 80059ca:	6143      	streq	r3, [r0, #20]
 80059cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80059d0:	f8dc c000 	ldr.w	ip, [ip]
 80059d4:	fa0c fc08 	lsl.w	ip, ip, r8
 80059d8:	ea4c 0707 	orr.w	r7, ip, r7
 80059dc:	f849 7b04 	str.w	r7, [r9], #4
 80059e0:	f85e 7b04 	ldr.w	r7, [lr], #4
 80059e4:	40cf      	lsrs	r7, r1
 80059e6:	e7d9      	b.n	800599c <rshift+0x4c>
 80059e8:	f851 cb04 	ldr.w	ip, [r1], #4
 80059ec:	f847 cf04 	str.w	ip, [r7, #4]!
 80059f0:	e7c2      	b.n	8005978 <rshift+0x28>
 80059f2:	4623      	mov	r3, r4
 80059f4:	e7e0      	b.n	80059b8 <rshift+0x68>

080059f6 <__hexdig_fun>:
 80059f6:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80059fa:	2b09      	cmp	r3, #9
 80059fc:	d802      	bhi.n	8005a04 <__hexdig_fun+0xe>
 80059fe:	3820      	subs	r0, #32
 8005a00:	b2c0      	uxtb	r0, r0
 8005a02:	4770      	bx	lr
 8005a04:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8005a08:	2b05      	cmp	r3, #5
 8005a0a:	d801      	bhi.n	8005a10 <__hexdig_fun+0x1a>
 8005a0c:	3847      	subs	r0, #71	@ 0x47
 8005a0e:	e7f7      	b.n	8005a00 <__hexdig_fun+0xa>
 8005a10:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8005a14:	2b05      	cmp	r3, #5
 8005a16:	d801      	bhi.n	8005a1c <__hexdig_fun+0x26>
 8005a18:	3827      	subs	r0, #39	@ 0x27
 8005a1a:	e7f1      	b.n	8005a00 <__hexdig_fun+0xa>
 8005a1c:	2000      	movs	r0, #0
 8005a1e:	4770      	bx	lr

08005a20 <__gethex>:
 8005a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a24:	468a      	mov	sl, r1
 8005a26:	4690      	mov	r8, r2
 8005a28:	b085      	sub	sp, #20
 8005a2a:	9302      	str	r3, [sp, #8]
 8005a2c:	680b      	ldr	r3, [r1, #0]
 8005a2e:	9001      	str	r0, [sp, #4]
 8005a30:	1c9c      	adds	r4, r3, #2
 8005a32:	46a1      	mov	r9, r4
 8005a34:	f814 0b01 	ldrb.w	r0, [r4], #1
 8005a38:	2830      	cmp	r0, #48	@ 0x30
 8005a3a:	d0fa      	beq.n	8005a32 <__gethex+0x12>
 8005a3c:	eba9 0303 	sub.w	r3, r9, r3
 8005a40:	f1a3 0b02 	sub.w	fp, r3, #2
 8005a44:	f7ff ffd7 	bl	80059f6 <__hexdig_fun>
 8005a48:	4605      	mov	r5, r0
 8005a4a:	2800      	cmp	r0, #0
 8005a4c:	d168      	bne.n	8005b20 <__gethex+0x100>
 8005a4e:	2201      	movs	r2, #1
 8005a50:	4648      	mov	r0, r9
 8005a52:	499f      	ldr	r1, [pc, #636]	@ (8005cd0 <__gethex+0x2b0>)
 8005a54:	f7ff ff14 	bl	8005880 <strncmp>
 8005a58:	4607      	mov	r7, r0
 8005a5a:	2800      	cmp	r0, #0
 8005a5c:	d167      	bne.n	8005b2e <__gethex+0x10e>
 8005a5e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8005a62:	4626      	mov	r6, r4
 8005a64:	f7ff ffc7 	bl	80059f6 <__hexdig_fun>
 8005a68:	2800      	cmp	r0, #0
 8005a6a:	d062      	beq.n	8005b32 <__gethex+0x112>
 8005a6c:	4623      	mov	r3, r4
 8005a6e:	7818      	ldrb	r0, [r3, #0]
 8005a70:	4699      	mov	r9, r3
 8005a72:	2830      	cmp	r0, #48	@ 0x30
 8005a74:	f103 0301 	add.w	r3, r3, #1
 8005a78:	d0f9      	beq.n	8005a6e <__gethex+0x4e>
 8005a7a:	f7ff ffbc 	bl	80059f6 <__hexdig_fun>
 8005a7e:	fab0 f580 	clz	r5, r0
 8005a82:	f04f 0b01 	mov.w	fp, #1
 8005a86:	096d      	lsrs	r5, r5, #5
 8005a88:	464a      	mov	r2, r9
 8005a8a:	4616      	mov	r6, r2
 8005a8c:	7830      	ldrb	r0, [r6, #0]
 8005a8e:	3201      	adds	r2, #1
 8005a90:	f7ff ffb1 	bl	80059f6 <__hexdig_fun>
 8005a94:	2800      	cmp	r0, #0
 8005a96:	d1f8      	bne.n	8005a8a <__gethex+0x6a>
 8005a98:	2201      	movs	r2, #1
 8005a9a:	4630      	mov	r0, r6
 8005a9c:	498c      	ldr	r1, [pc, #560]	@ (8005cd0 <__gethex+0x2b0>)
 8005a9e:	f7ff feef 	bl	8005880 <strncmp>
 8005aa2:	2800      	cmp	r0, #0
 8005aa4:	d13f      	bne.n	8005b26 <__gethex+0x106>
 8005aa6:	b944      	cbnz	r4, 8005aba <__gethex+0x9a>
 8005aa8:	1c74      	adds	r4, r6, #1
 8005aaa:	4622      	mov	r2, r4
 8005aac:	4616      	mov	r6, r2
 8005aae:	7830      	ldrb	r0, [r6, #0]
 8005ab0:	3201      	adds	r2, #1
 8005ab2:	f7ff ffa0 	bl	80059f6 <__hexdig_fun>
 8005ab6:	2800      	cmp	r0, #0
 8005ab8:	d1f8      	bne.n	8005aac <__gethex+0x8c>
 8005aba:	1ba4      	subs	r4, r4, r6
 8005abc:	00a7      	lsls	r7, r4, #2
 8005abe:	7833      	ldrb	r3, [r6, #0]
 8005ac0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8005ac4:	2b50      	cmp	r3, #80	@ 0x50
 8005ac6:	d13e      	bne.n	8005b46 <__gethex+0x126>
 8005ac8:	7873      	ldrb	r3, [r6, #1]
 8005aca:	2b2b      	cmp	r3, #43	@ 0x2b
 8005acc:	d033      	beq.n	8005b36 <__gethex+0x116>
 8005ace:	2b2d      	cmp	r3, #45	@ 0x2d
 8005ad0:	d034      	beq.n	8005b3c <__gethex+0x11c>
 8005ad2:	2400      	movs	r4, #0
 8005ad4:	1c71      	adds	r1, r6, #1
 8005ad6:	7808      	ldrb	r0, [r1, #0]
 8005ad8:	f7ff ff8d 	bl	80059f6 <__hexdig_fun>
 8005adc:	1e43      	subs	r3, r0, #1
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	2b18      	cmp	r3, #24
 8005ae2:	d830      	bhi.n	8005b46 <__gethex+0x126>
 8005ae4:	f1a0 0210 	sub.w	r2, r0, #16
 8005ae8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005aec:	f7ff ff83 	bl	80059f6 <__hexdig_fun>
 8005af0:	f100 3cff 	add.w	ip, r0, #4294967295
 8005af4:	fa5f fc8c 	uxtb.w	ip, ip
 8005af8:	f1bc 0f18 	cmp.w	ip, #24
 8005afc:	f04f 030a 	mov.w	r3, #10
 8005b00:	d91e      	bls.n	8005b40 <__gethex+0x120>
 8005b02:	b104      	cbz	r4, 8005b06 <__gethex+0xe6>
 8005b04:	4252      	negs	r2, r2
 8005b06:	4417      	add	r7, r2
 8005b08:	f8ca 1000 	str.w	r1, [sl]
 8005b0c:	b1ed      	cbz	r5, 8005b4a <__gethex+0x12a>
 8005b0e:	f1bb 0f00 	cmp.w	fp, #0
 8005b12:	bf0c      	ite	eq
 8005b14:	2506      	moveq	r5, #6
 8005b16:	2500      	movne	r5, #0
 8005b18:	4628      	mov	r0, r5
 8005b1a:	b005      	add	sp, #20
 8005b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b20:	2500      	movs	r5, #0
 8005b22:	462c      	mov	r4, r5
 8005b24:	e7b0      	b.n	8005a88 <__gethex+0x68>
 8005b26:	2c00      	cmp	r4, #0
 8005b28:	d1c7      	bne.n	8005aba <__gethex+0x9a>
 8005b2a:	4627      	mov	r7, r4
 8005b2c:	e7c7      	b.n	8005abe <__gethex+0x9e>
 8005b2e:	464e      	mov	r6, r9
 8005b30:	462f      	mov	r7, r5
 8005b32:	2501      	movs	r5, #1
 8005b34:	e7c3      	b.n	8005abe <__gethex+0x9e>
 8005b36:	2400      	movs	r4, #0
 8005b38:	1cb1      	adds	r1, r6, #2
 8005b3a:	e7cc      	b.n	8005ad6 <__gethex+0xb6>
 8005b3c:	2401      	movs	r4, #1
 8005b3e:	e7fb      	b.n	8005b38 <__gethex+0x118>
 8005b40:	fb03 0002 	mla	r0, r3, r2, r0
 8005b44:	e7ce      	b.n	8005ae4 <__gethex+0xc4>
 8005b46:	4631      	mov	r1, r6
 8005b48:	e7de      	b.n	8005b08 <__gethex+0xe8>
 8005b4a:	4629      	mov	r1, r5
 8005b4c:	eba6 0309 	sub.w	r3, r6, r9
 8005b50:	3b01      	subs	r3, #1
 8005b52:	2b07      	cmp	r3, #7
 8005b54:	dc0a      	bgt.n	8005b6c <__gethex+0x14c>
 8005b56:	9801      	ldr	r0, [sp, #4]
 8005b58:	f7fe f954 	bl	8003e04 <_Balloc>
 8005b5c:	4604      	mov	r4, r0
 8005b5e:	b940      	cbnz	r0, 8005b72 <__gethex+0x152>
 8005b60:	4602      	mov	r2, r0
 8005b62:	21e4      	movs	r1, #228	@ 0xe4
 8005b64:	4b5b      	ldr	r3, [pc, #364]	@ (8005cd4 <__gethex+0x2b4>)
 8005b66:	485c      	ldr	r0, [pc, #368]	@ (8005cd8 <__gethex+0x2b8>)
 8005b68:	f7ff fec0 	bl	80058ec <__assert_func>
 8005b6c:	3101      	adds	r1, #1
 8005b6e:	105b      	asrs	r3, r3, #1
 8005b70:	e7ef      	b.n	8005b52 <__gethex+0x132>
 8005b72:	2300      	movs	r3, #0
 8005b74:	f100 0a14 	add.w	sl, r0, #20
 8005b78:	4655      	mov	r5, sl
 8005b7a:	469b      	mov	fp, r3
 8005b7c:	45b1      	cmp	r9, r6
 8005b7e:	d337      	bcc.n	8005bf0 <__gethex+0x1d0>
 8005b80:	f845 bb04 	str.w	fp, [r5], #4
 8005b84:	eba5 050a 	sub.w	r5, r5, sl
 8005b88:	10ad      	asrs	r5, r5, #2
 8005b8a:	6125      	str	r5, [r4, #16]
 8005b8c:	4658      	mov	r0, fp
 8005b8e:	f7fe fa2b 	bl	8003fe8 <__hi0bits>
 8005b92:	016d      	lsls	r5, r5, #5
 8005b94:	f8d8 6000 	ldr.w	r6, [r8]
 8005b98:	1a2d      	subs	r5, r5, r0
 8005b9a:	42b5      	cmp	r5, r6
 8005b9c:	dd54      	ble.n	8005c48 <__gethex+0x228>
 8005b9e:	1bad      	subs	r5, r5, r6
 8005ba0:	4629      	mov	r1, r5
 8005ba2:	4620      	mov	r0, r4
 8005ba4:	f7fe fdb3 	bl	800470e <__any_on>
 8005ba8:	4681      	mov	r9, r0
 8005baa:	b178      	cbz	r0, 8005bcc <__gethex+0x1ac>
 8005bac:	f04f 0901 	mov.w	r9, #1
 8005bb0:	1e6b      	subs	r3, r5, #1
 8005bb2:	1159      	asrs	r1, r3, #5
 8005bb4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8005bb8:	f003 021f 	and.w	r2, r3, #31
 8005bbc:	fa09 f202 	lsl.w	r2, r9, r2
 8005bc0:	420a      	tst	r2, r1
 8005bc2:	d003      	beq.n	8005bcc <__gethex+0x1ac>
 8005bc4:	454b      	cmp	r3, r9
 8005bc6:	dc36      	bgt.n	8005c36 <__gethex+0x216>
 8005bc8:	f04f 0902 	mov.w	r9, #2
 8005bcc:	4629      	mov	r1, r5
 8005bce:	4620      	mov	r0, r4
 8005bd0:	f7ff febe 	bl	8005950 <rshift>
 8005bd4:	442f      	add	r7, r5
 8005bd6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005bda:	42bb      	cmp	r3, r7
 8005bdc:	da42      	bge.n	8005c64 <__gethex+0x244>
 8005bde:	4621      	mov	r1, r4
 8005be0:	9801      	ldr	r0, [sp, #4]
 8005be2:	f7fe f94f 	bl	8003e84 <_Bfree>
 8005be6:	2300      	movs	r3, #0
 8005be8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005bea:	25a3      	movs	r5, #163	@ 0xa3
 8005bec:	6013      	str	r3, [r2, #0]
 8005bee:	e793      	b.n	8005b18 <__gethex+0xf8>
 8005bf0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8005bf4:	2a2e      	cmp	r2, #46	@ 0x2e
 8005bf6:	d012      	beq.n	8005c1e <__gethex+0x1fe>
 8005bf8:	2b20      	cmp	r3, #32
 8005bfa:	d104      	bne.n	8005c06 <__gethex+0x1e6>
 8005bfc:	f845 bb04 	str.w	fp, [r5], #4
 8005c00:	f04f 0b00 	mov.w	fp, #0
 8005c04:	465b      	mov	r3, fp
 8005c06:	7830      	ldrb	r0, [r6, #0]
 8005c08:	9303      	str	r3, [sp, #12]
 8005c0a:	f7ff fef4 	bl	80059f6 <__hexdig_fun>
 8005c0e:	9b03      	ldr	r3, [sp, #12]
 8005c10:	f000 000f 	and.w	r0, r0, #15
 8005c14:	4098      	lsls	r0, r3
 8005c16:	ea4b 0b00 	orr.w	fp, fp, r0
 8005c1a:	3304      	adds	r3, #4
 8005c1c:	e7ae      	b.n	8005b7c <__gethex+0x15c>
 8005c1e:	45b1      	cmp	r9, r6
 8005c20:	d8ea      	bhi.n	8005bf8 <__gethex+0x1d8>
 8005c22:	2201      	movs	r2, #1
 8005c24:	4630      	mov	r0, r6
 8005c26:	492a      	ldr	r1, [pc, #168]	@ (8005cd0 <__gethex+0x2b0>)
 8005c28:	9303      	str	r3, [sp, #12]
 8005c2a:	f7ff fe29 	bl	8005880 <strncmp>
 8005c2e:	9b03      	ldr	r3, [sp, #12]
 8005c30:	2800      	cmp	r0, #0
 8005c32:	d1e1      	bne.n	8005bf8 <__gethex+0x1d8>
 8005c34:	e7a2      	b.n	8005b7c <__gethex+0x15c>
 8005c36:	4620      	mov	r0, r4
 8005c38:	1ea9      	subs	r1, r5, #2
 8005c3a:	f7fe fd68 	bl	800470e <__any_on>
 8005c3e:	2800      	cmp	r0, #0
 8005c40:	d0c2      	beq.n	8005bc8 <__gethex+0x1a8>
 8005c42:	f04f 0903 	mov.w	r9, #3
 8005c46:	e7c1      	b.n	8005bcc <__gethex+0x1ac>
 8005c48:	da09      	bge.n	8005c5e <__gethex+0x23e>
 8005c4a:	1b75      	subs	r5, r6, r5
 8005c4c:	4621      	mov	r1, r4
 8005c4e:	462a      	mov	r2, r5
 8005c50:	9801      	ldr	r0, [sp, #4]
 8005c52:	f7fe fb2d 	bl	80042b0 <__lshift>
 8005c56:	4604      	mov	r4, r0
 8005c58:	1b7f      	subs	r7, r7, r5
 8005c5a:	f100 0a14 	add.w	sl, r0, #20
 8005c5e:	f04f 0900 	mov.w	r9, #0
 8005c62:	e7b8      	b.n	8005bd6 <__gethex+0x1b6>
 8005c64:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8005c68:	42bd      	cmp	r5, r7
 8005c6a:	dd6f      	ble.n	8005d4c <__gethex+0x32c>
 8005c6c:	1bed      	subs	r5, r5, r7
 8005c6e:	42ae      	cmp	r6, r5
 8005c70:	dc34      	bgt.n	8005cdc <__gethex+0x2bc>
 8005c72:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005c76:	2b02      	cmp	r3, #2
 8005c78:	d022      	beq.n	8005cc0 <__gethex+0x2a0>
 8005c7a:	2b03      	cmp	r3, #3
 8005c7c:	d024      	beq.n	8005cc8 <__gethex+0x2a8>
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d115      	bne.n	8005cae <__gethex+0x28e>
 8005c82:	42ae      	cmp	r6, r5
 8005c84:	d113      	bne.n	8005cae <__gethex+0x28e>
 8005c86:	2e01      	cmp	r6, #1
 8005c88:	d10b      	bne.n	8005ca2 <__gethex+0x282>
 8005c8a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005c8e:	9a02      	ldr	r2, [sp, #8]
 8005c90:	2562      	movs	r5, #98	@ 0x62
 8005c92:	6013      	str	r3, [r2, #0]
 8005c94:	2301      	movs	r3, #1
 8005c96:	6123      	str	r3, [r4, #16]
 8005c98:	f8ca 3000 	str.w	r3, [sl]
 8005c9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005c9e:	601c      	str	r4, [r3, #0]
 8005ca0:	e73a      	b.n	8005b18 <__gethex+0xf8>
 8005ca2:	4620      	mov	r0, r4
 8005ca4:	1e71      	subs	r1, r6, #1
 8005ca6:	f7fe fd32 	bl	800470e <__any_on>
 8005caa:	2800      	cmp	r0, #0
 8005cac:	d1ed      	bne.n	8005c8a <__gethex+0x26a>
 8005cae:	4621      	mov	r1, r4
 8005cb0:	9801      	ldr	r0, [sp, #4]
 8005cb2:	f7fe f8e7 	bl	8003e84 <_Bfree>
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005cba:	2550      	movs	r5, #80	@ 0x50
 8005cbc:	6013      	str	r3, [r2, #0]
 8005cbe:	e72b      	b.n	8005b18 <__gethex+0xf8>
 8005cc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d1f3      	bne.n	8005cae <__gethex+0x28e>
 8005cc6:	e7e0      	b.n	8005c8a <__gethex+0x26a>
 8005cc8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d1dd      	bne.n	8005c8a <__gethex+0x26a>
 8005cce:	e7ee      	b.n	8005cae <__gethex+0x28e>
 8005cd0:	08006830 	.word	0x08006830
 8005cd4:	080066c7 	.word	0x080066c7
 8005cd8:	080069de 	.word	0x080069de
 8005cdc:	1e6f      	subs	r7, r5, #1
 8005cde:	f1b9 0f00 	cmp.w	r9, #0
 8005ce2:	d130      	bne.n	8005d46 <__gethex+0x326>
 8005ce4:	b127      	cbz	r7, 8005cf0 <__gethex+0x2d0>
 8005ce6:	4639      	mov	r1, r7
 8005ce8:	4620      	mov	r0, r4
 8005cea:	f7fe fd10 	bl	800470e <__any_on>
 8005cee:	4681      	mov	r9, r0
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	4629      	mov	r1, r5
 8005cf4:	1b76      	subs	r6, r6, r5
 8005cf6:	2502      	movs	r5, #2
 8005cf8:	117a      	asrs	r2, r7, #5
 8005cfa:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8005cfe:	f007 071f 	and.w	r7, r7, #31
 8005d02:	40bb      	lsls	r3, r7
 8005d04:	4213      	tst	r3, r2
 8005d06:	4620      	mov	r0, r4
 8005d08:	bf18      	it	ne
 8005d0a:	f049 0902 	orrne.w	r9, r9, #2
 8005d0e:	f7ff fe1f 	bl	8005950 <rshift>
 8005d12:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8005d16:	f1b9 0f00 	cmp.w	r9, #0
 8005d1a:	d047      	beq.n	8005dac <__gethex+0x38c>
 8005d1c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	d015      	beq.n	8005d50 <__gethex+0x330>
 8005d24:	2b03      	cmp	r3, #3
 8005d26:	d017      	beq.n	8005d58 <__gethex+0x338>
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d109      	bne.n	8005d40 <__gethex+0x320>
 8005d2c:	f019 0f02 	tst.w	r9, #2
 8005d30:	d006      	beq.n	8005d40 <__gethex+0x320>
 8005d32:	f8da 3000 	ldr.w	r3, [sl]
 8005d36:	ea49 0903 	orr.w	r9, r9, r3
 8005d3a:	f019 0f01 	tst.w	r9, #1
 8005d3e:	d10e      	bne.n	8005d5e <__gethex+0x33e>
 8005d40:	f045 0510 	orr.w	r5, r5, #16
 8005d44:	e032      	b.n	8005dac <__gethex+0x38c>
 8005d46:	f04f 0901 	mov.w	r9, #1
 8005d4a:	e7d1      	b.n	8005cf0 <__gethex+0x2d0>
 8005d4c:	2501      	movs	r5, #1
 8005d4e:	e7e2      	b.n	8005d16 <__gethex+0x2f6>
 8005d50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005d52:	f1c3 0301 	rsb	r3, r3, #1
 8005d56:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005d58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d0f0      	beq.n	8005d40 <__gethex+0x320>
 8005d5e:	f04f 0c00 	mov.w	ip, #0
 8005d62:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8005d66:	f104 0314 	add.w	r3, r4, #20
 8005d6a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8005d6e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8005d72:	4618      	mov	r0, r3
 8005d74:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d78:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005d7c:	d01b      	beq.n	8005db6 <__gethex+0x396>
 8005d7e:	3201      	adds	r2, #1
 8005d80:	6002      	str	r2, [r0, #0]
 8005d82:	2d02      	cmp	r5, #2
 8005d84:	f104 0314 	add.w	r3, r4, #20
 8005d88:	d13c      	bne.n	8005e04 <__gethex+0x3e4>
 8005d8a:	f8d8 2000 	ldr.w	r2, [r8]
 8005d8e:	3a01      	subs	r2, #1
 8005d90:	42b2      	cmp	r2, r6
 8005d92:	d109      	bne.n	8005da8 <__gethex+0x388>
 8005d94:	2201      	movs	r2, #1
 8005d96:	1171      	asrs	r1, r6, #5
 8005d98:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005d9c:	f006 061f 	and.w	r6, r6, #31
 8005da0:	fa02 f606 	lsl.w	r6, r2, r6
 8005da4:	421e      	tst	r6, r3
 8005da6:	d13a      	bne.n	8005e1e <__gethex+0x3fe>
 8005da8:	f045 0520 	orr.w	r5, r5, #32
 8005dac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005dae:	601c      	str	r4, [r3, #0]
 8005db0:	9b02      	ldr	r3, [sp, #8]
 8005db2:	601f      	str	r7, [r3, #0]
 8005db4:	e6b0      	b.n	8005b18 <__gethex+0xf8>
 8005db6:	4299      	cmp	r1, r3
 8005db8:	f843 cc04 	str.w	ip, [r3, #-4]
 8005dbc:	d8d9      	bhi.n	8005d72 <__gethex+0x352>
 8005dbe:	68a3      	ldr	r3, [r4, #8]
 8005dc0:	459b      	cmp	fp, r3
 8005dc2:	db17      	blt.n	8005df4 <__gethex+0x3d4>
 8005dc4:	6861      	ldr	r1, [r4, #4]
 8005dc6:	9801      	ldr	r0, [sp, #4]
 8005dc8:	3101      	adds	r1, #1
 8005dca:	f7fe f81b 	bl	8003e04 <_Balloc>
 8005dce:	4681      	mov	r9, r0
 8005dd0:	b918      	cbnz	r0, 8005dda <__gethex+0x3ba>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	2184      	movs	r1, #132	@ 0x84
 8005dd6:	4b19      	ldr	r3, [pc, #100]	@ (8005e3c <__gethex+0x41c>)
 8005dd8:	e6c5      	b.n	8005b66 <__gethex+0x146>
 8005dda:	6922      	ldr	r2, [r4, #16]
 8005ddc:	f104 010c 	add.w	r1, r4, #12
 8005de0:	3202      	adds	r2, #2
 8005de2:	0092      	lsls	r2, r2, #2
 8005de4:	300c      	adds	r0, #12
 8005de6:	f7ff fd6d 	bl	80058c4 <memcpy>
 8005dea:	4621      	mov	r1, r4
 8005dec:	9801      	ldr	r0, [sp, #4]
 8005dee:	f7fe f849 	bl	8003e84 <_Bfree>
 8005df2:	464c      	mov	r4, r9
 8005df4:	6923      	ldr	r3, [r4, #16]
 8005df6:	1c5a      	adds	r2, r3, #1
 8005df8:	6122      	str	r2, [r4, #16]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005e00:	615a      	str	r2, [r3, #20]
 8005e02:	e7be      	b.n	8005d82 <__gethex+0x362>
 8005e04:	6922      	ldr	r2, [r4, #16]
 8005e06:	455a      	cmp	r2, fp
 8005e08:	dd0b      	ble.n	8005e22 <__gethex+0x402>
 8005e0a:	2101      	movs	r1, #1
 8005e0c:	4620      	mov	r0, r4
 8005e0e:	f7ff fd9f 	bl	8005950 <rshift>
 8005e12:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005e16:	3701      	adds	r7, #1
 8005e18:	42bb      	cmp	r3, r7
 8005e1a:	f6ff aee0 	blt.w	8005bde <__gethex+0x1be>
 8005e1e:	2501      	movs	r5, #1
 8005e20:	e7c2      	b.n	8005da8 <__gethex+0x388>
 8005e22:	f016 061f 	ands.w	r6, r6, #31
 8005e26:	d0fa      	beq.n	8005e1e <__gethex+0x3fe>
 8005e28:	4453      	add	r3, sl
 8005e2a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8005e2e:	f7fe f8db 	bl	8003fe8 <__hi0bits>
 8005e32:	f1c6 0620 	rsb	r6, r6, #32
 8005e36:	42b0      	cmp	r0, r6
 8005e38:	dbe7      	blt.n	8005e0a <__gethex+0x3ea>
 8005e3a:	e7f0      	b.n	8005e1e <__gethex+0x3fe>
 8005e3c:	080066c7 	.word	0x080066c7

08005e40 <L_shift>:
 8005e40:	f1c2 0208 	rsb	r2, r2, #8
 8005e44:	0092      	lsls	r2, r2, #2
 8005e46:	b570      	push	{r4, r5, r6, lr}
 8005e48:	f1c2 0620 	rsb	r6, r2, #32
 8005e4c:	6843      	ldr	r3, [r0, #4]
 8005e4e:	6804      	ldr	r4, [r0, #0]
 8005e50:	fa03 f506 	lsl.w	r5, r3, r6
 8005e54:	432c      	orrs	r4, r5
 8005e56:	40d3      	lsrs	r3, r2
 8005e58:	6004      	str	r4, [r0, #0]
 8005e5a:	f840 3f04 	str.w	r3, [r0, #4]!
 8005e5e:	4288      	cmp	r0, r1
 8005e60:	d3f4      	bcc.n	8005e4c <L_shift+0xc>
 8005e62:	bd70      	pop	{r4, r5, r6, pc}

08005e64 <__match>:
 8005e64:	b530      	push	{r4, r5, lr}
 8005e66:	6803      	ldr	r3, [r0, #0]
 8005e68:	3301      	adds	r3, #1
 8005e6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e6e:	b914      	cbnz	r4, 8005e76 <__match+0x12>
 8005e70:	6003      	str	r3, [r0, #0]
 8005e72:	2001      	movs	r0, #1
 8005e74:	bd30      	pop	{r4, r5, pc}
 8005e76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e7a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8005e7e:	2d19      	cmp	r5, #25
 8005e80:	bf98      	it	ls
 8005e82:	3220      	addls	r2, #32
 8005e84:	42a2      	cmp	r2, r4
 8005e86:	d0f0      	beq.n	8005e6a <__match+0x6>
 8005e88:	2000      	movs	r0, #0
 8005e8a:	e7f3      	b.n	8005e74 <__match+0x10>

08005e8c <__hexnan>:
 8005e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e90:	2500      	movs	r5, #0
 8005e92:	680b      	ldr	r3, [r1, #0]
 8005e94:	4682      	mov	sl, r0
 8005e96:	115e      	asrs	r6, r3, #5
 8005e98:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005e9c:	f013 031f 	ands.w	r3, r3, #31
 8005ea0:	bf18      	it	ne
 8005ea2:	3604      	addne	r6, #4
 8005ea4:	1f37      	subs	r7, r6, #4
 8005ea6:	4690      	mov	r8, r2
 8005ea8:	46b9      	mov	r9, r7
 8005eaa:	463c      	mov	r4, r7
 8005eac:	46ab      	mov	fp, r5
 8005eae:	b087      	sub	sp, #28
 8005eb0:	6801      	ldr	r1, [r0, #0]
 8005eb2:	9301      	str	r3, [sp, #4]
 8005eb4:	f846 5c04 	str.w	r5, [r6, #-4]
 8005eb8:	9502      	str	r5, [sp, #8]
 8005eba:	784a      	ldrb	r2, [r1, #1]
 8005ebc:	1c4b      	adds	r3, r1, #1
 8005ebe:	9303      	str	r3, [sp, #12]
 8005ec0:	b342      	cbz	r2, 8005f14 <__hexnan+0x88>
 8005ec2:	4610      	mov	r0, r2
 8005ec4:	9105      	str	r1, [sp, #20]
 8005ec6:	9204      	str	r2, [sp, #16]
 8005ec8:	f7ff fd95 	bl	80059f6 <__hexdig_fun>
 8005ecc:	2800      	cmp	r0, #0
 8005ece:	d151      	bne.n	8005f74 <__hexnan+0xe8>
 8005ed0:	9a04      	ldr	r2, [sp, #16]
 8005ed2:	9905      	ldr	r1, [sp, #20]
 8005ed4:	2a20      	cmp	r2, #32
 8005ed6:	d818      	bhi.n	8005f0a <__hexnan+0x7e>
 8005ed8:	9b02      	ldr	r3, [sp, #8]
 8005eda:	459b      	cmp	fp, r3
 8005edc:	dd13      	ble.n	8005f06 <__hexnan+0x7a>
 8005ede:	454c      	cmp	r4, r9
 8005ee0:	d206      	bcs.n	8005ef0 <__hexnan+0x64>
 8005ee2:	2d07      	cmp	r5, #7
 8005ee4:	dc04      	bgt.n	8005ef0 <__hexnan+0x64>
 8005ee6:	462a      	mov	r2, r5
 8005ee8:	4649      	mov	r1, r9
 8005eea:	4620      	mov	r0, r4
 8005eec:	f7ff ffa8 	bl	8005e40 <L_shift>
 8005ef0:	4544      	cmp	r4, r8
 8005ef2:	d952      	bls.n	8005f9a <__hexnan+0x10e>
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	f1a4 0904 	sub.w	r9, r4, #4
 8005efa:	f844 3c04 	str.w	r3, [r4, #-4]
 8005efe:	461d      	mov	r5, r3
 8005f00:	464c      	mov	r4, r9
 8005f02:	f8cd b008 	str.w	fp, [sp, #8]
 8005f06:	9903      	ldr	r1, [sp, #12]
 8005f08:	e7d7      	b.n	8005eba <__hexnan+0x2e>
 8005f0a:	2a29      	cmp	r2, #41	@ 0x29
 8005f0c:	d157      	bne.n	8005fbe <__hexnan+0x132>
 8005f0e:	3102      	adds	r1, #2
 8005f10:	f8ca 1000 	str.w	r1, [sl]
 8005f14:	f1bb 0f00 	cmp.w	fp, #0
 8005f18:	d051      	beq.n	8005fbe <__hexnan+0x132>
 8005f1a:	454c      	cmp	r4, r9
 8005f1c:	d206      	bcs.n	8005f2c <__hexnan+0xa0>
 8005f1e:	2d07      	cmp	r5, #7
 8005f20:	dc04      	bgt.n	8005f2c <__hexnan+0xa0>
 8005f22:	462a      	mov	r2, r5
 8005f24:	4649      	mov	r1, r9
 8005f26:	4620      	mov	r0, r4
 8005f28:	f7ff ff8a 	bl	8005e40 <L_shift>
 8005f2c:	4544      	cmp	r4, r8
 8005f2e:	d936      	bls.n	8005f9e <__hexnan+0x112>
 8005f30:	4623      	mov	r3, r4
 8005f32:	f1a8 0204 	sub.w	r2, r8, #4
 8005f36:	f853 1b04 	ldr.w	r1, [r3], #4
 8005f3a:	429f      	cmp	r7, r3
 8005f3c:	f842 1f04 	str.w	r1, [r2, #4]!
 8005f40:	d2f9      	bcs.n	8005f36 <__hexnan+0xaa>
 8005f42:	1b3b      	subs	r3, r7, r4
 8005f44:	f023 0303 	bic.w	r3, r3, #3
 8005f48:	3304      	adds	r3, #4
 8005f4a:	3401      	adds	r4, #1
 8005f4c:	3e03      	subs	r6, #3
 8005f4e:	42b4      	cmp	r4, r6
 8005f50:	bf88      	it	hi
 8005f52:	2304      	movhi	r3, #4
 8005f54:	2200      	movs	r2, #0
 8005f56:	4443      	add	r3, r8
 8005f58:	f843 2b04 	str.w	r2, [r3], #4
 8005f5c:	429f      	cmp	r7, r3
 8005f5e:	d2fb      	bcs.n	8005f58 <__hexnan+0xcc>
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	b91b      	cbnz	r3, 8005f6c <__hexnan+0xe0>
 8005f64:	4547      	cmp	r7, r8
 8005f66:	d128      	bne.n	8005fba <__hexnan+0x12e>
 8005f68:	2301      	movs	r3, #1
 8005f6a:	603b      	str	r3, [r7, #0]
 8005f6c:	2005      	movs	r0, #5
 8005f6e:	b007      	add	sp, #28
 8005f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f74:	3501      	adds	r5, #1
 8005f76:	2d08      	cmp	r5, #8
 8005f78:	f10b 0b01 	add.w	fp, fp, #1
 8005f7c:	dd06      	ble.n	8005f8c <__hexnan+0x100>
 8005f7e:	4544      	cmp	r4, r8
 8005f80:	d9c1      	bls.n	8005f06 <__hexnan+0x7a>
 8005f82:	2300      	movs	r3, #0
 8005f84:	2501      	movs	r5, #1
 8005f86:	f844 3c04 	str.w	r3, [r4, #-4]
 8005f8a:	3c04      	subs	r4, #4
 8005f8c:	6822      	ldr	r2, [r4, #0]
 8005f8e:	f000 000f 	and.w	r0, r0, #15
 8005f92:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8005f96:	6020      	str	r0, [r4, #0]
 8005f98:	e7b5      	b.n	8005f06 <__hexnan+0x7a>
 8005f9a:	2508      	movs	r5, #8
 8005f9c:	e7b3      	b.n	8005f06 <__hexnan+0x7a>
 8005f9e:	9b01      	ldr	r3, [sp, #4]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d0dd      	beq.n	8005f60 <__hexnan+0xd4>
 8005fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8005fa8:	f1c3 0320 	rsb	r3, r3, #32
 8005fac:	40da      	lsrs	r2, r3
 8005fae:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	f846 3c04 	str.w	r3, [r6, #-4]
 8005fb8:	e7d2      	b.n	8005f60 <__hexnan+0xd4>
 8005fba:	3f04      	subs	r7, #4
 8005fbc:	e7d0      	b.n	8005f60 <__hexnan+0xd4>
 8005fbe:	2004      	movs	r0, #4
 8005fc0:	e7d5      	b.n	8005f6e <__hexnan+0xe2>

08005fc2 <__ascii_mbtowc>:
 8005fc2:	b082      	sub	sp, #8
 8005fc4:	b901      	cbnz	r1, 8005fc8 <__ascii_mbtowc+0x6>
 8005fc6:	a901      	add	r1, sp, #4
 8005fc8:	b142      	cbz	r2, 8005fdc <__ascii_mbtowc+0x1a>
 8005fca:	b14b      	cbz	r3, 8005fe0 <__ascii_mbtowc+0x1e>
 8005fcc:	7813      	ldrb	r3, [r2, #0]
 8005fce:	600b      	str	r3, [r1, #0]
 8005fd0:	7812      	ldrb	r2, [r2, #0]
 8005fd2:	1e10      	subs	r0, r2, #0
 8005fd4:	bf18      	it	ne
 8005fd6:	2001      	movne	r0, #1
 8005fd8:	b002      	add	sp, #8
 8005fda:	4770      	bx	lr
 8005fdc:	4610      	mov	r0, r2
 8005fde:	e7fb      	b.n	8005fd8 <__ascii_mbtowc+0x16>
 8005fe0:	f06f 0001 	mvn.w	r0, #1
 8005fe4:	e7f8      	b.n	8005fd8 <__ascii_mbtowc+0x16>

08005fe6 <_realloc_r>:
 8005fe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fea:	4680      	mov	r8, r0
 8005fec:	4615      	mov	r5, r2
 8005fee:	460c      	mov	r4, r1
 8005ff0:	b921      	cbnz	r1, 8005ffc <_realloc_r+0x16>
 8005ff2:	4611      	mov	r1, r2
 8005ff4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ff8:	f7fd be78 	b.w	8003cec <_malloc_r>
 8005ffc:	b92a      	cbnz	r2, 800600a <_realloc_r+0x24>
 8005ffe:	f7fd fe03 	bl	8003c08 <_free_r>
 8006002:	2400      	movs	r4, #0
 8006004:	4620      	mov	r0, r4
 8006006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800600a:	f000 f840 	bl	800608e <_malloc_usable_size_r>
 800600e:	4285      	cmp	r5, r0
 8006010:	4606      	mov	r6, r0
 8006012:	d802      	bhi.n	800601a <_realloc_r+0x34>
 8006014:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006018:	d8f4      	bhi.n	8006004 <_realloc_r+0x1e>
 800601a:	4629      	mov	r1, r5
 800601c:	4640      	mov	r0, r8
 800601e:	f7fd fe65 	bl	8003cec <_malloc_r>
 8006022:	4607      	mov	r7, r0
 8006024:	2800      	cmp	r0, #0
 8006026:	d0ec      	beq.n	8006002 <_realloc_r+0x1c>
 8006028:	42b5      	cmp	r5, r6
 800602a:	462a      	mov	r2, r5
 800602c:	4621      	mov	r1, r4
 800602e:	bf28      	it	cs
 8006030:	4632      	movcs	r2, r6
 8006032:	f7ff fc47 	bl	80058c4 <memcpy>
 8006036:	4621      	mov	r1, r4
 8006038:	4640      	mov	r0, r8
 800603a:	f7fd fde5 	bl	8003c08 <_free_r>
 800603e:	463c      	mov	r4, r7
 8006040:	e7e0      	b.n	8006004 <_realloc_r+0x1e>

08006042 <__ascii_wctomb>:
 8006042:	4603      	mov	r3, r0
 8006044:	4608      	mov	r0, r1
 8006046:	b141      	cbz	r1, 800605a <__ascii_wctomb+0x18>
 8006048:	2aff      	cmp	r2, #255	@ 0xff
 800604a:	d904      	bls.n	8006056 <__ascii_wctomb+0x14>
 800604c:	228a      	movs	r2, #138	@ 0x8a
 800604e:	f04f 30ff 	mov.w	r0, #4294967295
 8006052:	601a      	str	r2, [r3, #0]
 8006054:	4770      	bx	lr
 8006056:	2001      	movs	r0, #1
 8006058:	700a      	strb	r2, [r1, #0]
 800605a:	4770      	bx	lr

0800605c <fiprintf>:
 800605c:	b40e      	push	{r1, r2, r3}
 800605e:	b503      	push	{r0, r1, lr}
 8006060:	4601      	mov	r1, r0
 8006062:	ab03      	add	r3, sp, #12
 8006064:	4805      	ldr	r0, [pc, #20]	@ (800607c <fiprintf+0x20>)
 8006066:	f853 2b04 	ldr.w	r2, [r3], #4
 800606a:	6800      	ldr	r0, [r0, #0]
 800606c:	9301      	str	r3, [sp, #4]
 800606e:	f000 f83d 	bl	80060ec <_vfiprintf_r>
 8006072:	b002      	add	sp, #8
 8006074:	f85d eb04 	ldr.w	lr, [sp], #4
 8006078:	b003      	add	sp, #12
 800607a:	4770      	bx	lr
 800607c:	20000018 	.word	0x20000018

08006080 <abort>:
 8006080:	2006      	movs	r0, #6
 8006082:	b508      	push	{r3, lr}
 8006084:	f000 fa06 	bl	8006494 <raise>
 8006088:	2001      	movs	r0, #1
 800608a:	f7fa ffa2 	bl	8000fd2 <_exit>

0800608e <_malloc_usable_size_r>:
 800608e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006092:	1f18      	subs	r0, r3, #4
 8006094:	2b00      	cmp	r3, #0
 8006096:	bfbc      	itt	lt
 8006098:	580b      	ldrlt	r3, [r1, r0]
 800609a:	18c0      	addlt	r0, r0, r3
 800609c:	4770      	bx	lr

0800609e <__sfputc_r>:
 800609e:	6893      	ldr	r3, [r2, #8]
 80060a0:	b410      	push	{r4}
 80060a2:	3b01      	subs	r3, #1
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	6093      	str	r3, [r2, #8]
 80060a8:	da07      	bge.n	80060ba <__sfputc_r+0x1c>
 80060aa:	6994      	ldr	r4, [r2, #24]
 80060ac:	42a3      	cmp	r3, r4
 80060ae:	db01      	blt.n	80060b4 <__sfputc_r+0x16>
 80060b0:	290a      	cmp	r1, #10
 80060b2:	d102      	bne.n	80060ba <__sfputc_r+0x1c>
 80060b4:	bc10      	pop	{r4}
 80060b6:	f000 b931 	b.w	800631c <__swbuf_r>
 80060ba:	6813      	ldr	r3, [r2, #0]
 80060bc:	1c58      	adds	r0, r3, #1
 80060be:	6010      	str	r0, [r2, #0]
 80060c0:	7019      	strb	r1, [r3, #0]
 80060c2:	4608      	mov	r0, r1
 80060c4:	bc10      	pop	{r4}
 80060c6:	4770      	bx	lr

080060c8 <__sfputs_r>:
 80060c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ca:	4606      	mov	r6, r0
 80060cc:	460f      	mov	r7, r1
 80060ce:	4614      	mov	r4, r2
 80060d0:	18d5      	adds	r5, r2, r3
 80060d2:	42ac      	cmp	r4, r5
 80060d4:	d101      	bne.n	80060da <__sfputs_r+0x12>
 80060d6:	2000      	movs	r0, #0
 80060d8:	e007      	b.n	80060ea <__sfputs_r+0x22>
 80060da:	463a      	mov	r2, r7
 80060dc:	4630      	mov	r0, r6
 80060de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060e2:	f7ff ffdc 	bl	800609e <__sfputc_r>
 80060e6:	1c43      	adds	r3, r0, #1
 80060e8:	d1f3      	bne.n	80060d2 <__sfputs_r+0xa>
 80060ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080060ec <_vfiprintf_r>:
 80060ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060f0:	460d      	mov	r5, r1
 80060f2:	4614      	mov	r4, r2
 80060f4:	4698      	mov	r8, r3
 80060f6:	4606      	mov	r6, r0
 80060f8:	b09d      	sub	sp, #116	@ 0x74
 80060fa:	b118      	cbz	r0, 8006104 <_vfiprintf_r+0x18>
 80060fc:	6a03      	ldr	r3, [r0, #32]
 80060fe:	b90b      	cbnz	r3, 8006104 <_vfiprintf_r+0x18>
 8006100:	f7fc fe06 	bl	8002d10 <__sinit>
 8006104:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006106:	07d9      	lsls	r1, r3, #31
 8006108:	d405      	bmi.n	8006116 <_vfiprintf_r+0x2a>
 800610a:	89ab      	ldrh	r3, [r5, #12]
 800610c:	059a      	lsls	r2, r3, #22
 800610e:	d402      	bmi.n	8006116 <_vfiprintf_r+0x2a>
 8006110:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006112:	f7fc ff14 	bl	8002f3e <__retarget_lock_acquire_recursive>
 8006116:	89ab      	ldrh	r3, [r5, #12]
 8006118:	071b      	lsls	r3, r3, #28
 800611a:	d501      	bpl.n	8006120 <_vfiprintf_r+0x34>
 800611c:	692b      	ldr	r3, [r5, #16]
 800611e:	b99b      	cbnz	r3, 8006148 <_vfiprintf_r+0x5c>
 8006120:	4629      	mov	r1, r5
 8006122:	4630      	mov	r0, r6
 8006124:	f000 f938 	bl	8006398 <__swsetup_r>
 8006128:	b170      	cbz	r0, 8006148 <_vfiprintf_r+0x5c>
 800612a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800612c:	07dc      	lsls	r4, r3, #31
 800612e:	d504      	bpl.n	800613a <_vfiprintf_r+0x4e>
 8006130:	f04f 30ff 	mov.w	r0, #4294967295
 8006134:	b01d      	add	sp, #116	@ 0x74
 8006136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800613a:	89ab      	ldrh	r3, [r5, #12]
 800613c:	0598      	lsls	r0, r3, #22
 800613e:	d4f7      	bmi.n	8006130 <_vfiprintf_r+0x44>
 8006140:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006142:	f7fc fefd 	bl	8002f40 <__retarget_lock_release_recursive>
 8006146:	e7f3      	b.n	8006130 <_vfiprintf_r+0x44>
 8006148:	2300      	movs	r3, #0
 800614a:	9309      	str	r3, [sp, #36]	@ 0x24
 800614c:	2320      	movs	r3, #32
 800614e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006152:	2330      	movs	r3, #48	@ 0x30
 8006154:	f04f 0901 	mov.w	r9, #1
 8006158:	f8cd 800c 	str.w	r8, [sp, #12]
 800615c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006308 <_vfiprintf_r+0x21c>
 8006160:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006164:	4623      	mov	r3, r4
 8006166:	469a      	mov	sl, r3
 8006168:	f813 2b01 	ldrb.w	r2, [r3], #1
 800616c:	b10a      	cbz	r2, 8006172 <_vfiprintf_r+0x86>
 800616e:	2a25      	cmp	r2, #37	@ 0x25
 8006170:	d1f9      	bne.n	8006166 <_vfiprintf_r+0x7a>
 8006172:	ebba 0b04 	subs.w	fp, sl, r4
 8006176:	d00b      	beq.n	8006190 <_vfiprintf_r+0xa4>
 8006178:	465b      	mov	r3, fp
 800617a:	4622      	mov	r2, r4
 800617c:	4629      	mov	r1, r5
 800617e:	4630      	mov	r0, r6
 8006180:	f7ff ffa2 	bl	80060c8 <__sfputs_r>
 8006184:	3001      	adds	r0, #1
 8006186:	f000 80a7 	beq.w	80062d8 <_vfiprintf_r+0x1ec>
 800618a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800618c:	445a      	add	r2, fp
 800618e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006190:	f89a 3000 	ldrb.w	r3, [sl]
 8006194:	2b00      	cmp	r3, #0
 8006196:	f000 809f 	beq.w	80062d8 <_vfiprintf_r+0x1ec>
 800619a:	2300      	movs	r3, #0
 800619c:	f04f 32ff 	mov.w	r2, #4294967295
 80061a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061a4:	f10a 0a01 	add.w	sl, sl, #1
 80061a8:	9304      	str	r3, [sp, #16]
 80061aa:	9307      	str	r3, [sp, #28]
 80061ac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80061b0:	931a      	str	r3, [sp, #104]	@ 0x68
 80061b2:	4654      	mov	r4, sl
 80061b4:	2205      	movs	r2, #5
 80061b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061ba:	4853      	ldr	r0, [pc, #332]	@ (8006308 <_vfiprintf_r+0x21c>)
 80061bc:	f7fc fec1 	bl	8002f42 <memchr>
 80061c0:	9a04      	ldr	r2, [sp, #16]
 80061c2:	b9d8      	cbnz	r0, 80061fc <_vfiprintf_r+0x110>
 80061c4:	06d1      	lsls	r1, r2, #27
 80061c6:	bf44      	itt	mi
 80061c8:	2320      	movmi	r3, #32
 80061ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80061ce:	0713      	lsls	r3, r2, #28
 80061d0:	bf44      	itt	mi
 80061d2:	232b      	movmi	r3, #43	@ 0x2b
 80061d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80061d8:	f89a 3000 	ldrb.w	r3, [sl]
 80061dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80061de:	d015      	beq.n	800620c <_vfiprintf_r+0x120>
 80061e0:	4654      	mov	r4, sl
 80061e2:	2000      	movs	r0, #0
 80061e4:	f04f 0c0a 	mov.w	ip, #10
 80061e8:	9a07      	ldr	r2, [sp, #28]
 80061ea:	4621      	mov	r1, r4
 80061ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061f0:	3b30      	subs	r3, #48	@ 0x30
 80061f2:	2b09      	cmp	r3, #9
 80061f4:	d94b      	bls.n	800628e <_vfiprintf_r+0x1a2>
 80061f6:	b1b0      	cbz	r0, 8006226 <_vfiprintf_r+0x13a>
 80061f8:	9207      	str	r2, [sp, #28]
 80061fa:	e014      	b.n	8006226 <_vfiprintf_r+0x13a>
 80061fc:	eba0 0308 	sub.w	r3, r0, r8
 8006200:	fa09 f303 	lsl.w	r3, r9, r3
 8006204:	4313      	orrs	r3, r2
 8006206:	46a2      	mov	sl, r4
 8006208:	9304      	str	r3, [sp, #16]
 800620a:	e7d2      	b.n	80061b2 <_vfiprintf_r+0xc6>
 800620c:	9b03      	ldr	r3, [sp, #12]
 800620e:	1d19      	adds	r1, r3, #4
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	9103      	str	r1, [sp, #12]
 8006214:	2b00      	cmp	r3, #0
 8006216:	bfbb      	ittet	lt
 8006218:	425b      	neglt	r3, r3
 800621a:	f042 0202 	orrlt.w	r2, r2, #2
 800621e:	9307      	strge	r3, [sp, #28]
 8006220:	9307      	strlt	r3, [sp, #28]
 8006222:	bfb8      	it	lt
 8006224:	9204      	strlt	r2, [sp, #16]
 8006226:	7823      	ldrb	r3, [r4, #0]
 8006228:	2b2e      	cmp	r3, #46	@ 0x2e
 800622a:	d10a      	bne.n	8006242 <_vfiprintf_r+0x156>
 800622c:	7863      	ldrb	r3, [r4, #1]
 800622e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006230:	d132      	bne.n	8006298 <_vfiprintf_r+0x1ac>
 8006232:	9b03      	ldr	r3, [sp, #12]
 8006234:	3402      	adds	r4, #2
 8006236:	1d1a      	adds	r2, r3, #4
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	9203      	str	r2, [sp, #12]
 800623c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006240:	9305      	str	r3, [sp, #20]
 8006242:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800630c <_vfiprintf_r+0x220>
 8006246:	2203      	movs	r2, #3
 8006248:	4650      	mov	r0, sl
 800624a:	7821      	ldrb	r1, [r4, #0]
 800624c:	f7fc fe79 	bl	8002f42 <memchr>
 8006250:	b138      	cbz	r0, 8006262 <_vfiprintf_r+0x176>
 8006252:	2240      	movs	r2, #64	@ 0x40
 8006254:	9b04      	ldr	r3, [sp, #16]
 8006256:	eba0 000a 	sub.w	r0, r0, sl
 800625a:	4082      	lsls	r2, r0
 800625c:	4313      	orrs	r3, r2
 800625e:	3401      	adds	r4, #1
 8006260:	9304      	str	r3, [sp, #16]
 8006262:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006266:	2206      	movs	r2, #6
 8006268:	4829      	ldr	r0, [pc, #164]	@ (8006310 <_vfiprintf_r+0x224>)
 800626a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800626e:	f7fc fe68 	bl	8002f42 <memchr>
 8006272:	2800      	cmp	r0, #0
 8006274:	d03f      	beq.n	80062f6 <_vfiprintf_r+0x20a>
 8006276:	4b27      	ldr	r3, [pc, #156]	@ (8006314 <_vfiprintf_r+0x228>)
 8006278:	bb1b      	cbnz	r3, 80062c2 <_vfiprintf_r+0x1d6>
 800627a:	9b03      	ldr	r3, [sp, #12]
 800627c:	3307      	adds	r3, #7
 800627e:	f023 0307 	bic.w	r3, r3, #7
 8006282:	3308      	adds	r3, #8
 8006284:	9303      	str	r3, [sp, #12]
 8006286:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006288:	443b      	add	r3, r7
 800628a:	9309      	str	r3, [sp, #36]	@ 0x24
 800628c:	e76a      	b.n	8006164 <_vfiprintf_r+0x78>
 800628e:	460c      	mov	r4, r1
 8006290:	2001      	movs	r0, #1
 8006292:	fb0c 3202 	mla	r2, ip, r2, r3
 8006296:	e7a8      	b.n	80061ea <_vfiprintf_r+0xfe>
 8006298:	2300      	movs	r3, #0
 800629a:	f04f 0c0a 	mov.w	ip, #10
 800629e:	4619      	mov	r1, r3
 80062a0:	3401      	adds	r4, #1
 80062a2:	9305      	str	r3, [sp, #20]
 80062a4:	4620      	mov	r0, r4
 80062a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062aa:	3a30      	subs	r2, #48	@ 0x30
 80062ac:	2a09      	cmp	r2, #9
 80062ae:	d903      	bls.n	80062b8 <_vfiprintf_r+0x1cc>
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d0c6      	beq.n	8006242 <_vfiprintf_r+0x156>
 80062b4:	9105      	str	r1, [sp, #20]
 80062b6:	e7c4      	b.n	8006242 <_vfiprintf_r+0x156>
 80062b8:	4604      	mov	r4, r0
 80062ba:	2301      	movs	r3, #1
 80062bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80062c0:	e7f0      	b.n	80062a4 <_vfiprintf_r+0x1b8>
 80062c2:	ab03      	add	r3, sp, #12
 80062c4:	9300      	str	r3, [sp, #0]
 80062c6:	462a      	mov	r2, r5
 80062c8:	4630      	mov	r0, r6
 80062ca:	4b13      	ldr	r3, [pc, #76]	@ (8006318 <_vfiprintf_r+0x22c>)
 80062cc:	a904      	add	r1, sp, #16
 80062ce:	f7fb fec5 	bl	800205c <_printf_float>
 80062d2:	4607      	mov	r7, r0
 80062d4:	1c78      	adds	r0, r7, #1
 80062d6:	d1d6      	bne.n	8006286 <_vfiprintf_r+0x19a>
 80062d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80062da:	07d9      	lsls	r1, r3, #31
 80062dc:	d405      	bmi.n	80062ea <_vfiprintf_r+0x1fe>
 80062de:	89ab      	ldrh	r3, [r5, #12]
 80062e0:	059a      	lsls	r2, r3, #22
 80062e2:	d402      	bmi.n	80062ea <_vfiprintf_r+0x1fe>
 80062e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80062e6:	f7fc fe2b 	bl	8002f40 <__retarget_lock_release_recursive>
 80062ea:	89ab      	ldrh	r3, [r5, #12]
 80062ec:	065b      	lsls	r3, r3, #25
 80062ee:	f53f af1f 	bmi.w	8006130 <_vfiprintf_r+0x44>
 80062f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80062f4:	e71e      	b.n	8006134 <_vfiprintf_r+0x48>
 80062f6:	ab03      	add	r3, sp, #12
 80062f8:	9300      	str	r3, [sp, #0]
 80062fa:	462a      	mov	r2, r5
 80062fc:	4630      	mov	r0, r6
 80062fe:	4b06      	ldr	r3, [pc, #24]	@ (8006318 <_vfiprintf_r+0x22c>)
 8006300:	a904      	add	r1, sp, #16
 8006302:	f7fc f949 	bl	8002598 <_printf_i>
 8006306:	e7e4      	b.n	80062d2 <_vfiprintf_r+0x1e6>
 8006308:	08006989 	.word	0x08006989
 800630c:	0800698f 	.word	0x0800698f
 8006310:	08006993 	.word	0x08006993
 8006314:	0800205d 	.word	0x0800205d
 8006318:	080060c9 	.word	0x080060c9

0800631c <__swbuf_r>:
 800631c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800631e:	460e      	mov	r6, r1
 8006320:	4614      	mov	r4, r2
 8006322:	4605      	mov	r5, r0
 8006324:	b118      	cbz	r0, 800632e <__swbuf_r+0x12>
 8006326:	6a03      	ldr	r3, [r0, #32]
 8006328:	b90b      	cbnz	r3, 800632e <__swbuf_r+0x12>
 800632a:	f7fc fcf1 	bl	8002d10 <__sinit>
 800632e:	69a3      	ldr	r3, [r4, #24]
 8006330:	60a3      	str	r3, [r4, #8]
 8006332:	89a3      	ldrh	r3, [r4, #12]
 8006334:	071a      	lsls	r2, r3, #28
 8006336:	d501      	bpl.n	800633c <__swbuf_r+0x20>
 8006338:	6923      	ldr	r3, [r4, #16]
 800633a:	b943      	cbnz	r3, 800634e <__swbuf_r+0x32>
 800633c:	4621      	mov	r1, r4
 800633e:	4628      	mov	r0, r5
 8006340:	f000 f82a 	bl	8006398 <__swsetup_r>
 8006344:	b118      	cbz	r0, 800634e <__swbuf_r+0x32>
 8006346:	f04f 37ff 	mov.w	r7, #4294967295
 800634a:	4638      	mov	r0, r7
 800634c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800634e:	6823      	ldr	r3, [r4, #0]
 8006350:	6922      	ldr	r2, [r4, #16]
 8006352:	b2f6      	uxtb	r6, r6
 8006354:	1a98      	subs	r0, r3, r2
 8006356:	6963      	ldr	r3, [r4, #20]
 8006358:	4637      	mov	r7, r6
 800635a:	4283      	cmp	r3, r0
 800635c:	dc05      	bgt.n	800636a <__swbuf_r+0x4e>
 800635e:	4621      	mov	r1, r4
 8006360:	4628      	mov	r0, r5
 8006362:	f7ff fa4b 	bl	80057fc <_fflush_r>
 8006366:	2800      	cmp	r0, #0
 8006368:	d1ed      	bne.n	8006346 <__swbuf_r+0x2a>
 800636a:	68a3      	ldr	r3, [r4, #8]
 800636c:	3b01      	subs	r3, #1
 800636e:	60a3      	str	r3, [r4, #8]
 8006370:	6823      	ldr	r3, [r4, #0]
 8006372:	1c5a      	adds	r2, r3, #1
 8006374:	6022      	str	r2, [r4, #0]
 8006376:	701e      	strb	r6, [r3, #0]
 8006378:	6962      	ldr	r2, [r4, #20]
 800637a:	1c43      	adds	r3, r0, #1
 800637c:	429a      	cmp	r2, r3
 800637e:	d004      	beq.n	800638a <__swbuf_r+0x6e>
 8006380:	89a3      	ldrh	r3, [r4, #12]
 8006382:	07db      	lsls	r3, r3, #31
 8006384:	d5e1      	bpl.n	800634a <__swbuf_r+0x2e>
 8006386:	2e0a      	cmp	r6, #10
 8006388:	d1df      	bne.n	800634a <__swbuf_r+0x2e>
 800638a:	4621      	mov	r1, r4
 800638c:	4628      	mov	r0, r5
 800638e:	f7ff fa35 	bl	80057fc <_fflush_r>
 8006392:	2800      	cmp	r0, #0
 8006394:	d0d9      	beq.n	800634a <__swbuf_r+0x2e>
 8006396:	e7d6      	b.n	8006346 <__swbuf_r+0x2a>

08006398 <__swsetup_r>:
 8006398:	b538      	push	{r3, r4, r5, lr}
 800639a:	4b29      	ldr	r3, [pc, #164]	@ (8006440 <__swsetup_r+0xa8>)
 800639c:	4605      	mov	r5, r0
 800639e:	6818      	ldr	r0, [r3, #0]
 80063a0:	460c      	mov	r4, r1
 80063a2:	b118      	cbz	r0, 80063ac <__swsetup_r+0x14>
 80063a4:	6a03      	ldr	r3, [r0, #32]
 80063a6:	b90b      	cbnz	r3, 80063ac <__swsetup_r+0x14>
 80063a8:	f7fc fcb2 	bl	8002d10 <__sinit>
 80063ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063b0:	0719      	lsls	r1, r3, #28
 80063b2:	d422      	bmi.n	80063fa <__swsetup_r+0x62>
 80063b4:	06da      	lsls	r2, r3, #27
 80063b6:	d407      	bmi.n	80063c8 <__swsetup_r+0x30>
 80063b8:	2209      	movs	r2, #9
 80063ba:	602a      	str	r2, [r5, #0]
 80063bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063c0:	f04f 30ff 	mov.w	r0, #4294967295
 80063c4:	81a3      	strh	r3, [r4, #12]
 80063c6:	e033      	b.n	8006430 <__swsetup_r+0x98>
 80063c8:	0758      	lsls	r0, r3, #29
 80063ca:	d512      	bpl.n	80063f2 <__swsetup_r+0x5a>
 80063cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80063ce:	b141      	cbz	r1, 80063e2 <__swsetup_r+0x4a>
 80063d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80063d4:	4299      	cmp	r1, r3
 80063d6:	d002      	beq.n	80063de <__swsetup_r+0x46>
 80063d8:	4628      	mov	r0, r5
 80063da:	f7fd fc15 	bl	8003c08 <_free_r>
 80063de:	2300      	movs	r3, #0
 80063e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80063e2:	89a3      	ldrh	r3, [r4, #12]
 80063e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80063e8:	81a3      	strh	r3, [r4, #12]
 80063ea:	2300      	movs	r3, #0
 80063ec:	6063      	str	r3, [r4, #4]
 80063ee:	6923      	ldr	r3, [r4, #16]
 80063f0:	6023      	str	r3, [r4, #0]
 80063f2:	89a3      	ldrh	r3, [r4, #12]
 80063f4:	f043 0308 	orr.w	r3, r3, #8
 80063f8:	81a3      	strh	r3, [r4, #12]
 80063fa:	6923      	ldr	r3, [r4, #16]
 80063fc:	b94b      	cbnz	r3, 8006412 <__swsetup_r+0x7a>
 80063fe:	89a3      	ldrh	r3, [r4, #12]
 8006400:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006404:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006408:	d003      	beq.n	8006412 <__swsetup_r+0x7a>
 800640a:	4621      	mov	r1, r4
 800640c:	4628      	mov	r0, r5
 800640e:	f000 f882 	bl	8006516 <__smakebuf_r>
 8006412:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006416:	f013 0201 	ands.w	r2, r3, #1
 800641a:	d00a      	beq.n	8006432 <__swsetup_r+0x9a>
 800641c:	2200      	movs	r2, #0
 800641e:	60a2      	str	r2, [r4, #8]
 8006420:	6962      	ldr	r2, [r4, #20]
 8006422:	4252      	negs	r2, r2
 8006424:	61a2      	str	r2, [r4, #24]
 8006426:	6922      	ldr	r2, [r4, #16]
 8006428:	b942      	cbnz	r2, 800643c <__swsetup_r+0xa4>
 800642a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800642e:	d1c5      	bne.n	80063bc <__swsetup_r+0x24>
 8006430:	bd38      	pop	{r3, r4, r5, pc}
 8006432:	0799      	lsls	r1, r3, #30
 8006434:	bf58      	it	pl
 8006436:	6962      	ldrpl	r2, [r4, #20]
 8006438:	60a2      	str	r2, [r4, #8]
 800643a:	e7f4      	b.n	8006426 <__swsetup_r+0x8e>
 800643c:	2000      	movs	r0, #0
 800643e:	e7f7      	b.n	8006430 <__swsetup_r+0x98>
 8006440:	20000018 	.word	0x20000018

08006444 <_raise_r>:
 8006444:	291f      	cmp	r1, #31
 8006446:	b538      	push	{r3, r4, r5, lr}
 8006448:	4605      	mov	r5, r0
 800644a:	460c      	mov	r4, r1
 800644c:	d904      	bls.n	8006458 <_raise_r+0x14>
 800644e:	2316      	movs	r3, #22
 8006450:	6003      	str	r3, [r0, #0]
 8006452:	f04f 30ff 	mov.w	r0, #4294967295
 8006456:	bd38      	pop	{r3, r4, r5, pc}
 8006458:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800645a:	b112      	cbz	r2, 8006462 <_raise_r+0x1e>
 800645c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006460:	b94b      	cbnz	r3, 8006476 <_raise_r+0x32>
 8006462:	4628      	mov	r0, r5
 8006464:	f000 f830 	bl	80064c8 <_getpid_r>
 8006468:	4622      	mov	r2, r4
 800646a:	4601      	mov	r1, r0
 800646c:	4628      	mov	r0, r5
 800646e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006472:	f000 b817 	b.w	80064a4 <_kill_r>
 8006476:	2b01      	cmp	r3, #1
 8006478:	d00a      	beq.n	8006490 <_raise_r+0x4c>
 800647a:	1c59      	adds	r1, r3, #1
 800647c:	d103      	bne.n	8006486 <_raise_r+0x42>
 800647e:	2316      	movs	r3, #22
 8006480:	6003      	str	r3, [r0, #0]
 8006482:	2001      	movs	r0, #1
 8006484:	e7e7      	b.n	8006456 <_raise_r+0x12>
 8006486:	2100      	movs	r1, #0
 8006488:	4620      	mov	r0, r4
 800648a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800648e:	4798      	blx	r3
 8006490:	2000      	movs	r0, #0
 8006492:	e7e0      	b.n	8006456 <_raise_r+0x12>

08006494 <raise>:
 8006494:	4b02      	ldr	r3, [pc, #8]	@ (80064a0 <raise+0xc>)
 8006496:	4601      	mov	r1, r0
 8006498:	6818      	ldr	r0, [r3, #0]
 800649a:	f7ff bfd3 	b.w	8006444 <_raise_r>
 800649e:	bf00      	nop
 80064a0:	20000018 	.word	0x20000018

080064a4 <_kill_r>:
 80064a4:	b538      	push	{r3, r4, r5, lr}
 80064a6:	2300      	movs	r3, #0
 80064a8:	4d06      	ldr	r5, [pc, #24]	@ (80064c4 <_kill_r+0x20>)
 80064aa:	4604      	mov	r4, r0
 80064ac:	4608      	mov	r0, r1
 80064ae:	4611      	mov	r1, r2
 80064b0:	602b      	str	r3, [r5, #0]
 80064b2:	f7fa fd7e 	bl	8000fb2 <_kill>
 80064b6:	1c43      	adds	r3, r0, #1
 80064b8:	d102      	bne.n	80064c0 <_kill_r+0x1c>
 80064ba:	682b      	ldr	r3, [r5, #0]
 80064bc:	b103      	cbz	r3, 80064c0 <_kill_r+0x1c>
 80064be:	6023      	str	r3, [r4, #0]
 80064c0:	bd38      	pop	{r3, r4, r5, pc}
 80064c2:	bf00      	nop
 80064c4:	20000334 	.word	0x20000334

080064c8 <_getpid_r>:
 80064c8:	f7fa bd6c 	b.w	8000fa4 <_getpid>

080064cc <__swhatbuf_r>:
 80064cc:	b570      	push	{r4, r5, r6, lr}
 80064ce:	460c      	mov	r4, r1
 80064d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064d4:	4615      	mov	r5, r2
 80064d6:	2900      	cmp	r1, #0
 80064d8:	461e      	mov	r6, r3
 80064da:	b096      	sub	sp, #88	@ 0x58
 80064dc:	da0c      	bge.n	80064f8 <__swhatbuf_r+0x2c>
 80064de:	89a3      	ldrh	r3, [r4, #12]
 80064e0:	2100      	movs	r1, #0
 80064e2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80064e6:	bf14      	ite	ne
 80064e8:	2340      	movne	r3, #64	@ 0x40
 80064ea:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80064ee:	2000      	movs	r0, #0
 80064f0:	6031      	str	r1, [r6, #0]
 80064f2:	602b      	str	r3, [r5, #0]
 80064f4:	b016      	add	sp, #88	@ 0x58
 80064f6:	bd70      	pop	{r4, r5, r6, pc}
 80064f8:	466a      	mov	r2, sp
 80064fa:	f000 f849 	bl	8006590 <_fstat_r>
 80064fe:	2800      	cmp	r0, #0
 8006500:	dbed      	blt.n	80064de <__swhatbuf_r+0x12>
 8006502:	9901      	ldr	r1, [sp, #4]
 8006504:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006508:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800650c:	4259      	negs	r1, r3
 800650e:	4159      	adcs	r1, r3
 8006510:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006514:	e7eb      	b.n	80064ee <__swhatbuf_r+0x22>

08006516 <__smakebuf_r>:
 8006516:	898b      	ldrh	r3, [r1, #12]
 8006518:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800651a:	079d      	lsls	r5, r3, #30
 800651c:	4606      	mov	r6, r0
 800651e:	460c      	mov	r4, r1
 8006520:	d507      	bpl.n	8006532 <__smakebuf_r+0x1c>
 8006522:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006526:	6023      	str	r3, [r4, #0]
 8006528:	6123      	str	r3, [r4, #16]
 800652a:	2301      	movs	r3, #1
 800652c:	6163      	str	r3, [r4, #20]
 800652e:	b003      	add	sp, #12
 8006530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006532:	466a      	mov	r2, sp
 8006534:	ab01      	add	r3, sp, #4
 8006536:	f7ff ffc9 	bl	80064cc <__swhatbuf_r>
 800653a:	9f00      	ldr	r7, [sp, #0]
 800653c:	4605      	mov	r5, r0
 800653e:	4639      	mov	r1, r7
 8006540:	4630      	mov	r0, r6
 8006542:	f7fd fbd3 	bl	8003cec <_malloc_r>
 8006546:	b948      	cbnz	r0, 800655c <__smakebuf_r+0x46>
 8006548:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800654c:	059a      	lsls	r2, r3, #22
 800654e:	d4ee      	bmi.n	800652e <__smakebuf_r+0x18>
 8006550:	f023 0303 	bic.w	r3, r3, #3
 8006554:	f043 0302 	orr.w	r3, r3, #2
 8006558:	81a3      	strh	r3, [r4, #12]
 800655a:	e7e2      	b.n	8006522 <__smakebuf_r+0xc>
 800655c:	89a3      	ldrh	r3, [r4, #12]
 800655e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006562:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006566:	81a3      	strh	r3, [r4, #12]
 8006568:	9b01      	ldr	r3, [sp, #4]
 800656a:	6020      	str	r0, [r4, #0]
 800656c:	b15b      	cbz	r3, 8006586 <__smakebuf_r+0x70>
 800656e:	4630      	mov	r0, r6
 8006570:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006574:	f000 f81e 	bl	80065b4 <_isatty_r>
 8006578:	b128      	cbz	r0, 8006586 <__smakebuf_r+0x70>
 800657a:	89a3      	ldrh	r3, [r4, #12]
 800657c:	f023 0303 	bic.w	r3, r3, #3
 8006580:	f043 0301 	orr.w	r3, r3, #1
 8006584:	81a3      	strh	r3, [r4, #12]
 8006586:	89a3      	ldrh	r3, [r4, #12]
 8006588:	431d      	orrs	r5, r3
 800658a:	81a5      	strh	r5, [r4, #12]
 800658c:	e7cf      	b.n	800652e <__smakebuf_r+0x18>
	...

08006590 <_fstat_r>:
 8006590:	b538      	push	{r3, r4, r5, lr}
 8006592:	2300      	movs	r3, #0
 8006594:	4d06      	ldr	r5, [pc, #24]	@ (80065b0 <_fstat_r+0x20>)
 8006596:	4604      	mov	r4, r0
 8006598:	4608      	mov	r0, r1
 800659a:	4611      	mov	r1, r2
 800659c:	602b      	str	r3, [r5, #0]
 800659e:	f7fa fd67 	bl	8001070 <_fstat>
 80065a2:	1c43      	adds	r3, r0, #1
 80065a4:	d102      	bne.n	80065ac <_fstat_r+0x1c>
 80065a6:	682b      	ldr	r3, [r5, #0]
 80065a8:	b103      	cbz	r3, 80065ac <_fstat_r+0x1c>
 80065aa:	6023      	str	r3, [r4, #0]
 80065ac:	bd38      	pop	{r3, r4, r5, pc}
 80065ae:	bf00      	nop
 80065b0:	20000334 	.word	0x20000334

080065b4 <_isatty_r>:
 80065b4:	b538      	push	{r3, r4, r5, lr}
 80065b6:	2300      	movs	r3, #0
 80065b8:	4d05      	ldr	r5, [pc, #20]	@ (80065d0 <_isatty_r+0x1c>)
 80065ba:	4604      	mov	r4, r0
 80065bc:	4608      	mov	r0, r1
 80065be:	602b      	str	r3, [r5, #0]
 80065c0:	f7fa fd65 	bl	800108e <_isatty>
 80065c4:	1c43      	adds	r3, r0, #1
 80065c6:	d102      	bne.n	80065ce <_isatty_r+0x1a>
 80065c8:	682b      	ldr	r3, [r5, #0]
 80065ca:	b103      	cbz	r3, 80065ce <_isatty_r+0x1a>
 80065cc:	6023      	str	r3, [r4, #0]
 80065ce:	bd38      	pop	{r3, r4, r5, pc}
 80065d0:	20000334 	.word	0x20000334

080065d4 <_init>:
 80065d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065d6:	bf00      	nop
 80065d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065da:	bc08      	pop	{r3}
 80065dc:	469e      	mov	lr, r3
 80065de:	4770      	bx	lr

080065e0 <_fini>:
 80065e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065e2:	bf00      	nop
 80065e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065e6:	bc08      	pop	{r3}
 80065e8:	469e      	mov	lr, r3
 80065ea:	4770      	bx	lr
